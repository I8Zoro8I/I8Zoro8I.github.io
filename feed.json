{
    "version": "https://jsonfeed.org/version/1",
    "title": "CYX",
    "subtitle": "Blog",
    "icon": "http://example.com/images/favicon.ico",
    "description": "emm这里什么都有",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/09/05/post/linux/linux%E5%9F%BA%E7%A1%80/",
            "url": "http://example.com/2024/09/05/post/linux/linux%E5%9F%BA%E7%A1%80/",
            "title": "linux基础",
            "date_published": "2024-09-05T15:19:30.746Z",
            "content_html": "<h1 id=\"linux基础\">Linux基础</h1>\r\n<h3 id=\"linux-简介\"><a href=\"#linux-简介\">Linux 简介</a></h3>\r\n<p>通过以下三点可以概括 Linux 到底是什么：</p>\r\n<ul>\r\n<li><strong>类 Unix 系统</strong>：Linux 是一种自由、开放源码的类似 Unix\r\n的操作系统</li>\r\n<li><strong>Linux 本质是指 Linux 内核</strong>：严格来讲，Linux\r\n这个词本身只表示 Linux 内核，单独的 Linux\r\n内核并不能成为一个可以正常工作的操作系统。所以，就有了各种 Linux\r\n发行版。</li>\r\n<li><strong>Linux 之父(林纳斯·本纳第克特·托瓦兹 Linus Benedict\r\nTorvalds)</strong>：一个编程领域的传奇式人物，真大佬！我辈崇拜敬仰之楷模。他是\r\n<strong>Linux 内核</strong> 的最早作者，随后发起了这个开源项目，担任\r\nLinux 内核的首要架构师。他还发起了 Git\r\n这个开源项目，并为主要的开发者。</li>\r\n</ul>\r\n<h2 id=\"linux文件系统\">Linux文件系统</h2>\r\n<h3 id=\"linux文件系统简介\"><a\r\nhref=\"#Linux文件系统简介\">Linux文件系统简介</a></h3>\r\n<p>在 Linux\r\n操作系统中，一切被操作系统管理的资源，如网络接口卡、磁盘驱动器、打印机、输入输出设备、普通文件或目录等，都被视为文件。这是\r\nLinux 系统中一个重要的概念，即\"一切都是文件\"。</p>\r\n<p>这种概念源自 UNIX\r\n哲学，即将所有资源都抽象为文件的方式来进行管理和访问。Linux\r\n的文件系统也借鉴了 UNIX 文件系统的设计理念。这种设计使得 Linux\r\n系统可以通过统一的文件接口来管理和操作不同类型的资源，从而实现了一种统一的文件操作方式。例如，可以使用类似于读写文件的方式来对待网络接口、磁盘驱动器、设备文件等，使得操作和管理这些资源更加统一和简便。</p>\r\n<p>这种文件为中心的设计理念为 Linux 系统带来了灵活性和可扩展性，使得\r\nLinux 成为一种强大的操作系统。同时，这也是 Linux\r\n系统的一大特点，深受广大用户和开发者的喜欢和推崇。</p>\r\n<h3 id=\"inode-介绍\"><a href=\"#inode-介绍\">inode 介绍</a></h3>\r\n<p>inode 是 Linux/Unix 文件系统的基础。那 inode\r\n到是什么?有什么作用呢?</p>\r\n<p>通过以下五点可以概括 inode 到底是什么：</p>\r\n<p>硬盘的最小存储单位是扇区(Sector)，块(block)由多个扇区组成。文件数据存储在块中。块的最常见的大小是\r\n4kb，约为 8 个连续的扇区组成（每个扇区存储 512\r\n字节）。一个文件可能会占用多个\r\nblock，但是一个块只能存放一个文件。虽然，我们将文件存储在了块(block)中，但是我们还需要一个空间来存储文件的\r\n元信息\r\nmetadata：如某个文件被分成几块、每一块在的地址、文件拥有者，创建时间，权限，大小等。这种\r\n存储文件元信息的区域就叫 inode，译为索引节点：i（index）+node。\r\n每个文件都有一个唯一的 inode，存储文件的元信息。 inode\r\n是一种固定大小的数据结构，其大小在文件系统创建时就确定了，并且在文件的生命周期内保持不变。\r\ninode 的访问速度非常快，因为系统可以直接通过 inode\r\n号码定位到文件的元数据信息，无需遍历整个文件系统。 inode\r\n的数量是有限的，每个文件系统只能包含固定数量的\r\ninode。这意味着当文件系统中的 inode\r\n用完时，无法再创建新的文件或目录，即使磁盘上还有可用空间。因此，在创建文件系统时，需要根据文件和目录的预期数量来合理分配\r\ninode 的数量。 可以使用 stat 命令可以查看文件的 inode 信息，包括文件的\r\ninode 号、文件类型、权限、所有者、文件大小、修改时间。 简单来说：inode\r\n就是用来维护某个文件被分成几块、每一块在的地址、文件拥有者，创建时间，权限，大小等信息。</p>\r\n<p>再总结一下 inode 和 block：</p>\r\n<p>inode：记录文件的属性信息，可以使用 stat 命令查看 inode 信息。\r\nblock：实际文件的内容，如果一个文件大于一个块时候，那么将占用多个\r\nblock，但是一个块只能存放一个文件。（因为数据是由 inode\r\n指向的，如果有两个文件的数据存放在同一个块中，就会乱套了）</p>\r\n<h3 id=\"硬链接和软链接\">硬链接和软链接</h3>\r\n<p>在 Linux/类 Unix 系统上，文件链接（File\r\nLink）是一种特殊的文件类型，可以在文件系统中指向另一个文件。常见的文件链接类型有两种：</p>\r\n<p><strong>1、硬链接（Hard Link）</strong></p>\r\n<ul>\r\n<li>在 Linux/类 Unix\r\n文件系统中，每个文件和目录都有一个唯一的索引节点（inode）号，用来标识该文件或目录。硬链接通过\r\ninode 节点号建立连接，硬链接和源文件的 inode\r\n节点号相同，两者对文件系统来说是完全平等的（可以看作是互为硬链接，源头是同一份文件），删除其中任何一个对另外一个没有影响，可以通过给文件设置硬链接文件来防止重要文件被误删。</li>\r\n<li>只有删除了源文件和所有对应的硬链接文件，该文件才会被真正删除。</li>\r\n<li>硬链接具有一些限制，不能对目录以及不存在的文件创建硬链接，并且，硬链接也不能跨越文件系统。</li>\r\n<li><code>ln</code> 命令用于创建硬链接。</li>\r\n</ul>\r\n<p><strong>2、软链接（Symbolic Link 或 Symlink）</strong></p>\r\n<ul>\r\n<li>软链接和源文件的 inode 节点号不同，而是指向一个文件路径。</li>\r\n<li>源文件删除后，软链接依然存在，但是指向的是一个无效的文件路径。</li>\r\n<li>软连接类似于 Windows 系统中的快捷方式。</li>\r\n<li>不同于硬链接，可以对目录或者不存在的文件创建软链接，并且，软链接可以跨越文件系统。</li>\r\n<li><code>ln -s</code> 命令用于创建软链接。</li>\r\n</ul>\r\n<p><strong>硬链接为什么不能跨文件系统？</strong></p>\r\n<p>我们之前提到过，硬链接是通过 inode\r\n节点号建立连接的，而硬链接和源文件共享相同的 inode 节点号。</p>\r\n<p>然而，每个文件系统都有自己的独立 inode 表，且每个 inode\r\n表只维护该文件系统内的\r\ninode。如果在不同的文件系统之间创建硬链接，可能会导致 inode\r\n节点号冲突的问题，即目标文件的 inode\r\n节点号已经在该文件系统中被使用。</p>\r\n<h3 id=\"linux-文件类型\"><a href=\"#linux-文件类型\">Linux\r\n文件类型</a></h3>\r\n<p>Linux 支持很多文件类型，其中非常重要的文件类型有:\r\n<strong>普通文件</strong>，<strong>目录文件</strong>，<strong>链接文件</strong>，<strong>设备文件</strong>，<strong>管道文件</strong>，<strong>Socket\r\n套接字文件</strong> 等。</p>\r\n<ul>\r\n<li><strong>普通文件（-）</strong>：用于存储信息和数据， Linux\r\n用户可以根据访问权限对普通文件进行查看、更改和删除。比如：图片、声音、PDF、text、视频、源代码等等。</li>\r\n<li><strong>目录文件（d，directory\r\nfile）</strong>：目录也是文件的一种，用于表示和管理系统中的文件，目录文件中包含一些文件名和子目录名。打开目录事实上就是打开目录文件。</li>\r\n<li><strong>符号链接文件（l，symbolic\r\nlink）</strong>：保留了指向文件的地址而不是文件本身。</li>\r\n<li><strong>字符设备（c，char）</strong>：用来访问字符设备比如键盘。</li>\r\n<li><strong>设备文件（b，block）</strong>：用来访问块设备比如硬盘、软盘。</li>\r\n<li><strong>管道文件(p，pipe)</strong> :\r\n一种特殊类型的文件，用于进程之间的通信。</li>\r\n<li><strong>套接字文件(s，socket)</strong>：用于进程间的网络通信，也可以用于本机之间的非网络通信。</li>\r\n</ul>\r\n<p>每种文件类型都有不同的用途和属性，可以通过命令如<code>ls</code>、<code>file</code>等来查看文件的类型信息。</p>\r\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通文件（-）</span></span><br><span class=\"line\">-rw-r--r--  1 user  group  1024 Apr 14 10:00 file.txt</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 目录文件（d，directory file）*</span></span><br><span class=\"line\">drwxr-xr-x  2 user  group  4096 Apr 14 10:00 directory/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 套接字文件(s，socket)</span></span><br><span class=\"line\">srwxrwxrwx  1 user  group    0 Apr 14 10:00 socket</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"linux目录树\">Linux目录树</h3>\r\n<p>Linux\r\n使用一种称为目录树的层次结构来组织文件和目录。目录树由根目录（/）作为起始点，向下延伸，形成一系列的目录和子目录。每个目录可以包含文件和其他子目录。结构层次鲜明，就像一棵倒立的树。</p>\r\n<figure>\r\n<img\r\nsrc=\"https://dlink.host/wx4.sinaimg.cn/large/006V2BDqly8htd953kl4fj30mv08rt9b.jpg\"\r\nalt=\"alt\" />\r\n<figcaption aria-hidden=\"true\">alt</figcaption>\r\n</figure>\r\n<p><strong>常见目录说明：</strong></p>\r\n<ul>\r\n<li><strong>/bin：</strong> 存放二进制可执行文件(ls、cat、mkdir\r\n等)，常用命令一般都在这里；</li>\r\n<li><strong>/etc：</strong> 存放系统管理和配置文件；</li>\r\n<li><strong>/home：</strong>\r\n存放所有用户文件的根目录，是用户主目录的基点，比如用户 user\r\n的主目录就是/home/user，可以用~user 表示；</li>\r\n<li><strong>/usr：</strong> 用于存放系统应用程序；</li>\r\n<li><strong>/opt：</strong>\r\n额外安装的可选应用程序包所放置的位置。一般情况下，我们可以把 tomcat\r\n等都安装到这里；</li>\r\n<li><strong>/proc：</strong>\r\n虚拟文件系统目录，是系统内存的映射。可直接访问这个目录来获取系统信息；</li>\r\n<li><strong>/root：</strong>\r\n超级用户（系统管理员）的主目录（特权阶级<sup>o</sup>）；</li>\r\n<li><strong>/sbin:</strong> 存放二进制可执行文件，只有 root\r\n才能访问。这里存放的是系统管理员使用的系统级别的管理命令和程序。如\r\nifconfig 等；</li>\r\n<li><strong>/dev：</strong> 用于存放设备文件；</li>\r\n<li><strong>/mnt：</strong>\r\n系统管理员安装临时文件系统的安装点，系统提供这个目录是让用户临时挂载其他的文件系统；</li>\r\n<li><strong>/boot：</strong> 存放用于系统引导时使用的各种文件；</li>\r\n<li><strong>/lib 和/lib64：</strong> 存放着和系统运行相关的库文件\r\n；</li>\r\n<li><strong>/tmp：</strong>\r\n用于存放各种临时文件，是公用的临时文件存储点；</li>\r\n<li><strong>/var：</strong>\r\n用于存放运行时需要改变数据的文件，也是某些大文件的溢出区，比方说各种服务的日志文件（系统启动日志等。）等；</li>\r\n<li><strong>/lost+found：</strong>\r\n这个目录平时是空的，系统非正常关机而留下“无家可归”的文件（windows\r\n下叫什么.chk）就在这里。</li>\r\n</ul>\r\n<h2 id=\"linux常用命令\">Linux常用命令</h2>\r\n<p>下面只是给出了一些比较常用的命令。</p>\r\n<p>推荐一个 Linux\r\n命令快查网站，非常不错，大家如果遗忘某些命令或者对某些命令不理解都可以在这里得到解决。Linux\r\n命令在线速查手册：<a\r\nhref=\"https://wangchujiang.com/linux-command/\">https://wangchujiang.com/linux-command/open\r\nin new window</a> 。</p>\r\n<p>另外，<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc2hlbGwuaG93Lw==\">shell.howopen in new\r\nwindow</span> 这个网站可以用来解释常见命令的意思，对你学习 Linux\r\n基本命令以及其他常用命令（如 Git、NPM）。</p>\r\n<h3 id=\"目录切换\">目录切换</h3>\r\n<ul>\r\n<li><code>cd usr</code>：切换到该目录下 usr 目录</li>\r\n<li><code>cd ..（或cd../）</code>：切换到上一层目录</li>\r\n<li><code>cd /</code>：切换到系统根目录</li>\r\n<li><code>cd ~</code>：切换到用户主目录</li>\r\n<li><code>cd -</code>： 切换到上一个操作所在目录</li>\r\n</ul>\r\n<h3 id=\"目录操作\">目录操作</h3>\r\n<ul>\r\n<li><p>`<code>ls</code>：显示目录中的文件和子目录的列表。例如：<code>ls /home</code>，显示<code>/home</code>目录下的文件和子目录列表。</p></li>\r\n<li><p><code>ll</code>：<code>ll</code> 是<code>ls -l</code>\r\n的别名，<code>ll</code>命令可以看到该目录下的所有目录和文件的详细信息</p></li>\r\n<li><p><code>mkdir [选项] 目录名</code>：创建新目录（增）。例如：<code>mkdir -m 755 my_directory</code>，创建一个名为\r\n<code>my_directory</code>的新目录，并将其权限设置为<code>755</code>，即所有用户对该目录有读、写和执行的权限。</p></li>\r\n<li><p><code>find [路径] [表达式]</code>：在指定目录及其子目录中搜索文件或目录（查），非常强大灵活。例如：①\r\n列出当前目录及子目录下所有文件和文件夹:<code>find</code>.；②\r\n在<code>/home</code>目录下查找以<code>.txt</code>结尾的文件名:<code>find /home -name \"*.txt\"</code>\r\n,忽略大小写:<code>find /home -i name \"*.txt\"</code>；③\r\n当前目录及子目录下查找所有以<code>.txt</code>和<code>.pdf</code>结尾的文件:<code>find . \\( -name \"*.txt\" -o -name \"*.pdf\" \\)</code>或<code>find . -name \"*.txt\" -o -name \"*.pdf\"</code>。</p></li>\r\n<li><p><code>pwd</code>：显示当前工作目录的路径。</p></li>\r\n<li><p><code>rmdir [选项] 目录名</code>：删除空目录（删）。例如：<code>rmdir -p my_directory</code>，删除名为\r\n<code>my_directory</code>的空目录，并且会递归删除<code>my_directory</code>的空父目录，直到遇到非空目录或根目录。</p></li>\r\n<li><p><code>rm [选项] 文件或目录名</code>：删除文件/目录（删）。例如：<code>rm -r my_directory</code>，删除名为\r\n<code>my_directory</code> 的目录，<code>-r</code>(recursive,递归)\r\n表示会递归删除指定目录及其所有子目录和文件。</p></li>\r\n<li><p><code>cp [选项] 源文件/目录 目标文件/目录</code>：复制文件或目录（移）。例如：<code>cp file.txt /home/file.txt</code>，将\r\n<code>file.txt</code>文件复制到<code>/home</code>目录下，并重命名为\r\n<code>file.txt</code>。<code>cp -r source destination</code>，将\r\n<code>source</code> 目录及其下的所有子目录和文件复制到\r\n<code>destination</code>目录下，并保留源文件的属性和目录结构。</p></li>\r\n<li><p><code>mv [选项] 源文件/目录 目标文件/目录</code>：移动文件或目录（移），也可以用于重命名文件或目录。例如：<code>mv file.txt /home/file.txt</code>，将\r\n<code>file.txt</code>\r\n文件移动到<code>/home</code>目录下，并重命名为<code>file.txt</code>。<code>mv</code>与\r\n<code>cp</code>的结果不同，<code>mv</code>\r\n好像文件“搬家”，文件个数并未增加。而\r\n<code>cp</code>对文件进行复制，文件个数增加了。</p></li>\r\n</ul>\r\n<h3 id=\"文件操作\">文件操作</h3>\r\n<p>像 <code>mv</code>、<code>cp</code>、<code>rm</code>\r\n等文件和目录都适用的命令，这里就不重复列举了。</p>\r\n<ul>\r\n<li><code>touch [选项] 文件名..</code>：创建新文件或更新已存在文件（增）。例如：<code>touch file1.txt file2.txt file3.txt</code>，创建\r\n3 个文件。</li>\r\n<li><code>ln [选项] &lt;源文件&gt; &lt;硬链接/软链接文件&gt;</code>：创建硬链接/软链接。例如：<code>ln -s file.txt file_link</code>，创建名为<code>file_link</code>\r\n的软链接，指向 <code>file.txt</code> 文件。<code>-s</code>\r\n选项代表的就是创建软链接，<code>s</code>即<code>symbolic</code>（软链接又名符号链接）\r\n。</li>\r\n<li><code>cat/more/less/tail 文件名</code>：文件的查看（查）\r\n。命令<code>tail -f</code>文件 可以对某个文件进行动态监控，例如 Tomcat\r\n的日志文件，\r\n会随着程序的运行，日志会变化，可以使用<code>tail -f catalina-2016-11-11.log</code>监控文件的变化\r\n。</li>\r\n<li><code>vim 文件名</code>：修改文件的内容（改）。<code>vim</code>\r\n编辑器是<code>Linux</code> 中的强大组件，是 <code>vi</code>\r\n编辑器的加强版，<code>vim</code>\r\n编辑器的命令和快捷方式有很多，但此处不一一阐述，大家也无需研究的很透彻，使用<code>vim</code>编辑修改文件的方式基本会使用就可以了。在实际开发中，使用<code>vim</code>编辑器主要作用就是修改配置文件，下面是一般步骤：<code>vim 文件------&gt;进入文件-----&gt;命令模式------&gt;按i进入编辑模式-----&gt;编辑文件 -------&gt;按Esc进入底行模式-----&gt;输入：wq/q! （</code>输入\r\nwq 代表写入内容并退出，即保存；输入 q!代表强制退出不保存）。</li>\r\n</ul>\r\n<h3 id=\"文件压缩\">文件压缩</h3>\r\n<h4 id=\"打包并压缩文件\">1）打包并压缩文件：</h4>\r\n<p>Linux\r\n中的打包文件一般是以<code>.tar</code>结尾的，压缩的命令一般是以<code>.gz</code>\r\n结尾的。而一般情况下打包和压缩是一起进行的，打包并压缩后的文件的后缀名一般\r\n<code>.tar.gz</code>。</p>\r\n<p>命令：<code>tar -zcvf</code>打包压缩后的文件名 要打包压缩的文件\r\n，其中：</p>\r\n<ul>\r\n<li><p>z：调用 gzip 压缩命令进行压缩</p></li>\r\n<li><p>c：打包文件</p></li>\r\n<li><p>v：显示运行过程</p></li>\r\n<li><p>f：指定文件名</p></li>\r\n</ul>\r\n<p>比如：假如 test\r\n目录下有三个文件分别是：<code>aaa.txt</code>、<code>bbb.txt</code>、<code>ccc.txt</code>，如果我们要打包<code>test</code>目录并指定压缩后的压缩包名称为<code>test.tar.gz</code>可以使用命令：<code>tar -zcvf test.tar.gz aaa.txt bbb.txt ccc.txt</code>或\r\n<code>tar -zcvf test.tar.gz /test/</code> 。</p>\r\n<h4 id=\"解压压缩包\">2）解压压缩包：</h4>\r\n<p>命令：<code>tar [-xvf] 压缩文件</code></p>\r\n<p>其中 x 代表解压</p>\r\n<p>示例：</p>\r\n<ul>\r\n<li><p>将 /test 下的 <code>test.tar.gz</code>\r\n解压到当前目录下可以使用命令：<code>tar -xvf test.tar.gz</code></p></li>\r\n<li><p>将 /test 下的<code>test.tar.gz</code>解压到根目录/usr\r\n下:<code>tar -xvf test.tar.gz -C /usr</code>（-C\r\n代表指定解压的位置）</p></li>\r\n</ul>\r\n<h3 id=\"文件传输\">文件传输</h3>\r\n<ul>\r\n<li><code>scp [选项] 源文件 远程文件</code>（scp 即 secure\r\ncopy，安全复制）：用于通过 SSH\r\n协议进行安全的文件传输，可以实现从本地到远程主机的上传和从远程主机到本地的下载。例如：<code>scp -r my_directoryuser@remote:/home/user</code>\r\n，将本地目录<code>my_directory</code>上传到远程服务器\r\n<code>/home/user</code>目录下。<code>scp -r user@remote:/home/user/my_directory</code>，将远程服务器的<code>/home/user</code>目录下的<code>my_directory</code>目录下载到本地。需要注意的是，<code>scp</code>\r\n命令需要在本地和远程系统之间建立 SSH\r\n连接进行文件传输，因此需要确保远程服务器已经配置了 SSH\r\n服务，并且具有正确的权限和认证方式。</li>\r\n<li><code>rsync [选项] 源文件 远程文件</code> :\r\n可以在本地和远程系统之间高效地进行文件复制，并且能够智能地处理增量复制，节省带宽和时间。例如：<code>rsync -r my_directory user@remote:/home/user</code>，将本地目录<code>my_directory</code>上传到远程服务器<code>/home/user</code>目录下。</li>\r\n<li><code>ftp</code>(File Transfer\r\nProtocol)：提供了一种简单的方式来连接到远程 FTP\r\n服务器并进行文件上传、下载、删除等操作。使用之前需要先连接登录远程 FTP\r\n服务器，进入 FTP 命令行界面后，可以使用<code>put</code>\r\n命令将本地文件上传到远程主机，可以使用<code>get</code>命令将远程主机的文件下载到本地，可以使用<code>delete</code>\r\n命令删除远程主机的文件。这里就不进行演示了。</li>\r\n</ul>\r\n<h3 id=\"文件权限\">文件权限</h3>\r\n<p>操作系统中每个文件都拥有特定的权限、所属用户和所属组。权限是操作系统用来限制资源访问的机制，在\r\nLinux\r\n中权限一般分为读(readable)、写(writable)和执行(executable)，分为三组。分别对应文件的属主(owner)，属组(group)和其他用户(other)，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。</p>\r\n<p>通过<code>ls -l</code>命令我们可以\r\n查看某个目录下的文件或目录的权限</p>\r\n<p>示例：在随意某个目录下<code>ls -l</code></p>\r\n<p><img\r\nsrc=\"https://dlink.host/wx1.sinaimg.cn/large/006V2BDqly8htd9kj4jqcj30gd06cjsj.jpg\" /></p>\r\n<p><img\r\nsrc=\"https://dlink.host/wx1.sinaimg.cn/large/006V2BDqly8htd9kjwbjxj30dl05tweo.jpg\" /></p>\r\n<p>下面将详细讲解文件的类型、Linux\r\n中权限以及文件有所有者、所在组、其它组具体是什么？</p>\r\n<p><strong>文件的类型：</strong></p>\r\n<ul>\r\n<li><p>d：代表目录</p></li>\r\n<li><p>-：代表文件</p></li>\r\n<li><p>l：代表软链接（可以认为是 window 中的快捷方式）</p></li>\r\n</ul>\r\n<p><strong>Linux 中权限分为以下几种：</strong></p>\r\n<ul>\r\n<li><p>r：代表权限是可读，r 也可以用数字 4 表示</p></li>\r\n<li><p>w：代表权限是可写，w 也可以用数字 2 表示</p></li>\r\n<li><p>x：代表权限是可执行，x 也可以用数字 1 表示</p></li>\r\n</ul>\r\n<p><strong>文件和目录权限的区别：</strong></p>\r\n<p>对文件和目录而言，读写执行表示不同的意义。</p>\r\n<p>对于文件：</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">权限名称</th>\r\n<th style=\"text-align: right;\">可执行操作</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\">r</td>\r\n<td style=\"text-align: right;\">可以使用 cat 查看文件的内容</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">w</td>\r\n<td style=\"text-align: right;\">可以修改文件的内容</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">x</td>\r\n<td style=\"text-align: right;\">可以将其运行为二进制文件</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>对于目录：</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">权限名称</th>\r\n<th style=\"text-align: right;\">可执行操作</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\">r</td>\r\n<td style=\"text-align: right;\">可以查看目录下列表</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">w</td>\r\n<td style=\"text-align: right;\">可以创建和删除目录下文件</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">x</td>\r\n<td style=\"text-align: right;\">可以使用 cd 进入目录</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>需要注意的是：<strong>超级用户可以无视普通用户的权限，即使文件目录权限是\r\n000，依旧可以访问。</strong></p>\r\n<p><strong>在 linux 中的每个用户必须属于一个组，不能独立于组外。在 linux\r\n中每个文件有所有者、所在组、其它组的概念。</strong></p>\r\n<ul>\r\n<li>所有者(u)：一般为文件的创建者，谁创建了该文件，就天然的成为该文件的所有者，用\r\nls ‐ahl 命令可以看到文件的所有者 也可以使用 chown 用户名\r\n文件名来修改文件的所有者 。</li>\r\n<li>文件所在组(g)：当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组用\r\nls ‐ahl命令可以看到文件的所有组也可以使用 chgrp 组名\r\n文件名来修改文件所在的组。</li>\r\n<li>其它组(o)：除开文件的所有者和所在组的用户外，系统的其它用户都是文件的其它组。</li>\r\n</ul>\r\n<p>我们再来看看如何修改文件/目录的权限。</p>\r\n<p><strong>修改文件/目录的权限的命令：<code>chmod</code></strong></p>\r\n<p>示例：修改<code>/test</code>下的 <code>aaa.txt</code>\r\n的权限为文件所有者有全部权限，文件所有者所在的组有读写权限，其他用户只有读的权限。</p>\r\n<p><code>chmod u=rwx,g=rw,o=r aaa.txt</code>或者\r\n<code>chmod 764 aaa.txt</code></p>\r\n<p><strong>补充一个比较常用的东西:</strong></p>\r\n<p>假如我们装了一个\r\nzookeeper，我们每次开机到要求其自动启动该怎么办？</p>\r\n<ol type=\"1\">\r\n<li><p>新建一个脚本 zookeeper</p></li>\r\n<li><p>为新建的脚本 zookeeper 添加可执行权限，命令是:chmod +x\r\nzookeeper</p></li>\r\n<li><p>把 zookeeper 这个脚本添加到开机启动项里面，命令是：chkconfig\r\n--add zookeeper</p></li>\r\n<li><p>如果想看看是否添加成功，命令是：chkconfig --list</p></li>\r\n</ol>\r\n<h3 id=\"用户管理\">用户管理</h3>\r\n<p>Linux\r\n系统是一个多用户多任务的分时操作系统，任何一个要使用系统资源的用户，都必须首先向系统管理员申请一个账号，然后以这个账号的身份进入系统。</p>\r\n<p>用户的账号一方面可以帮助系统管理员对使用系统的用户进行跟踪，并控制他们对系统资源的访问；另一方面也可以帮助用户组织文件，并为用户提供安全性保护。</p>\r\n<p><strong>Linux 用户管理相关命令:</strong></p>\r\n<ul>\r\n<li><code>useradd [选项] 用户名</code>:创建用户账号。使用<code>useradd</code>指令所建立的帐号，实际上是保存在\r\n<code>/etc/passwd</code>文本文件中。</li>\r\n<li><code>userdel [选项] 用户名</code>:删除用户帐号。</li>\r\n<li><code>usermod [选项] 用户名</code>:修改用户账号的属性和配置比如用户名、用户\r\nID、家目录。</li>\r\n<li><code>passwd [选项] 用户名</code>:\r\n设置用户的认证信息，包括用户密码、密码过期时间等。。例如：<code>passwd -S 用户名</code>\r\n，显示用户账号密码信息。<code>passwd -d 用户名</code>:\r\n清除用户密码，会导致用户无法登录。<code>passwd 用户名</code>，修改用户密码，随后系统会提示输入新密码并确认密码。</li>\r\n<li><code>su [选项] 用户名</code>（su 即 Switch\r\nUser，切换用户）：在当前登录的用户和其他用户之间切换身份。</li>\r\n</ul>\r\n<h3 id=\"用户组管理\">用户组管理</h3>\r\n<p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同\r\nLinux 系统对用户组的规定有所不同，如 Linux\r\n下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。</p>\r\n<p>用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对<code>/etc/group</code>文件的更新。</p>\r\n<p><strong>Linux 系统用户组的管理相关命令:</strong></p>\r\n<ul>\r\n<li>groupadd [选项] 用户组 :增加一个新的用户组。</li>\r\n<li>groupdel 用户组:要删除一个已有的用户组。</li>\r\n<li>groupmod [选项] 用户组 : 修改用户组的属性。</li>\r\n</ul>\r\n<h3 id=\"系统状态\">系统状态</h3>\r\n<ul>\r\n<li><code>top [选项]</code>：用于实时查看系统的 CPU\r\n使用率、内存使用率、进程信息等。</li>\r\n<li><code>htop [选项]</code>：类似于<code>top</code>，但提供了更加交互式和友好的界面，可让用户交互式操作，支持颜色主题，可横向或纵向滚动浏览进程列表，并支持鼠标操作。</li>\r\n<li><code>uptime [选项]</code>：用于查看系统总共运行了多长时间、系统的平均负载等信息。</li>\r\n<li><code>vmstat [间隔时间] [重复次数]</code>：vmstat （Virtual Memory\r\nStatistics） 的含义为显示虚拟内存状态，但是它可以报告关于进程、内存、I/O\r\n等系统整体运行状态。</li>\r\n<li><code>free [选项]</code>：用于查看系统的内存使用情况，包括已用内存、可用内存、缓冲区和缓存等。</li>\r\n<li><code>df [选项] [文件系统]</code>：用于查看系统的磁盘空间使用情况，包括磁盘空间的总量、已使用量和可用量等，可以指定文件系统上。例如：<code>df -a</code>，查看全部文件系统。</li>\r\n<li><code>du [选项] [文件]</code>：用于查看指定目录或文件的磁盘空间使用情况，可以指定不同的选项来控制输出格式和单位。</li>\r\n<li><code>sar [选项] [时间间隔] [重复次数]</code>：用于收集、报告和分析系统的性能统计信息，包括系统的\r\nCPU 使用、内存使用、磁盘\r\nI/O、网络活动等详细信息。它的特点是可以连续对系统取样，获得大量的取样数据。取样数据和分析的结果都可以存入文件，使用它时消耗的系统资源很小。</li>\r\n<li><code>ps [选项]</code>：用于查看系统中的进程信息，包括进程的\r\nID、状态、资源使用情况等。<code>ps -ef</code>/<code>ps -aux</code>：这两个命令都是查看当前系统正在运行进程，两者的区别是展示格式不同。如果想要查看特定的进程可以使用这样的格式：<code>ps aux|grep redis</code>（查看包括\r\nredis 字符串的进程），也可使用 <code>pgrep redis -a</code>。</li>\r\n<li><code>systemctl [命令] [服务名称]</code>：用于管理系统的服务和单元，可以查看系统服务的状态、启动、停止、重启等。</li>\r\n</ul>\r\n<h3 id=\"网络通信\">网络通信</h3>\r\n<ul>\r\n<li><code>ping [选项] 目标主机</code>：测试与目标主机的网络连接。</li>\r\n<li><code>ifconfig</code>或\r\n<code>ip</code>：用于查看系统的网络接口信息，包括网络接口的 IP 地址、MAC\r\n地址、状态等。</li>\r\n<li><code>netstat [选项]</code>：用于查看系统的网络连接状态和网络统计信息，可以查看当前的网络连接情况、监听端口、网络协议等。</li>\r\n<li><code>ss [选项]</code>：比 netstat\r\n更好用，提供了更快速、更详细的网络连接信息。</li>\r\n</ul>\r\n<h3 id=\"其他\">其他</h3>\r\n<ul>\r\n<li><code>sudo + 其他命令</code>：以系统管理者的身份执行指令，也就是说，经由\r\nsudo 所执行的指令就好像是 root 亲自执行。</li>\r\n<li><code>grep 要搜索的字符串 要搜索的文件 --color</code>：搜索命令，<code>--color</code>代表高亮显示。</li>\r\n<li><code>kill -9 进程的pid</code>：杀死进程（-9 表示强制终止）先用 ps\r\n查找进程，然后用 kill 杀掉。</li>\r\n<li><code>shutdown</code>：<code>shutdown -h now</code>：指定现在立即关机；<code>shutdown +5 \"System will shutdown after 5 minutes\"</code>：指定\r\n5 分钟后关机，同时送出警告信息给登入用户。</li>\r\n<li><code>reboot</code>：<code>reboot</code>：重开机。<code>reboot -w</code>：做个重开机的模拟（只有纪录并不会真的重开机）。</li>\r\n</ul>\r\n<h2 id=\"linux-环境变量\">Linux 环境变量</h2>\r\n<p>在 Linux\r\n系统中，环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的主目录（HOME）。</p>\r\n<h4 id=\"环境变量分类\">环境变量分类</h4>\r\n<p>按照作用域来分，环境变量可以简单的分成:</p>\r\n<ul>\r\n<li><p>用户级别环境变量 :\r\n<code>~/.bashrc</code>、<code>~/.bash_profile</code>。</p></li>\r\n<li><p>系统级别环境变量\r\n:<code>/etc/bashrc</code>、<code>/etc/environment</code>、<code>/etc/profile</code>、<code>/etc/profile.d</code>。</p></li>\r\n</ul>\r\n<p>上述配置文件执行先后顺序为：<code>/etc/environment</code>–&gt;\r\n<code>/etc/profile</code>–&gt;<code>/etc/profile.d</code>–&gt;\r\n<code>~/.bash_profile</code> –&gt; <code>/etc/bashrc</code>–&gt;\r\n<code>~/.bashrc</code></p>\r\n<p>如果要修改系统级别环境变量文件，需要管理员具备对该文件的写入权限。</p>\r\n<p>建议用户级别环境变量在\r\n<code>~/.bash_profile</code>中配置，系统级别环境变量在<code>/etc/profile.d</code>\r\n中配置。</p>\r\n<p>按照生命周期来分，环境变量可以简单的分成:</p>\r\n<ul>\r\n<li><p>永久的：需要用户修改相关的配置文件，变量永久生效。</p></li>\r\n<li><p>临时的：用户利用 export 命令，在当前终端下声明环境变量，关闭\r\nshell 终端失效。</p></li>\r\n</ul>\r\n<h3 id=\"读取环境变量\">读取环境变量</h3>\r\n<p>通过<code>export</code> 命令可以输出当前系统定义的所有环境变量。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出当前的环境变量值</span><br><span class=\"line\"></span><br><span class=\"line\">export -p</span><br></pre></td></tr></table></figure>\r\n<p>除了 <code>export</code> 命令之外，\r\n<code>env</code>命令也可以列出所有环境变量。</p>\r\n<p><code>echo</code> 命令可以输出指定环境变量的值。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输出当前的PATH环境变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">echo $PATH</span><br><span class=\"line\"></span><br><span class=\"line\"># 输出当前的HOME环境变量的值</span><br><span class=\"line\"></span><br><span class=\"line\">echo $HOME</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"环境变量修改\">环境变量修改</h3>\r\n<p>通过<code>export</code>命令可以修改指定的环境变量。不过，这种方式修改环境变量仅仅对当前\r\nshell 终端生效，关闭 shell 终端就会失效。修改完成之后，立即生效。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CLASSPATH=./JAVA_HOME/lib;$JAVA_HOME/jre/lib</span><br></pre></td></tr></table></figure>\r\n<p>通过\r\n<code>vim</code>命令修改环境变量配置文件。这种方式修改环境变量永久有效。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim ~/.bash_profile</span><br></pre></td></tr></table></figure>\r\n<p>如果修改的是系统级别环境变量则对所有用户生效，如果修改的是用户级别环境变量则仅对当前用户生效。</p>\r\n<p>修改完成之后，需要 <code>source</code> 命令让其生效或者关闭 shell\r\n终端重新登录。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "linux",
                "linux"
            ]
        },
        {
            "id": "http://example.com/2024/09/05/post/sql/redis/04-Redis%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/",
            "url": "http://example.com/2024/09/05/post/sql/redis/04-Redis%E9%97%AE%E9%A2%98%E5%B0%8F%E8%AE%B0/",
            "title": "Redis问题小记",
            "date_published": "2024-09-05T11:54:51.990Z",
            "content_html": "<h1 id=\"redis问题小记\">Redis问题小记</h1>\r\n<h2 id=\"redis为什么这么快\">1、Redis为什么这么快？</h2>\r\n<p>Redis内部做了非常多的性能优化，比较重要的有下面3点：</p>\r\n<p>1.Redis基于内存，内存的访问速度比磁盘快很多；</p>\r\n<p>2.Redis基于Reactor模式设计开发了一套高效的事件处理模型，主要是单线程事件循环和IO多路复用；</p>\r\n<p>3.Redis内置了多种优化过后的数据类型/结构实现，性能非常高</p>\r\n<p>4.Redis通信协议实现简单且解析高效。</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8htd3bxd9m4j31b00u0ae5.jpg\" /></p>\r\n<p>那既然都这么快了，为什么不直接用Redis当主数据库呢？主要是因为内存成本太高了且Redis提供的数据持久化仍然有数据丢失的风险。</p>\r\n<h2 id=\"redis应用\">Redis应用</h2>\r\n<p>redis出了做缓存，还能做什么？</p>\r\n<ul>\r\n<li><strong>分布式锁</strong>：通过 Redis\r\n来做分布式锁是一种比较常见的方式。通常情况下，我们都是基于 Redisson\r\n来实现分布式锁。</li>\r\n<li><strong>限流</strong>：一般是通过 Redis + Lua\r\n脚本的方式来实现限流。如果不想自己写 Lua 脚本的话，也可以直接利用\r\nRedisson 中的 <code>RRateLimiter</code>\r\n来实现分布式限流，其底层实现就是基于 Lua 代码+令牌桶算法。</li>\r\n<li><strong>消息队列</strong>：Redis 自带的 List\r\n数据结构可以作为一个简单的队列使用。Redis 5.0 中增加的 Stream\r\n类型的数据结构更加适合用来做消息队列。它比较类似于\r\nKafka，有主题和消费组的概念，支持消息持久化以及 ACK 机制。</li>\r\n<li><strong>延时队列</strong>：Redisson 内置了延时队列（基于 Sorted Set\r\n实现的）。</li>\r\n<li><strong>分布式 Session</strong> ：利用 String 或者 Hash 数据类型保存\r\nSession 数据，所有的服务器都可以访问。</li>\r\n<li><strong>复杂业务场景</strong>：通过 Redis 以及 Redis 扩展（比如\r\nRedisson）提供的数据结构，我们可以很方便地完成很多复杂的业务场景比如通过\r\nBitmap 统计活跃用户、通过 Sorted Set 维护排行榜。</li>\r\n<li>……</li>\r\n</ul>\r\n<h2 id=\"redis-事务\">Redis 事务</h2>\r\n<h3 id=\"什么是-redis-事务\">什么是 Redis 事务？</h3>\r\n<p>你可以将 Redis 中的事务理解为：Redis\r\n事务提供了一种将多个命令请求打包的功能。然后，再按顺序执行打包的所有命令，并且不会被中途打断。</p>\r\n<p>Redis\r\n事务实际开发中使用的非常少，功能比较鸡肋，不要将其和我们平时理解的关系型数据库的事务混淆了。</p>\r\n<p>除了不满足原子性和持久性之外，事务中的每条命令都会与 Redis\r\n服务器进行网络交互，这是比较浪费资源的行为。明明一次批量执行多个命令就可以了，这种操作实在是看不懂。</p>\r\n<p>因此，Redis 事务是不建议在日常开发中使用的。</p>\r\n<h3 id=\"如何使用-redis-事务\">如何使用 Redis 事务？</h3>\r\n<p>Redis 可以通过 MULTI，EXEC，DISCARD 和 WATCH\r\n等命令来实现事务(Transaction)功能。</p>\r\n<blockquote>\r\n<p>MULTI OK SET PROJECT \"JavaGuide\" QUEUED GET PROJECT QUEUED EXEC 1) OK\r\n2) \"JavaGuide\" MULTIopen in new window 命令后可以输入多个命令，Redis\r\n不会立即执行这些命令，而是将它们放到队列，当调用了 EXECopen in new\r\nwindow 命令后，再执行所有的命令。</p>\r\n</blockquote>\r\n<p>这个过程是这样的：</p>\r\n<p>开始事务（MULTI）； 命令入队(批量操作 Redis\r\n的命令，先进先出（FIFO）的顺序执行)； 执行事务(EXEC)。 你也可以通过\r\nDISCARDopen in new window\r\n命令取消一个事务，它会清空事务队列中保存的所有命令。</p>\r\n<blockquote>\r\n<p>MULTI OK SET PROJECT \"JavaGuide\" QUEUED GET PROJECT QUEUED DISCARD OK\r\n你可以通过WATCHopen in new window 命令监听指定的 Key，当调用 EXEC\r\n命令执行事务时，如果一个被 WATCH 命令监视的 Key 被 其他客户端/Session\r\n修改的话，整个事务都不会被执行。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 客户端 1</span><br><span class=\"line\">SET PROJECT &quot;RustGuide&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">WATCH PROJECT</span><br><span class=\"line\">OK</span><br><span class=\"line\">MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\">SET PROJECT &quot;JavaGuide&quot;</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端 2</span><br><span class=\"line\"># 在客户端 1 执行 EXEC 命令提交事务之前修改 PROJECT 的值</span><br><span class=\"line\">SET PROJECT &quot;GoGuide&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 客户端 1</span><br><span class=\"line\"># 修改失败，因为 PROJECT 的值被客户端2修改了</span><br><span class=\"line\">EXEC</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">GET PROJECT</span><br><span class=\"line\">&quot;GoGuide&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>不过，如果 WATCH 与 事务 在同一个 Session 里，并且被 WATCH 监视的 Key\r\n被修改的操作发生在事务内部，这个事务是可以被执行成功的（相关\r\nissue：WATCH 命令碰到 MULTI 命令时的不同效果open in new window）。</p>\r\n</blockquote>\r\n<p>事务内部修改 WATCH 监视的 Key：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; SET PROJECT &quot;JavaGuide&quot;</span><br><span class=\"line\">&gt; OK</span><br><span class=\"line\">&gt; WATCH PROJECT</span><br><span class=\"line\">&gt; OK</span><br><span class=\"line\">&gt; MULTI</span><br><span class=\"line\">&gt; OK</span><br><span class=\"line\">&gt; SET PROJECT &quot;JavaGuide1&quot;</span><br><span class=\"line\">&gt; QUEUED</span><br><span class=\"line\">&gt; SET PROJECT &quot;JavaGuide2&quot;</span><br><span class=\"line\">&gt; QUEUED</span><br><span class=\"line\">&gt; SET PROJECT &quot;JavaGuide3&quot;</span><br><span class=\"line\">&gt; QUEUED</span><br><span class=\"line\">&gt; EXEC</span><br><span class=\"line\"></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">   127.0.0.1:6379&gt; GET PROJECT</span><br><span class=\"line\">   &quot;JavaGuide3&quot;</span><br></pre></td></tr></table></figure>\r\n<p>事务外部修改 WATCH 监视的 Key：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PROJECT &quot;JavaGuide&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">WATCH PROJECT</span><br><span class=\"line\">OK</span><br><span class=\"line\">SET PROJECT &quot;JavaGuide2&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">MULTI</span><br><span class=\"line\">OK</span><br><span class=\"line\">GET USER</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">EXEC</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "数据库",
                "redis"
            ]
        },
        {
            "id": "http://example.com/2024/09/05/post/sql/redis/03-Redis%E5%91%BD%E4%BB%A4/",
            "url": "http://example.com/2024/09/05/post/sql/redis/03-Redis%E5%91%BD%E4%BB%A4/",
            "title": "Redis命令",
            "date_published": "2024-09-05T11:31:32.602Z",
            "content_html": "<h1 id=\"redis命令\">Redis命令</h1>\r\n<h2 id=\"redis数据备份与恢复\">Redis数据备份与恢复</h2>\r\n<p>Redis SAVE 命令用于创建当前数据库的备份</p>\r\n<h3 id=\"语法\">语法</h3>\r\n<p>redis save 命令基本语法如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; SAVE </span><br></pre></td></tr></table></figure>\r\n<p>该命令将在redis安装目录下中创建dump.rdb文件</p>\r\n<h3 id=\"恢复数据\">恢复数据</h3>\r\n<p>如果需要恢复数据，只需将备份文件 (dump.rdb) 移动到 redis\r\n安装目录并启动服务即可。获取 redis 目录可以使用 <strong>CONFIG</strong>\r\n命令，如下所示：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis 127.0.0.1:6379&gt; CONFIG GET dir</span><br><span class=\"line\">1) &quot;dir&quot;</span><br><span class=\"line\">2) &quot;/usr/local/redis/bin&quot;</span><br></pre></td></tr></table></figure>\r\n<p>以上命令 <strong>CONFIG GET dir</strong> 输出的 redis 安装目录为\r\n/usr/local/redis/bin。</p>\r\n<hr />\r\n<h3 id=\"bgsave\">Bgsave</h3>\r\n<p>创建 redis 备份文件也可以使用命令\r\n<strong>BGSAVE</strong>，该命令在后台执行。</p>\r\n<h4 id=\"实例\">实例</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; BGSAVE</span><br><span class=\"line\"></span><br><span class=\"line\">Background saving started</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"redis安全\">Redis安全</h2>\r\n<p>我们可以通过redis的配置文件设置密码参数，这样客户端连接到redis服务就需要密码验证，这样可以让我们的redis服务更安全。</p>\r\n<h4 id=\"实例-1\">实例</h4>\r\n<p>我们可以通过以下命令查看是否设置了密码验证：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;&quot;</span><br></pre></td></tr></table></figure>\r\n<p>默认情况下 requirepass\r\n参数是空的，这就意味着你无需通过密码验证就可以连接到 redis 服务。</p>\r\n<p>你可以通过以下命令来修改该参数：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; CONFIG set requirepass &quot;runoob&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; CONFIG get requirepass</span><br><span class=\"line\">1) &quot;requirepass&quot;</span><br><span class=\"line\">2) &quot;runoob&quot;</span><br></pre></td></tr></table></figure>\r\n<p>设置密码后，客户端连接 redis\r\n服务就需要密码验证，否则无法执行命令。</p>\r\n<h4 id=\"语法-1\">语法</h4>\r\n<p><strong>AUTH</strong> 命令基本语法格式如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH password</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"实例-2\">实例</h4>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; AUTH &quot;runoob&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; SET mykey &quot;Test value&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GET mykey</span><br><span class=\"line\">&quot;Test value&quot;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"redis性能测试\">Redis性能测试</h2>\r\n<p>Redis 性能测试是通过同时执行多个命令实现的。</p>\r\n<h3 id=\"语法-2\">语法</h3>\r\n<p>redis 性能测试的基本命令如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-benchmark [option] [option value]</span><br></pre></td></tr></table></figure>\r\n<p><strong>注意</strong>：该命令是在 redis 的目录下执行的，而不是 redis\r\n客户端的内部指令。</p>\r\n<p>实例</p>\r\n<p>以下实例同时执行 10000 个请求来检测性能：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-benchmark -n 10000  -q</span><br><span class=\"line\"></span><br><span class=\"line\">PING_INLINE: 141043.72 requests per second</span><br><span class=\"line\">PING_BULK: 142857.14 requests per second</span><br><span class=\"line\">SET: 141442.72 requests per second</span><br><span class=\"line\">GET: 145348.83 requests per second</span><br><span class=\"line\">INCR: 137362.64 requests per second</span><br><span class=\"line\">LPUSH: 145348.83 requests per second</span><br><span class=\"line\">LPOP: 146198.83 requests per second</span><br><span class=\"line\">SADD: 146198.83 requests per second</span><br><span class=\"line\">SPOP: 149253.73 requests per second</span><br><span class=\"line\">LPUSH (needed to benchmark LRANGE): 148588.42 requests per second</span><br><span class=\"line\">LRANGE_100 (first 100 elements): 58411.21 requests per second</span><br><span class=\"line\">LRANGE_300 (first 300 elements): 21195.42 requests per second</span><br><span class=\"line\">LRANGE_500 (first 450 elements): 14539.11 requests per second</span><br><span class=\"line\">LRANGE_600 (first 600 elements): 10504.20 requests per second</span><br><span class=\"line\">MSET (10 keys): 93283.58 requests per second</span><br></pre></td></tr></table></figure>\r\n<p>redis 性能测试工具可选参数如下所示：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 5%\" />\r\n<col style=\"width: 31%\" />\r\n<col style=\"width: 52%\" />\r\n<col style=\"width: 11%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">序号</th>\r\n<th style=\"text-align: left;\">选项</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n<th style=\"text-align: left;\">默认值</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\">1</td>\r\n<td style=\"text-align: left;\"><strong>-h</strong></td>\r\n<td style=\"text-align: left;\">指定服务器主机名</td>\r\n<td style=\"text-align: left;\">127.0.0.1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">2</td>\r\n<td style=\"text-align: left;\"><strong>-p</strong></td>\r\n<td style=\"text-align: left;\">指定服务器端口</td>\r\n<td style=\"text-align: left;\">6379</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">3</td>\r\n<td style=\"text-align: left;\"><strong>-s</strong></td>\r\n<td style=\"text-align: left;\">指定服务器 socket</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">4</td>\r\n<td style=\"text-align: left;\"><strong>-c</strong></td>\r\n<td style=\"text-align: left;\">指定并发连接数</td>\r\n<td style=\"text-align: left;\">50</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">5</td>\r\n<td style=\"text-align: left;\"><strong>-n</strong></td>\r\n<td style=\"text-align: left;\">指定请求数</td>\r\n<td style=\"text-align: left;\">10000</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">6</td>\r\n<td style=\"text-align: left;\"><strong>-d</strong></td>\r\n<td style=\"text-align: left;\">以字节的形式指定 SET/GET 值的数据大小</td>\r\n<td style=\"text-align: left;\">2</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">7</td>\r\n<td style=\"text-align: left;\"><strong>-k</strong></td>\r\n<td style=\"text-align: left;\">1=keep alive 0=reconnect</td>\r\n<td style=\"text-align: left;\">1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">8</td>\r\n<td style=\"text-align: left;\"><strong>-r</strong></td>\r\n<td style=\"text-align: left;\">SET/GET/INCR 使用随机 key, SADD\r\n使用随机值</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">9</td>\r\n<td style=\"text-align: left;\"><strong>-P</strong></td>\r\n<td style=\"text-align: left;\">通过管道传输 <numreq> 请求</td>\r\n<td style=\"text-align: left;\">1</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">10</td>\r\n<td style=\"text-align: left;\"><strong>-q</strong></td>\r\n<td style=\"text-align: left;\">强制退出 redis。仅显示 query/sec 值</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">11</td>\r\n<td style=\"text-align: left;\"><strong>--csv</strong></td>\r\n<td style=\"text-align: left;\">以 CSV 格式输出</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">12</td>\r\n<td style=\"text-align: left;\">*<strong>-l*（L 的小写字母）</strong></td>\r\n<td style=\"text-align: left;\">生成循环，永久执行测试</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">13</td>\r\n<td style=\"text-align: left;\"><strong>-t</strong></td>\r\n<td style=\"text-align: left;\">仅运行以逗号分隔的测试命令列表。</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">14</td>\r\n<td style=\"text-align: left;\">*<strong>-I*（i 的大写字母）</strong></td>\r\n<td style=\"text-align: left;\">Idle 模式。仅打开 N 个 idle\r\n连接并等待。</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"实例-3\">实例</h4>\r\n<p>以下实例我们使用了多个参数来测试 redis 性能：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ redis-benchmark -h 127.0.0.1 -p 6379 -t set,lpush -n 10000 -q</span><br><span class=\"line\"></span><br><span class=\"line\">SET: 146198.83 requests per second</span><br><span class=\"line\">LPUSH: 145560.41 requests per second</span><br></pre></td></tr></table></figure>\r\n<p>以上实例中主机为 127.0.0.1，端口号为 6379，执行的命令为\r\nset,lpush，请求数为 10000，通过 -q\r\n参数让结果只显示每秒执行的请求数。</p>\r\n<h2 id=\"redis-客户端连接\">Redis 客户端连接</h2>\r\n<p>Redis 通过监听一个 TCP 端口或者 Unix socket\r\n的方式来接收来自客户端的连接，当一个连接建立后，Redis\r\n内部会进行以下一些操作：</p>\r\n<ul>\r\n<li>首先，客户端 socket 会被设置为非阻塞模式，因为 Redis\r\n在网络事件处理上采用的是非阻塞多路复用模型。</li>\r\n<li>然后为这个 socket 设置 TCP_NODELAY 属性，禁用 Nagle 算法</li>\r\n<li>然后创建一个可读的文件事件用于监听这个客户端 socket 的数据发送</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"最大连接数\">最大连接数</h3>\r\n<p>在 Redis2.4\r\n中，最大连接数是被直接硬编码在代码里面的，而在2.6版本中这个值变成可配置的。</p>\r\n<p>maxclients 的默认值是 10000，你也可以在 redis.conf\r\n中对这个值进行修改。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">config get maxclients</span><br><span class=\"line\"></span><br><span class=\"line\">1) &quot;maxclients&quot;</span><br><span class=\"line\">2) &quot;10000&quot;</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"实例-4\">实例</h4>\r\n<p>以下实例我们在服务启动时设置最大连接数为 100000：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-server --maxclients 100000</span><br></pre></td></tr></table></figure>\r\n<hr />\r\n<h3 id=\"客户端命令\">客户端命令</h3>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 28%\" />\r\n<col style=\"width: 65%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">S.N.</th>\r\n<th style=\"text-align: left;\">命令</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\">1</td>\r\n<td style=\"text-align: left;\"><strong>CLIENT LIST</strong></td>\r\n<td style=\"text-align: left;\">返回连接到 redis 服务的客户端列表</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">2</td>\r\n<td style=\"text-align: left;\"><strong>CLIENT SETNAME</strong></td>\r\n<td style=\"text-align: left;\">设置当前连接的名称</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">3</td>\r\n<td style=\"text-align: left;\"><strong>CLIENT GETNAME</strong></td>\r\n<td style=\"text-align: left;\">获取通过 CLIENT SETNAME\r\n命令设置的服务名称</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">4</td>\r\n<td style=\"text-align: left;\"><strong>CLIENT PAUSE</strong></td>\r\n<td\r\nstyle=\"text-align: left;\">挂起客户端连接，指定挂起的时间以毫秒计</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">5</td>\r\n<td style=\"text-align: left;\"><strong>CLIENT KILL</strong></td>\r\n<td style=\"text-align: left;\">关闭客户端连接</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h2 id=\"redis-管道技术\">Redis 管道技术</h2>\r\n<p>Redis是一种基于客户端-服务端模型以及请求/响应协议的TCP服务。这意味着通常情况下一个请求会遵循以下步骤：</p>\r\n<ul>\r\n<li>客户端向服务端发送一个查询请求，并监听Socket返回，通常是以阻塞模式，等待服务端响应。</li>\r\n<li>服务端处理命令，并将结果返回给客户端。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"redis-管道技术-1\">Redis 管道技术</h3>\r\n<p>Redis\r\n管道技术可以在服务端未响应时，客户端可以继续向服务端发送请求，并最终一次性读取所有服务端的响应。</p>\r\n<h4 id=\"实例-5\">实例</h4>\r\n<p>查看 redis 管道，只需要启动 redis 实例并输入以下命令：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(echo -en &quot;PING\\r\\n SET runoobkey redis\\r\\nGET runoobkey\\r\\nINCR visitor\\r\\nINCR visitor\\r\\nINCR visitor\\r\\n&quot;; sleep 10) | nc localhost 6379</span><br><span class=\"line\"></span><br><span class=\"line\">+PONG</span><br><span class=\"line\">+OK</span><br><span class=\"line\">redis</span><br><span class=\"line\">:1</span><br><span class=\"line\">:2</span><br><span class=\"line\">:3</span><br></pre></td></tr></table></figure>\r\n<p>以上实例中我们通过使用 <strong>PING</strong>\r\n命令查看redis服务是否可用， 之后我们设置了 runoobkey 的值为\r\nredis，然后我们获取 runoobkey 的值并使得 visitor 自增 3 次。</p>\r\n<p>在返回的结果中我们可以看到这些命令一次性向 redis\r\n服务提交，并最终一次性读取所有服务端的响应</p>\r\n<hr />\r\n<h3 id=\"管道技术的优势\">管道技术的优势</h3>\r\n<p>管道技术最显著的优势是提高了 redis 服务的性能。</p>\r\n<p><strong>一些测试数据</strong></p>\r\n<p>在下面的测试中，我们将使用Redis的Ruby客户端，支持管道技术特性，测试管道技术对速度的提升效果。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require &#x27;rubygems&#x27; </span><br><span class=\"line\">require &#x27;redis&#x27;</span><br><span class=\"line\">def bench(descr) </span><br><span class=\"line\">start = Time.now </span><br><span class=\"line\">yield </span><br><span class=\"line\">puts &quot;#&#123;descr&#125; #&#123;Time.now-start&#125; seconds&quot; </span><br><span class=\"line\">end</span><br><span class=\"line\">def without_pipelining </span><br><span class=\"line\">r = Redis.new </span><br><span class=\"line\">10000.times &#123; </span><br><span class=\"line\">    r.ping </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">end</span><br><span class=\"line\">def with_pipelining </span><br><span class=\"line\">r = Redis.new </span><br><span class=\"line\">r.pipelined &#123; </span><br><span class=\"line\">    10000.times &#123; </span><br><span class=\"line\">        r.ping </span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">end</span><br><span class=\"line\">bench(&quot;without pipelining&quot;) &#123; </span><br><span class=\"line\">    without_pipelining </span><br><span class=\"line\">&#125; </span><br><span class=\"line\">bench(&quot;with pipelining&quot;) &#123; </span><br><span class=\"line\">    with_pipelining </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>从处于局域网中的Mac OS\r\nX系统上执行上面这个简单脚本的数据表明，开启了管道操作后，往返延时已经被改善得相当低了。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">without pipelining 1.185238 seconds </span><br><span class=\"line\">with pipelining 0.250783 seconds</span><br></pre></td></tr></table></figure>\r\n<p>如你所见，开启管道后，我们的速度效率提升了5倍。</p>\r\n<h2 id=\"redis-分区\">Redis 分区</h2>\r\n<p>分区是分割数据到多个Redis实例的处理过程，因此每个实例只保存key的一个子集。</p>\r\n<h3 id=\"分区的优势\">分区的优势</h3>\r\n<ul>\r\n<li>通过利用多台计算机内存的和值，允许我们构造更大的数据库。</li>\r\n<li>通过多核和多台计算机，允许我们扩展计算能力；通过多台计算机和网络适配器，允许我们扩展网络带宽。</li>\r\n</ul>\r\n<h3 id=\"分区的不足\">分区的不足</h3>\r\n<p>redis的一些特性在分区方面表现的不是很好：</p>\r\n<ul>\r\n<li>涉及多个key的操作通常是不被支持的。举例来说，当两个set映射到不同的redis实例上时，你就不能对这两个set执行交集操作。</li>\r\n<li>涉及多个key的redis事务不能使用。</li>\r\n<li>当使用分区时，数据处理较为复杂，比如你需要处理多个rdb/aof文件，并且从多个实例和主机备份持久化文件。</li>\r\n<li>增加或删除容量也比较复杂。redis集群大多数支持在运行时增加、删除节点的透明数据平衡的能力，但是类似于客户端分区、代理等其他系统则不支持这项特性。然而，一种叫做presharding的技术对此是有帮助的。</li>\r\n</ul>\r\n<hr />\r\n<h3 id=\"分区类型\">分区类型</h3>\r\n<p>Redis 有两种类型分区。 假设有4个Redis实例\r\nR0，R1，R2，R3，和类似user:1，user:2这样的表示用户的多个key，对既定的key有多种不同方式来选择这个key存放在哪个实例中。也就是说，有不同的系统来映射某个key到某个Redis服务。</p>\r\n<h4 id=\"范围分区\">范围分区</h4>\r\n<p>最简单的分区方式是按范围分区，就是映射一定范围的对象到特定的Redis实例。</p>\r\n<p>比如，ID从0到10000的用户会保存到实例R0，ID从10001到\r\n20000的用户会保存到R1，以此类推。</p>\r\n<p>这种方式是可行的，并且在实际中使用，不足就是要有一个区间范围到实例的映射表。这个表要被管理，同时还需要各\r\n种对象的映射表，通常对Redis来说并非是好的方法。</p>\r\n<h4 id=\"哈希分区\">哈希分区</h4>\r\n<p>另外一种分区方法是hash分区。这对任何key都适用，也无需是object_name:这种形式，像下面描述的一样简单：</p>\r\n<ul>\r\n<li>用一个hash函数将key转换为一个数字，比如使用crc32 hash函数。对key\r\nfoobar执行crc32(foobar)会输出类似93024922的整数。</li>\r\n<li>对这个整数取模，将其转化为0-3之间的数字，就可以将这个整数映射到4个Redis实例中的一个了。93024922\r\n% 4 = 2，就是说key\r\nfoobar应该被存到R2实例中。注意：取模操作是取除的余数，通常在多种编程语言中用%操作符实现。</li>\r\n</ul>\r\n",
            "tags": [
                "数据库",
                "redis"
            ]
        },
        {
            "id": "http://example.com/2024/09/05/post/sql/redis/02-Java%E4%BD%BF%E7%94%A8Redis/",
            "url": "http://example.com/2024/09/05/post/sql/redis/02-Java%E4%BD%BF%E7%94%A8Redis/",
            "title": "Java使用Redis",
            "date_published": "2024-09-05T11:25:36.970Z",
            "content_html": "<h1 id=\"java使用redis\">Java使用Redis</h1>\r\n<h4 id=\"安装\">安装</h4>\r\n<p>开始在 Java 中使用 Redis 前， 我们需要确保已经安装了 redis 服务及\r\nJava redis 驱动，且你的机器上能正常使用 Java。\r\nJava的安装配置可以参考我们的 <a\r\nhref=\"https://www.runoob.com/redis/java-environment-setup.html\">Java\r\n开发环境配置</a>接下来让我们安装 Java redis 驱动：</p>\r\n<ul>\r\n<li>首先你需要下载驱动包 <a\r\nhref=\"https://mvnrepository.com/artifact/redis.clients/jedis\"><strong>下载\r\njedis.jar</strong></a>，确保下载最新驱动包。</li>\r\n<li>在你的 classpath 中包含该驱动包。</li>\r\n</ul>\r\n<div class=\"info\">\r\n<p><em>本站提供了 2.9.0 jar 版本下载：</em> <a\r\nhref=\"https://static.runoob.com/download/jedis-2.9.0.jar\">jedis-2.9.0.jar</a></p>\r\n</div>\r\n<h2 id=\"连接到redis服务\">连接到Redis服务</h2>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisJava</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接本地的 Redis 服务</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 如果 Redis 服务设置了密码，需要下面这行，没有就不需要</span></span><br><span class=\"line\">        <span class=\"comment\">// jedis.auth(&quot;123456&quot;); </span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//查看服务是否运行</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;服务正在运行: &quot;</span>+jedis.ping());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接成功</span><br><span class=\"line\">服务正在运行: PONG</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"redis-java-string字符串-实例\">Redis Java String(字符串)\r\n实例</h2>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisStringJava</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接本地的 Redis 服务</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//设置 redis 字符串数据</span></span><br><span class=\"line\">        jedis.set(<span class=\"string\">&quot;runoobkey&quot;</span>, <span class=\"string\">&quot;www.runoob.com&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取存储的数据并输出</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;redis 存储的字符串为: &quot;</span>+ jedis.get(<span class=\"string\">&quot;runoobkey&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接成功</span><br><span class=\"line\">redis 存储的字符串为: www.runoob.com</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"redis-java-list列表-实例\">Redis Java List(列表) 实例</h2>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisListJava</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接本地的 Redis 服务</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//存储数据到列表中</span></span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Runoob&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Google&quot;</span>);</span><br><span class=\"line\">        jedis.lpush(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"string\">&quot;Taobao&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 获取存储的数据并输出</span></span><br><span class=\"line\">        List&lt;String&gt; list = jedis.lrange(<span class=\"string\">&quot;site-list&quot;</span>, <span class=\"number\">0</span> ,<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i=<span class=\"number\">0</span>; i&lt;list.size(); i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;列表项为: &quot;</span>+list.get(i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接成功</span><br><span class=\"line\">列表项为: Taobao</span><br><span class=\"line\">列表项为: Google</span><br><span class=\"line\">列表项为: Runoob</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"redis-java-keys-实例\">Redis Java Keys 实例</h2>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Iterator;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Set;</span><br><span class=\"line\"><span class=\"keyword\">import</span> redis.clients.jedis.Jedis;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisKeyJava</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//连接本地的 Redis 服务</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;localhost&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;连接成功&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 获取数据并输出</span></span><br><span class=\"line\">        Set&lt;String&gt; keys = jedis.keys(<span class=\"string\">&quot;*&quot;</span>); </span><br><span class=\"line\">        Iterator&lt;String&gt; it=keys.iterator() ;   </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(it.hasNext())&#123;   </span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">key</span> <span class=\"operator\">=</span> it.next();   </span><br><span class=\"line\">            System.out.println(key);   </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">连接成功</span><br><span class=\"line\">runoobkey</span><br><span class=\"line\">site-list</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "数据库",
                "redis"
            ]
        },
        {
            "id": "http://example.com/2024/09/05/post/sql/redis/01-Redis%E7%AE%80%E4%BB%8B/",
            "url": "http://example.com/2024/09/05/post/sql/redis/01-Redis%E7%AE%80%E4%BB%8B/",
            "title": "Redis简介",
            "date_published": "2024-09-05T11:11:44.557Z",
            "content_html": "<h1 id=\"redis简介\">Redis简介</h1>\r\n<p>Redis是一个开源的内存数据库，遵守<a\r\nhref=\"https://www.runoob.com/note/13176\">BSD协议</a>,它提供了一个高性能的键值（key-value）存储系统，常用于缓存、消息队列、会话存储等应用场景。</p>\r\n<ul>\r\n<li><strong>性能极高</strong>：Redis以其极高的性能而著称，能够支持每秒数十万次的读写操作。这使得Redis成为处理高并发请求的理想选择，尤其是在需要快速响应的场景中，如缓存、会话管理、排行榜等。</li>\r\n<li><strong>丰富的数据类型</strong>：Redis不仅支持基本的键值存储，还提供了丰富的数据类型，包括字符串，列表，集合，哈希表，有序集合等。</li>\r\n<li><strong>原子性操作</strong>：Redis的所有操作都是原子性的，这意味着操作要么完全执行，要么完全不执行。这种特性对于确保数据的一致性和完整性至关重要，尤其是再高并发环境下处理事务时。</li>\r\n<li><strong>持久化</strong>：Redis\r\n支持数据的持久化，可以将内存中的数据保存到磁盘中，以便在系统重启后恢复数据。这为\r\nRedis 提供了数据安全性，确保数据不会因为系统故障而丢失。</li>\r\n<li><strong>支持发布/订阅模式：</strong>Redis\r\n内置了发布/订阅模式（Pub/Sub），允许客户端之间通过消息传递进行通信。这使得\r\nRedis 可以作为消息队列和实时数据传输的平台。</li>\r\n<li><strong>单线程模型：</strong>尽管 Redis\r\n是单线程的，但它通过高效的事件驱动模型来处理并发请求，确保了高性能和低延迟。单线程模型也简化了并发控制的复杂性</li>\r\n<li><strong>主从复制：</strong>Redis\r\n支持主从复制，可以通过从节点来备份数据或分担读请求，提高数据的可用性和系统的伸缩性。</li>\r\n<li><strong>应用场景广泛：</strong>Redis\r\n被广泛应用于各种场景，包括但不限于缓存系统、会话存储、排行榜、实时分析、地理空间数据索引等。</li>\r\n<li><strong>社区支持：</strong>Redis\r\n拥有一个活跃的开发者社区，提供了大量的文档、教程和第三方库，这为开发者提供了强大的支持和丰富的资源。</li>\r\n<li><strong>跨平台兼容性：</strong>Redis 可以在多种操作系统上运行，包括\r\nLinux、macOS 和 Windows，这使得它能够在不同的技术栈中灵活部署。</li>\r\n</ul>\r\n<h2 id=\"redis-与其他-key-value-存储有什么不同\">Redis 与其他 key-value\r\n存储有什么不同？</h2>\r\n<p>Redis 与其他 key-value\r\n存储系统的主要区别在于其提供了丰富的数据类型、高性能的读写能力、原子性操作、持久化机制、以及丰富的特性集。</p>\r\n<p>以下是 Redis 的一些独特之处：</p>\r\n<ul>\r\n<li><strong>丰富的数据类型：</strong>Redis 不仅仅支持简单的 key-value\r\n类型的数据，还提供了 list、set、zset（有序集合）、hash\r\n等数据结构的存储。这些数据类型可以更好地满足特定的业务需求，使得 Redis\r\n可以用于更广泛的应用场景。</li>\r\n<li><strong>高性能的读写能力：</strong>Redis 能读的速度是\r\n110000次/s，写的速度是 81000次/s。这种高性能主要得益于 Redis\r\n将数据存储在内存中，从而显著提高了数据的访问速度。</li>\r\n<li><strong>原子性操作：</strong>Redis\r\n的所有操作都是原子性的，这意味着操作要么完全执行，要么完全不执行。这种特性对于确保数据的一致性和完整性非常重要。</li>\r\n<li><strong>持久化机制：</strong>Redis\r\n支持数据的持久化，可以将内存中的数据保存在磁盘中，以便在系统重启后能够再次加载使用。这为\r\nRedis 提供了数据安全性，确保数据不会因为系统故障而丢失。</li>\r\n<li><strong>丰富的特性集：</strong>Redis 还支持\r\npublish/subscribe（发布/订阅）模式、通知、key\r\n过期等高级特性。这些特性使得 Redis\r\n可以用于消息队列、实时数据分析等复杂的应用场景。</li>\r\n<li><strong>主从复制和高可用性：</strong>Redis 支持 master-slave\r\n模式的数据备份，提供了数据的备份和主从复制功能，增强了数据的可用性和容错性。</li>\r\n<li><strong>支持 Lua 脚本：</strong>Redis 支持使用 Lua\r\n脚本来编写复杂的操作，这些脚本可以在服务器端执行，提供了更多的灵活性和强大的功能。</li>\r\n<li><strong>单线程模型：</strong>尽管 Redis\r\n是单线程的，但它通过高效的事件驱动模型来处理并发请求，确保了高性能和低延迟。</li>\r\n</ul>\r\n",
            "tags": [
                "数据库",
                "redis"
            ]
        },
        {
            "id": "http://example.com/2024/08/29/post/hexo/02-%E4%B8%BB%E9%A2%98%E7%89%B9%E6%AE%8A%E6%A0%B7%E5%BC%8F%E4%BB%A3%E7%A0%81/",
            "url": "http://example.com/2024/08/29/post/hexo/02-%E4%B8%BB%E9%A2%98%E7%89%B9%E6%AE%8A%E6%A0%B7%E5%BC%8F%E4%BB%A3%E7%A0%81/",
            "title": "Theme Shoka 特殊功能",
            "date_published": "2024-08-29T03:27:23.373Z",
            "content_html": "<div class=\"info\">\r\n<p>以下介绍可以使用的 markdown 或者标签代码。 功能大部分基于\r\nhexo-renderer-multi-markdown-it\r\n渲染器，尤其是代码块的显示，与默认渲染器不兼容。</p>\r\n<p>转载：https://shoka.lostyu.me/computer-science/note/theme-shoka-doc/special/</p>\r\n</div>\r\n<h1 id=\"links链接块\"><code>links</code>链接块</h1>\r\n<p>本功能参考 NexT，基于 Hexo Tag 功能，用来建立友链或其他网址链接功能。\r\n文章中的使用格式：</p>\r\n<p>使用 links 标签块，包围 yml 语法书写的内容，字段包括</p>\r\n<table>\r\n<thead>\r\n<tr>\r\n<th><code>site</code></th>\r\n<th>站点名称</th>\r\n<th>必填</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><code>owner</code></td>\r\n<td>管理员名字</td>\r\n<td>可选，默认为<code>site</code>值</td>\r\n</tr>\r\n<tr>\r\n<td><code>url</code></td>\r\n<td>站点链接</td>\r\n<td>必填</td>\r\n</tr>\r\n<tr>\r\n<td><code>desc</code></td>\r\n<td>站点描述</td>\r\n<td>可选，默认为<code>url</code>的值</td>\r\n</tr>\r\n<tr>\r\n<td><code>image</code></td>\r\n<td>站点图片</td>\r\n<td>可选，默认为<code>images/404.png</code></td>\r\n</tr>\r\n<tr>\r\n<td><code>color</code></td>\r\n<td>方块颜色</td>\r\n<td>可选，默认为<code>#666</code></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% links %&#125;</span><br><span class=\"line\">- site: #站点名称</span><br><span class=\"line\">  owner: #管理员名字</span><br><span class=\"line\">  url: #站点网址</span><br><span class=\"line\">  desc: #简短描述</span><br><span class=\"line\">  image: #一张图片</span><br><span class=\"line\">  color: #颜色代码</span><br><span class=\"line\">&#123;% endlinks %&#125;</span><br></pre></td></tr></table></figure>\r\n<p>举个例子：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% links %&#125;</span><br><span class=\"line\">- site: 優萌初華</span><br><span class=\"line\">  owner: 霜月琉璃</span><br><span class=\"line\">  url: https://shoka.lostyu.me</span><br><span class=\"line\">  desc: 琉璃的医学 &amp; 编程笔记</span><br><span class=\"line\">  image: https://cdn.jsdelivr.net/gh/amehime/shoka@latest/images/avatar.jpg</span><br><span class=\"line\">  color: &quot;#e9546b&quot;</span><br><span class=\"line\">- site: 優萌初華</span><br><span class=\"line\">  owner: 霜月琉璃</span><br><span class=\"line\">  url: https://shoka.lostyu.me</span><br><span class=\"line\">  image: images/avatar.jpg</span><br><span class=\"line\">- site: 優萌初華</span><br><span class=\"line\">  url: https://shoka.lostyu.me</span><br><span class=\"line\">  desc: 琉璃的医学 &amp; 编程笔记</span><br><span class=\"line\">  color: &quot;#9d5b8b&quot;</span><br><span class=\"line\">&#123;% endlinks %&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"links\"><div class=\"item\" title=\"彼岸桌面\" style=\"--block-color:#e9546b;\"><span class=\"exturl image\" data-url=\"aHR0cDovL3d3dy5uZXRiaWFuLmNvbS9kb25nbWFuL2luZGV4XzIuaHRtbA==\" data-background-image=\"https://dlink.host/wx4.sinaimg.cn/large/006V2BDqly8hqji9v97zij30u00u0wl8.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cDovL3d3dy5uZXRiaWFuLmNvbS9kb25nbWFuL2luZGV4XzIuaHRtbA==\">彼岸桌面</span>\n          <p class=\"desc\">http://www.netbian.com/dongman/index_2.html</p>\n          </div></div><div class=\"item\" title=\"极简壁纸\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly9iei56enptaC5jbi9pbmRleA==\" data-background-image=\"https://dlink.host/wx4.sinaimg.cn/large/006V2BDqly8hqjiaqmhrtj30u00u077q.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly9iei56enptaC5jbi9pbmRleA==\">极简壁纸</span>\n          <p class=\"desc\">https://bz.zzzmh.cn/index</p>\n          </div></div><div class=\"item\" title=\"Wallpaper Abyss\" style=\"--block-color:#9d5b8b;\"><span class=\"exturl image\" data-url=\"aHR0cHM6Ly93YWxsLmFscGhhY29kZXJzLmNvbS8=\" data-background-image=\"https://dlink.host/wx3.sinaimg.cn/large/006V2BDqly8hr4tacs6tmj31c00u048d.jpg\"></span>\n          <div class=\"info\">\n          <span class=\"exturl title\" data-url=\"aHR0cHM6Ly93YWxsLmFscGhhY29kZXJzLmNvbS8=\">Wallpaper Abyss</span>\n          <p class=\"desc\">https://wall.alphacoders.com/</p>\n          </div></div></div>\r\n<p>以上标签块的内容，还可以保存到一个<code>yml</code>文件中，然后使用<code>linksfile</code>标签。其中，<code>path</code>位于<code>&lt;root&gt;/source</code>目录下</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% linksfile [path] %&#125;</span><br><span class=\"line\">eg:</span><br><span class=\"line\">&#123;% linksfile friends/_data.yml %&#125;</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"code代码块\"><code>code</code>代码块</h1>\r\n",
            "tags": [
                "博客",
                "hexo"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/Linux%20-Git/",
            "url": "http://example.com/2024/08/27/post/golang/Linux%20-Git/",
            "title": "",
            "date_published": "2024-08-27T13:59:35.716Z",
            "content_html": "<p>Linux -Git</p>\r\n",
            "tags": []
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/13-Gin-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2024/08/27/post/golang/13-Gin-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/",
            "title": "13-Gin-日志管理",
            "date_published": "2024-08-27T02:03:14.491Z",
            "content_html": "<h1 id=\"gin-日志管理\">Gin-日志管理</h1>\r\n<p>Gin默认使用的日志中间件采用的是<code>os.Stdout</code>，只有最基本的功能，毕竟Gin只专注于Web服务，大多数情况下应该使用更加成熟的日志框架，不过这并不在本章的讨论范围内，而且Gin的拓展性很高，可以很轻易的整合其他框架，这里只讨论其自带的日志服务。</p>\r\n<h3 id=\"控制台颜色\">控制台颜色</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gin.DisableConsoleColor() <span class=\"comment\">// 关闭控制台日志颜色</span></span><br></pre></td></tr></table></figure>\r\n<p>除了在开发的时候，大多数时候都不建议开启此项</p>\r\n<h3 id=\"日志写入文件\">日志写入文件</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">    <span class=\"comment\">// 关掉控制台颜色</span></span><br><span class=\"line\">\tgin.DisableConsoleColor()</span><br><span class=\"line\">    <span class=\"comment\">// 创建两个日志文件</span></span><br><span class=\"line\">\tlog1, _ := os.Create(<span class=\"string\">&quot;info1.log&quot;</span>)</span><br><span class=\"line\">\tlog2, _ := os.Create(<span class=\"string\">&quot;info2.log&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 同时记录进两个日志文件</span></span><br><span class=\"line\">\tgin.DefaultWriter = io.MultiWriter(log1, log2)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>gin自带的日志支持写入多个文件，但内容是相同的，使用起来不太方便，并且不会将请求日志写入文件中。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.New()</span><br><span class=\"line\">\t<span class=\"comment\">// LoggerWithFormatter 中间件会写入日志到 gin.DefaultWriter</span></span><br><span class=\"line\">\t<span class=\"comment\">// 默认 gin.DefaultWriter = os.Stdout</span></span><br><span class=\"line\">\trouter.Use(gin.LoggerWithFormatter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(param gin.LogFormatterParams)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 写入对应文件的逻辑</span></span><br><span class=\"line\">        ......</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出自定义格式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%s - [%s] \\&quot;%s %s %s %d %s \\&quot;%s\\&quot; %s\\&quot;\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\tparam.ClientIP,</span><br><span class=\"line\">\t\t\t\tparam.TimeStamp.Format(time.RFC1123),</span><br><span class=\"line\">\t\t\t\tparam.Method,</span><br><span class=\"line\">\t\t\t\tparam.Path,</span><br><span class=\"line\">\t\t\t\tparam.Request.Proto,</span><br><span class=\"line\">\t\t\t\tparam.StatusCode,</span><br><span class=\"line\">\t\t\t\tparam.Latency,</span><br><span class=\"line\">\t\t\t\tparam.Request.UserAgent(),</span><br><span class=\"line\">\t\t\t\tparam.ErrorMessage,</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\trouter.Use(gin.Recovery())</span><br><span class=\"line\">\trouter.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.String(<span class=\"number\">200</span>, <span class=\"string\">&quot;pong&quot;</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>通过自定义中间件，可以实现日志写入文件中</p>\r\n<h3 id=\"路由调试日志格式\">路由调试日志格式</h3>\r\n<p>这里修改的只是启动时输出路由信息的的日志</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   gin.SetMode(gin.DebugMode)</span><br><span class=\"line\">   gin.DebugPrintRouteFunc = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(httpMethod, absolutePath, handlerName <span class=\"type\">string</span>, nuHandlers <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> gin.IsDebugging() &#123;</span><br><span class=\"line\">         log.Printf(<span class=\"string\">&quot;路由 %v %v %v %v\\n&quot;</span>, httpMethod, absolutePath, handlerName, nuHandlers)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2022/12/21 17:19:13 路由 GET /hello main.Hello 3</span><br></pre></td></tr></table></figure>\r\n<p><strong>结语</strong>：Gin算是Go语言Web框架中最易学习的一种，因为Gin真正做到了职责最小化，只是单纯的负责Web服务，其他的认证逻辑，数据缓存等等功能都交给开发者自行完成，相比于那些大而全的框架，轻量简洁的Gin对于初学者而言更适合也更应该去学习，因为Gin并没有强制使用某一种规范，项目该如何构建，采用什么结构都需要自行斟酌，对于初学者而言更能锻炼能力。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/12-Gin-%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/",
            "url": "http://example.com/2024/08/27/post/golang/12-Gin-%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/",
            "title": "12-Gin-会话控制",
            "date_published": "2024-08-27T01:58:36.406Z",
            "content_html": "<h1 id=\"gin-会话控制\">Gin-会话控制</h1>\r\n<h2 id=\"会话控制\">会话控制</h2>\r\n<p>在目前的时代中，流行的三种Web会话控制总共有三种，<code>cookie</code>，<code>session</code>，<code>JWT</code>。</p>\r\n<h3 id=\"cookie\">Cookie</h3>\r\n<p>cookie中的信息是以键值对的形式储存在浏览器中，而且在浏览器中可以直接看到数据</p>\r\n<p>优点：</p>\r\n<ul>\r\n<li>结构简单</li>\r\n<li>数据持久</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>大小受限</li>\r\n<li>明文存储</li>\r\n<li>容易受到CSRF攻击</li>\r\n</ul>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    router.GET(<span class=\"string\">&quot;/cookie&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       \t<span class=\"comment\">// 获取对应的cookie</span></span><br><span class=\"line\">        cookie, err := c.Cookie(<span class=\"string\">&quot;gin_cookie&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            cookie = <span class=\"string\">&quot;NotSet&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 设置cookie 参数：key，val，存在时间，目录，域名，是否允许他人通过js访问cookie，仅http</span></span><br><span class=\"line\">            c.SetCookie(<span class=\"string\">&quot;gin_cookie&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"number\">3600</span>, <span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;Cookie value: %s \\n&quot;</span>, cookie)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    router.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>单纯的cookie在五六年前用的比较多，不过作者一般很少使用单纯的cookie来做会话控制，这样做确实不太安全。</p>\r\n<h3 id=\"session\">Session</h3>\r\n<p>session存储在服务器中，然后发送一个cookie存储在浏览器中，cookie中存储的是session_id，之后每次请求服务器通过session_id可以获取对应的session信息</p>\r\n<p>优点：</p>\r\n<ul>\r\n<li>存储在服务端，增加安全性，便于管理</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>存储在服务端，增大服务器开销，降低性能</li>\r\n<li>基于cookie识别，不安全</li>\r\n<li>认证信息在分布式情况下不同步</li>\r\n</ul>\r\n<p>Session与Cookie是不分家的，每次要用到Session，默认就是要用到Cookie了。Gin默认是不支持Session的，因为Cookie是Http协议里面的内容，但Session不是，不过有第三方中间件支持，安装依赖即可，仓库地址：<a\r\nhref=\"https://github.com/gin-contrib/sessions#sessions\">gin-contrib/sessions:\r\nGin middleware for session management (github.com)open in new\r\nwindow</a></p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gin-contrib/sessions</span><br></pre></td></tr></table></figure>\r\n<p>支持cookie，Redis，MongoDB，GORM，PostgreSQL</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   r := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 创建基于Cookie的存储引擎</span></span><br><span class=\"line\">   store := cookie.NewStore([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;secret&quot;</span>))</span><br><span class=\"line\">   <span class=\"comment\">// 设置Session中间件，mysession即session名称，也是cookie的名称</span></span><br><span class=\"line\">   r.Use(sessions.Sessions(<span class=\"string\">&quot;mysession&quot;</span>, store))</span><br><span class=\"line\">   r.GET(<span class=\"string\">&quot;/incr&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化session</span></span><br><span class=\"line\">      session := sessions.Default(c)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count <span class=\"type\">int</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取值</span></span><br><span class=\"line\">      v := session.Get(<span class=\"string\">&quot;count&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> v == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         count = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         count = v.(<span class=\"type\">int</span>)</span><br><span class=\"line\">         count++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置</span></span><br><span class=\"line\">      session.Set(<span class=\"string\">&quot;count&quot;</span>, count)</span><br><span class=\"line\">      <span class=\"comment\">// 保存</span></span><br><span class=\"line\">      session.Save()</span><br><span class=\"line\">      c.JSON(<span class=\"number\">200</span>, gin.H&#123;<span class=\"string\">&quot;count&quot;</span>: count&#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   r.Run(<span class=\"string\">&quot;:8000&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>一般不推荐通过Cookie存储Sesison，推荐使用Redis，其他例子还请自行去官方仓库了解。</p>\r\n<h3 id=\"jwt\">JWT</h3>\r\n<p>优点：</p>\r\n<ul>\r\n<li>基于JSON，多语言通用</li>\r\n<li>可以存储非敏感信息</li>\r\n<li>占用很小，便于传输</li>\r\n<li>服务端无需存储，利于分布式拓展</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>Token刷新问题</li>\r\n<li>一旦签发则无法主动控制</li>\r\n</ul>\r\n<p>自从前端革命以来，前端程序员不再只是一个“写页面的”，前后端分离的趋势愈演愈烈，JWT是最适合前后端分离和分布式系统来做会话控制的，具有很大的天然优势。考虑到JWT已经完全脱离Gin的内容，且没有任何中间件支持，因为JWT本身就是不局限于任何框架任何语言，在这里就不作细致的讲解，可以前往另一篇文档：<a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/auth/jwt.html\">JWT</a></p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/11-Gin-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/",
            "url": "http://example.com/2024/08/27/post/golang/11-Gin-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/",
            "title": "11-Gin-服务配置",
            "date_published": "2024-08-27T01:55:09.830Z",
            "content_html": "<h1 id=\"gin-服务配置\">Gin-服务配置</h1>\r\n<p>光是使用默认的配置是远远不够的，大多数情况下都需求修改很多的服务配置才能达到需求。</p>\r\n<h3 id=\"http配置\">Http配置</h3>\r\n<p>可以通过<code>net/http</code>创建Server来配置，Gin本身也支持像原生API一样使用Gin。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   router := gin.Default()</span><br><span class=\"line\">   server := &amp;http.Server&#123;</span><br><span class=\"line\">      Addr:           <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">      Handler:        router,</span><br><span class=\"line\">      ReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">      WriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">      MaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatal(server.ListenAndServe())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"静态资源配置\">静态资源配置</h3>\r\n<p>静态资源在以往基本上是服务端不可或缺的一部分，尽管在现在使用占比正在逐渐减少，但仍旧有大量的系统还是使用单体架构的情况。</p>\r\n<p>Gin提供了三个方法来加载静态资源</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载某一静态文件夹 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> Static(relativePath, root <span class=\"type\">string</span>) IRoutes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载某一个fs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> StaticFS(relativePath <span class=\"type\">string</span>, fs http.FileSystem) IRoutes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载某一个静态文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> StaticFile(relativePath, filepath <span class=\"type\">string</span>) IRoutes</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>relativePath是映射到网页URL上的相对路径，root是文件在项目中的实际路径</p>\r\n</div>\r\n<p>假设项目的目录如下</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root</span><br><span class=\"line\">|</span><br><span class=\"line\">|-- static</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">|\t|-- a.jpg</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">|\t|-- favicon.ico</span><br><span class=\"line\">|</span><br><span class=\"line\">|-- view</span><br><span class=\"line\">\t|</span><br><span class=\"line\">\t|-- html</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   router := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件目录</span></span><br><span class=\"line\">   router.Static(<span class=\"string\">&quot;/static&quot;</span>, <span class=\"string\">&quot;./static&quot;</span>)</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件目录</span></span><br><span class=\"line\">   router.StaticFS(<span class=\"string\">&quot;/view&quot;</span>, http.Dir(<span class=\"string\">&quot;view&quot;</span>))</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件</span></span><br><span class=\"line\">   router.StaticFile(<span class=\"string\">&quot;/favicon&quot;</span>, <span class=\"string\">&quot;./static/favicon.ico&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"跨域配置\">跨域配置</h3>\r\n<p>Gin本身是没有对于跨域配置做出任何处理，需要自行编写中间件来进行实现相应的需求，其实难度也不大，稍微熟悉HTTP协议的人一般都能写出来，逻辑基本上都是那一套。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CorsMiddle</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      method := c.Request.Method</span><br><span class=\"line\">      origin := c.Request.Header.Get(<span class=\"string\">&quot;Origin&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> origin != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 生产环境中的服务端通常都不会填 *，应当填写指定域名</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin)</span><br><span class=\"line\">         <span class=\"comment\">// 允许使用的HTTP METHOD</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 允许使用的请求头</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 允许客户端访问的响应头</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 是否需要携带认证信息 Credentials 可以是 cookies、authorization headers 或 TLS client certificates </span></span><br><span class=\"line\">         <span class=\"comment\">// 设置为true时，Access-Control-Allow-Origin不能为 *</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 放行OPTION请求，但不执行后续方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> method == <span class=\"string\">&quot;OPTIONS&quot;</span> &#123;</span><br><span class=\"line\">         c.AbortWithStatus(http.StatusNoContent)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 放行</span></span><br><span class=\"line\">      c.Next()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>将中间件注册为全局中间件即可</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/10-Gin-%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "url": "http://example.com/2024/08/27/post/golang/10-Gin-%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "title": "10-Gin-中间件",
            "date_published": "2024-08-27T01:49:32.688Z",
            "content_html": "<h1 id=\"gin-中间件\">Gin-中间件</h1>\r\n<p>gin十分轻便灵活，拓展性非常高，对于中间件的支持也非常友好。在Gin中，所有的接口请求都要经过中间件，通过中间件，开发者可以自定义实现很多功能和逻辑，gin虽然本身自带的功能很少，但是由第三方社区开发的gin拓展中间件十分丰富。</p>\r\n<p>中间件本质上其实还是一个接口处理器</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HandlerFunc defines the handler used by gin middleware as return value.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Context)</span></span></span><br></pre></td></tr></table></figure>\r\n<p>从某种意义上来说，每一个请求对应的处理器也是中间件，只不过是作用范围非常小的局部中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Default</span><span class=\"params\">()</span></span> *Engine &#123;</span><br><span class=\"line\">   debugPrintWARNINGDefault()</span><br><span class=\"line\">   engine := New()</span><br><span class=\"line\">   engine.Use(Logger(), Recovery())</span><br><span class=\"line\">   <span class=\"keyword\">return</span> engine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>查看gin的源代码，<code>Default</code>函数中，返回的默认<code>Engine</code>就使用两个默认中间件<code>Logger()</code>，<code>Recovery()</code>，如果不想使用默认的中间件也可以使用<code>gin.New()</code>来代替。</p>\r\n<h3 id=\"全局中间件\">全局中间件</h3>\r\n<p>全局中间件即作用范围为全局，整个系统所有的请求都会经过此中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GlobalMiddleware</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;全局中间件被执行...&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>先创建一个闭包函数来创建中间件，再通过<code>Engine.Use()</code>来注册全局中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 注册全局中间件</span></span><br><span class=\"line\">   e.Use(GlobalMiddleware())</span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/v1/hello&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GIN-debug] Listening and serving HTTP on :8080</span><br><span class=\"line\">全局中间件被执行...</span><br><span class=\"line\">[GIN] 2022/12/21 - 11:57:52 | 200 |       538.9µs |             ::1 | GET      &quot;/v1/hello&quot;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"局部中间件\">局部中间件</h3>\r\n<p>局部中间件即作用范围为局部，系统中局部的请求会经过此中间件。局部中间件可以注册到单个路由上，不过更多时候是注册到路由组上。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 注册全局中间件</span></span><br><span class=\"line\">   e.Use(GlobalMiddleware())</span><br><span class=\"line\">   <span class=\"comment\">// 注册路由组局部中间件</span></span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>, LocalMiddleware())</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册单个路由局部中间件</span></span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, LocalMiddleware(), Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/v2/update&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局中间件被执行...</span><br><span class=\"line\">局部中间件被执行</span><br><span class=\"line\">[GIN] 2022/12/21 - 12:05:03 | 200 |       999.9µs |             ::1 | POST     &quot;/v2/update&quot;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"中间件原理\">中间件原理</h3>\r\n<p>Gin中间的使用和自定义非常容易，其内部的原理也比较简单，为了后续的学习，需要简单的了解下内部原理。Gin中的中间件其实用到了责任链模式，<code>Context</code>中维护着一个<code>HandlersChain</code>，本质上是一个<code>[]HandlerFunc</code>，和一个<code>index</code>，其数据类型为<code>int8</code>。在<code>Engine.handlerHTTPRequest(c *Context)</code>方法中，有一段代码表明了调用过程：gin在路由树中找到了对应的路由后，便调用了<code>Next()</code>方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> value.handlers != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 将调用链赋值给Context</span></span><br><span class=\"line\">   c.handlers = value.handlers</span><br><span class=\"line\">   c.fullPath = value.fullPath</span><br><span class=\"line\">   <span class=\"comment\">// 调用中间件</span></span><br><span class=\"line\">   c.Next()</span><br><span class=\"line\">   c.writermem.WriteHeaderNow()</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>Next()</code>的调用才是关键，<code>Next()</code>会遍历路由的<code>handlers</code>中的<code>HandlerFunc</code>\r\n并执行，此时可以看到<code>index</code>的作用就是记录中间件的调用位置。其中，给对应路由注册的接口函数也在<code>handlers</code>内，这也就是为什么前面会说接口也是一个中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Next() &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 一进来就+1是为了避免陷入递归死循环，默认值是-1</span></span><br><span class=\"line\">   c.index++</span><br><span class=\"line\">   <span class=\"keyword\">for</span> c.index &lt; <span class=\"type\">int8</span>(<span class=\"built_in\">len</span>(c.handlers)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行HandlerFunc</span></span><br><span class=\"line\">      c.handlers[c.index](c)</span><br><span class=\"line\">      <span class=\"comment\">// 执行完毕，index+1</span></span><br><span class=\"line\">      c.index++</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>修改一下<code>Hello()</code>的逻辑，来验证是否果真如此</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(c.HandlerNames())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出结果为</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.GlobalMiddleware.func1 main.LocalMiddleware.func1 main.Hello]</span><br></pre></td></tr></table></figure>\r\n<p>可以看到中间件调用链的顺序为：<code>Logger -&gt; Recovery -&gt; GlobalMiddleware -&gt; LocalMiddleWare -&gt; Hello</code>，调用链的最后一个元素才是真正要执行的接口函数，前面的都是中间件。</p>\r\n<div class=\"info\">\r\n<p>在注册局部路由时，有如下一个断言</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalSize := <span class=\"built_in\">len</span>(group.Handlers) + <span class=\"built_in\">len</span>(handlers) <span class=\"comment\">//中间件总数</span></span><br><span class=\"line\">assert1(finalSize &lt; <span class=\"type\">int</span>(abortIndex), <span class=\"string\">&quot;too many handlers&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<p>其中<code>abortIndex int8 = math.MaxInt8 &gt;&gt; 1</code>值为63，即使用系统时路由注册数量不要超过63个。</p>\r\n</div>\r\n<h3 id=\"计时器中间件\">计时器中间件</h3>\r\n<p>在知晓了上述的中间件原理后，就可以编写一个简单的请求时间统计中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TimeMiddleware</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 记录开始时间</span></span><br><span class=\"line\">      start := time.Now()</span><br><span class=\"line\">      <span class=\"comment\">// 执行后续调用链</span></span><br><span class=\"line\">      context.Next()</span><br><span class=\"line\">      <span class=\"comment\">// 计算时间间隔</span></span><br><span class=\"line\">      duration := time.Since(start)</span><br><span class=\"line\">      <span class=\"comment\">// 输出纳秒，以便观测结果</span></span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;请求用时: &quot;</span>, duration.Nanoseconds())</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 注册全局中间件，计时中间件</span></span><br><span class=\"line\">\te.Use(GlobalMiddleware(), TimeMiddleware())</span><br><span class=\"line\">\t<span class=\"comment\">// 注册路由组局部中间件</span></span><br><span class=\"line\">\tv1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>, LocalMiddleware())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 注册单个路由局部中间件</span></span><br><span class=\"line\">\t\tv2.POST(<span class=\"string\">&quot;/update&quot;</span>, LocalMiddleware(), Update)</span><br><span class=\"line\">\t\tv2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/v1/hello&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求用时:  517600</span><br></pre></td></tr></table></figure>\r\n<p>一个简单的计时器中间件就已经编写完毕了，后续可以凭借自己的摸索编写一些功能更实用的中间件。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/9-Gin-%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2024/08/27/post/golang/9-Gin-%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/",
            "title": "9-Gin-路由管理",
            "date_published": "2024-08-27T01:31:37.820Z",
            "content_html": "<h1 id=\"gin-路由管理\">Gin-路由管理</h1>\r\n<p>路由管理是一个系统中非常重要的部分，需要确保每一个请求都能被正确的映射到对应的函数上。</p>\r\n<h3 id=\"路由组\">路由组</h3>\r\n<p>创建一个路由组是将接口分类，不同类别的接口对应不同的功能，也更易于管理。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Login</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Update</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Delete</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>假设我们有以上四个接口，暂时不管其内部实现，<code>Hello</code>，<code>Login</code>是一组，<code>Update</code>，<code>Delete</code>是一组。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> Group(relativePath <span class=\"type\">string</span>, handlers ...HandlerFunc) *RouterGroup</span><br></pre></td></tr></table></figure>\r\n<p>在创建分组的时候，我们也可以给分组的根路由注册处理器，不过大多数时候并不会这么做。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\tv1 := e.Group(<span class=\"string\">&quot;v1&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv2 := e.Group(<span class=\"string\">&quot;v2&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">\t\tv2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>我们将其分成了<code>v1</code>，<code>v2</code>两个分组，其中的花括号<code>&#123;&#125;</code>仅仅只是为了规范，表名花括号内注册的处理器是属于同一个路由分组，在功能上没有任何作用。同样的，gin也支持嵌套分组，方法与上例一致，这里就不再演示。</p>\r\n<h3 id=\"路由\">404路由</h3>\r\n<p>gin\r\n中的<code>Engine</code>结构体提供了一个方法<code>NoRoute</code>，来设置当访问的URL不存在时如何处理，开发者可以将逻辑写入此方法中，以便路由未找到时自动调用，默认会返回404状态码</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span></span> NoRoute(handlers ...HandlerFunc)</span><br></pre></td></tr></table></figure>\r\n<p>我们拿上个例子举例</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 注册处理器</span></span><br><span class=\"line\">   e.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123; <span class=\"comment\">// 这里只是演示，不要在生产环境中直接返回HTML代码</span></span><br><span class=\"line\">      context.String(http.StatusNotFound, <span class=\"string\">&quot;&lt;h1&gt;404 Page Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>随便发一个请求</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;404 Page Not Found&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"路由-1\">405路由</h3>\r\n<p>Http状态码中，405代表着当前请求的方法类型是不允许的，gin中提供了如下方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span></span> NoMethod(handlers ...HandlerFunc)</span><br></pre></td></tr></table></figure>\r\n<p>来注册一个处理器，以便在发生时自动调用，前提是设置<code>Engine.HandleMethodNotAllowed = true</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 需要将其设置为true</span></span><br><span class=\"line\">   e.HandleMethodNotAllowed = <span class=\"literal\">true</span></span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   e.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.String(http.StatusNotFound, <span class=\"string\">&quot;&lt;h1&gt;404 Page Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 注册处理器</span></span><br><span class=\"line\">   e.NoMethod(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.String(http.StatusMethodNotAllowed, <span class=\"string\">&quot;method not allowed&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>配置好后，gin默认的header是不支持<code>OPTION</code>请求的，测试一下</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request OPTIONS &#x27;http://localhost:8080/v2/delete&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method not allowed</span><br></pre></td></tr></table></figure>\r\n<p>至此配置成功</p>\r\n<h3 id=\"重定向\">重定向</h3>\r\n<p>gin中的重定向十分简单，调用<code>gin.Context.Redirect()</code>方法即可。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/&quot;</span>, Index)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/8-Gin-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/",
            "url": "http://example.com/2024/08/27/post/golang/8-Gin-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/",
            "title": "8-Gin-文件传输",
            "date_published": "2024-08-27T01:27:47.846Z",
            "content_html": "<h1 id=\"gin-文件传输\">Gin-文件传输</h1>\r\n<p>文件传输是Web应用的一个不可或缺的功能，gin对于此的支持也是封装的十分简单，但其实本质上和用原生的<code>net/http</code>的流程都差不多。流程都是从请求体中读取文件流，然后再保存到本地。</p>\r\n<h3 id=\"单文件上传\">单文件上传</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uploadFile</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取文件</span></span><br><span class=\"line\">\tfile, err := ctx.FormFile(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;%+v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 保存在本地</span></span><br><span class=\"line\">\terr = ctx.SaveUploadedFile(file, <span class=\"string\">&quot;./&quot;</span>+file.Filename)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;%+v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">\tctx.String(http.StatusOK, <span class=\"string\">&quot;upload %s size:%d byte successfully!&quot;</span>, file.Filename, file.Size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/upload&#x27; \\</span><br><span class=\"line\">--form &#x27;file=@&quot;/C:/Users/user/Pictures/Camera Roll/a.jpg&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>结果</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload a.jpg size:1424 byte successfully!</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>一般情况下，上传文件的<code>Method</code>都会指定用<code>POST</code>，一些公司可能会倾向于使用<code>PUT</code>，前者是简单HTTP请求，后者是复杂HTTP请求，具体区别不作赘述，如果使用后者的话，尤其是前后端分离的项目时，需要进行相应的跨域处理，而Gin默认的配置是不支持跨域的跨域配置。</p>\r\n</div>\r\n<h3 id=\"多文件上传\">多文件上传</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/uploadFiles&quot;</span>, uploadFiles)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uploadFiles</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取gin解析好的multipart表单</span></span><br><span class=\"line\">\tform, _ := ctx.MultipartForm()</span><br><span class=\"line\">\t<span class=\"comment\">// 根据键值取得对应的文件列表</span></span><br><span class=\"line\">\tfiles := form.File[<span class=\"string\">&quot;files&quot;</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历文件列表，保存到本地</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">\t\terr := ctx.SaveUploadedFile(file, <span class=\"string\">&quot;./&quot;</span>+file.Filename)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;upload failed&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">\tctx.String(http.StatusOK, <span class=\"string\">&quot;upload %d files successfully!&quot;</span>, <span class=\"built_in\">len</span>(files))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/uploadFiles&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/a.jpg&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/123.jpg&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/girl.jpg&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload 3 files successfully!</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"文件下载\">文件下载</h3>\r\n<p>关于文件下载的部分Gin对于原有标准库的API再一次封装，使得文件下载异常简单。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/uploadFiles&quot;</span>, uploadFiles)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/download/:filename&quot;</span>, download)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">download</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件名</span></span><br><span class=\"line\">\tfilename := ctx.Param(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 返回对应文件</span></span><br><span class=\"line\">\tctx.FileAttachment(filename, filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/download/a.jpg&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>结果</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Disposition: attachment; filename=&quot;a.jpg&quot;</span><br><span class=\"line\">Date: Wed, 21 Dec 2022 08:04:17 GMT</span><br><span class=\"line\">Last-Modified: Wed, 21 Dec 2022 07:50:44 GMT</span><br></pre></td></tr></table></figure>\r\n<p>是不是觉得简单过头了，不妨不用框架的方法，自行编写一遍过程</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">download</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">   filename := ctx.Param(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 请求响应对象和请求对象</span></span><br><span class=\"line\">   response, request := ctx.Writer, ctx.Request</span><br><span class=\"line\">   <span class=\"comment\">// 写入响应头</span></span><br><span class=\"line\">   <span class=\"comment\">// response.Header().Set(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;) 以二进制流传输文件</span></span><br><span class=\"line\">   response.Header().Set(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">`attachment; filename*=UTF-8&#x27;&#x27;`</span>+url.QueryEscape(filename)) <span class=\"comment\">// 对文件名进行安全转义</span></span><br><span class=\"line\">   response.Header().Set(<span class=\"string\">&quot;Content-Transfer-Encoding&quot;</span>, <span class=\"string\">&quot;binary&quot;</span>)                                            <span class=\"comment\">// 传输编码</span></span><br><span class=\"line\">   http.ServeFile(response, request, filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>可以通过<code>Engine.MaxMultipartMemory</code>来设置文件传输的最大内存，默认为<code>32 &lt;&lt; 20 // 32 MB</code></p>\r\n</div>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/7-Gin-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "url": "http://example.com/2024/08/27/post/golang/7-Gin-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "title": "7-Gin-数据校验/响应",
            "date_published": "2024-08-27T01:11:02.696Z",
            "content_html": "<h1 id=\"gin-数据校验\">Gin-数据校验</h1>\r\n<p><code>gin</code>内置的校验工具其实是<code>github.com/go-playground/validator/v10</code>，使用方法也几乎没有什么差别，<a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/validate/Validator.html\">Validator</a></p>\r\n<h3 id=\"简单示例\"><strong>简单示例</strong></h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LoginUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   Username <span class=\"type\">string</span> <span class=\"string\">`binding:&quot;required&quot;  json:&quot;username&quot; form:&quot;username&quot; uri:&quot;username&quot;`</span></span><br><span class=\"line\">   Password <span class=\"type\">string</span> <span class=\"string\">`binding:&quot;required&quot; json:&quot;password&quot; form:&quot;password&quot; uri:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/register&quot;</span>, Register)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Register</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   newUser := &amp;LoginUser&#123;&#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := ctx.ShouldBind(newUser); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      ctx.String(http.StatusOK, <span class=\"string\">&quot;user%+v&quot;</span>, *newUser)</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ctx.String(http.StatusBadRequest, <span class=\"string\">&quot;invalid user,%v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/register&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;jack1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invalid user,Key: &#x27;LoginUser.Password&#x27; Error:Field validation for &#x27;Password&#x27; failed on the &#x27;required&#x27; tag</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>需要注意的一点是，gin中validator的校验tag是<code>binding</code>，而单独使用<code>validator</code>的的校验tag是<code>validator</code></p>\r\n</div>\r\n<h1 id=\"数据响应\">数据响应</h1>\r\n<p>数据响应是接口处理中最后一步要做的事情，后端将所有数据处理完成后，通过HTTP协议返回给调用者，gin对于数据响应提供了丰富的内置支持，用法简洁明了，上手十分容易。</p>\r\n<h3 id=\"简单示例-1\"><strong>简单示例</strong></h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回纯字符串格式的数据，http.StatusOK代表着200状态码，数据为&quot;Hello world !&quot;</span></span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;Hello world !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>文件加载的时候，默认根路径是项目路径，也就是<code>go.mod</code>文件所在的路径，下面例子中的<code>index.html</code>即位于根路径下的<code>index.html</code>，不过一般情况下这些模板文件都不会放在根路径，而是会存放在静态资源文件夹中</p>\r\n</div>\r\n<h3 id=\"html渲染\">HTML渲染</h3>\r\n<div class=\"info\">\r\n<p>文件加载的时候，默认根路径是项目路径，也就是<code>go.mod</code>文件所在的路径，下面例子中的<code>index.html</code>即位于根路径下的<code>index.html</code>，不过一般情况下这些模板文件都不会放在根路径，而是会存放在静态资源文件夹中</p>\r\n</div>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">    <span class=\"comment\">// 加载HTML文件，也可以使用Engine.LoadHTMLGlob()</span></span><br><span class=\"line\">   e.LoadHTMLFiles(<span class=\"string\">&quot;index.html&quot;</span>)</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/&quot;</span>, Index)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   c.HTML(http.StatusOK, <span class=\"string\">&quot;index.html&quot;</span>, gin.H&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>返回</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>GinLearn<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This is a HTML Template Render Example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"快速响应\">快速响应</h3>\r\n<p>前面经常用到<code>context.String()</code>方法来进行数据响应，这是最原始的响应方法，直接返回一个字符串，<code>gin</code>中其实还内置了许多了快速响应的方法例如:</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Render写入响应头，并进行数据渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Render(code <span class=\"type\">int</span>, r render.Render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染一个HTML模板，name是html路径，obj是内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> HTML(code <span class=\"type\">int</span>, name <span class=\"type\">string</span>, obj any)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以美化了的缩进JSON字符串进行数据渲染，通常不建议使用这个方法，因为会造成更多的传输消耗。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> IndentedJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安全的JSON，可以防止JSON劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> SecureJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSONP方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> JSONP(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> JSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染，会将unicode码转换为ASCII码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> AsciiJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染，不会对HTML特殊字符串进行转义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> PureJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// XML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> XML(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// YML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> YAML(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TOML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> TOML(code <span class=\"type\">int</span>, obj <span class=\"keyword\">interface</span>&#123;&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ProtoBuf方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> ProtoBuf(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> String(code <span class=\"type\">int</span>, format <span class=\"type\">string</span>, values ...any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到特定的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Redirect(code <span class=\"type\">int</span>, location <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将data写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Data(code <span class=\"type\">int</span>, contentType <span class=\"type\">string</span>, data []<span class=\"type\">byte</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过reader读取流并写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> DataFromReader(code <span class=\"type\">int</span>, contentLength <span class=\"type\">int64</span>, contentType <span class=\"type\">string</span>, reader io.Reader, extraHeaders <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高效的将文件写入响应流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> File(filepath <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以一种高效的方式将fs中的文件流写入响应流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> FileFromFS(filepath <span class=\"type\">string</span>, fs http.FileSystem) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以一种高效的方式将fs中的文件流写入响应流，并且在客户端会以指定的文件名进行下载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> FileAttachment(filepath, filename <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将服务端推送流写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> SSEvent(name <span class=\"type\">string</span>, message any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送一个流响应并返回一个布尔值，以此来判断客户端是否在流中间断开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Stream(step <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w io.Writer)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\r\n<p>对于大多数应用而言，用的最多的还是<code>context.JSON</code>，其他的相对而言要少一些，这里就不举例子演示了，因为都比较简单易懂，差不多都是直接调用的事情。</p>\r\n<h3 id=\"异步处理\">异步处理</h3>\r\n<p>在gin中，异步处理需要结合goroutine使用，使用起来十分简单。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// copy返回一个当前Context的副本以便在当前Context作用范围外安全的使用，可以用于传递给一个goroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Copy() *Context</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tctx := c.Copy()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 子协程应该使用Context的副本，不应该使用原始Context</span></span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">&quot;异步处理函数: &quot;</span>, ctx.HandlerNames())</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tlog.Println(<span class=\"string\">&quot;接口处理函数: &quot;</span>, c.HandlerNames())</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;http://localhost:8080/hello&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> 异步处理函数:  []</span><br><span class=\"line\"><span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> 接口处理函数:  [github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.Hello]</span><br><span class=\"line\">[GIN] <span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> - <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> | <span class=\"number\">200</span> |     <span class=\"number\">11.1927</span>ms |             ::<span class=\"number\">1</span> | GET      <span class=\"string\">&quot;/hello&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p>可以看到两者输出不同，副本在复制时，为了安全考虑，删掉了许多元素的值。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/26/post/golang/6-Gin-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2024/08/26/post/golang/6-Gin-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/",
            "title": "6-Gin-参数/数据解析",
            "date_published": "2024-08-26T09:12:33.792Z",
            "content_html": "<h1 id=\"gin-参数解析\">Gin-参数解析</h1>\r\n<p><code>gin</code>中的参数解析总共支持三种方式:<code>路由参数</code>，<code>URL参数</code>，<code>表单参数</code>，下面逐一讲解并结合代码示例，比较简单易懂。</p>\r\n<h2 id=\"路由参数\">路由参数</h2>\r\n<p>路由参数其实是封装了<code>HttpRouter</code>的参数解析功能，使用方法基本上与<code>HttpRouter</code>一致</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/findUser/:username/:userid&quot;</span>, FindUser)</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/downloadFile/*filepath&quot;</span>, UserPage)</span><br><span class=\"line\"></span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名参数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   username := c.Param(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">   userid := c.Param(<span class=\"string\">&quot;userid&quot;</span>)</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;username is %s\\n userid is %s&quot;</span>, username, userid)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路径参数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserPage</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   filepath := c.Param(<span class=\"string\">&quot;filepath&quot;</span>)</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;filepath is  %s&quot;</span>, filepath)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/findUser/jack/001&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is jack</span><br><span class=\"line\"> userid is 001</span><br></pre></td></tr></table></figure>\r\n<p>示例二</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/downloadFile/img/fruit.png&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filepath is  /img/fruit.png</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"url参数\">URL参数</h2>\r\n<p>传统的URL参数，格式就是<code>/url?key=val&amp;key1=val1&amp;key2=val2</code></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e :=gin.Default()</span><br><span class=\"line\">    e.GET(<span class=\"string\">&quot;/findUser&quot;</span>,FindUser)</span><br><span class=\"line\">    log.Fatalln(e.Run(<span class=\"string\">&quot;:8084&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindUser</span><span class=\"params\">(c *gin.Context)</span></span>&#123;</span><br><span class=\"line\">    username := c.DefaultQuery(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;defaultUser&quot;</span>)</span><br><span class=\"line\">    userid := c.Query(<span class=\"string\">&quot;userid&quot;</span>)</span><br><span class=\"line\">    c.String(http,StatusOK,<span class=\"string\">&quot;username is %s\\nuserid is %s&quot;</span>,username,userid)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;127.0.0.1:8080/findUser?username=jack&amp;userid=001&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is jack</span><br><span class=\"line\">userid is 001</span><br></pre></td></tr></table></figure>\r\n<p>示例二</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;127.0.0.1:8080/findUser&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is defaultUser</span><br><span class=\"line\">userid is </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"表单参数\">表单参数</h2>\r\n<p>表单的内容类型一般有<code>application/json</code>，<code>application/x-www-form-urlencoded</code>，<code>application/xml</code>，<code>multipart/form-data</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/register&quot;</span>, RegisterUser)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/update&quot;</span>, UpdateUser)</span><br><span class=\"line\">\te.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tusername := c.PostForm(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\tpassword := c.PostForm(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;successfully registered,your username is [%s],password is [%s]&quot;</span>, username, password)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UpdateUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\tc.ShouldBind(&amp;form)</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;successfully update,your username is [%s],password is [%s]&quot;</span>, form[<span class=\"string\">&quot;username&quot;</span>], form[<span class=\"string\">&quot;password&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一：使用<code>form-data</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/register&#x27; \\</span><br><span class=\"line\">--form &#x27;username=&quot;jack&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;password=&quot;123456&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">successfully registered,your username is [jack],password is [123456]</span><br></pre></td></tr></table></figure>\r\n<p><code>PostForm</code>方法默认解析<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>类型的表单。</p>\r\n<p>示例二：使用<code>json</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/update&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;username&quot;,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">successfully update,your username is [username],password is [123456]</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"gin-数据解析\">Gin-数据解析</h1>\r\n<p>在大多数情况下，我们都会使用结构体来承载数据，而不是直接解析参数。在<code>gin</code>中，用于数据绑定的方法主要是<code>Bind()</code>和<code>ShouldBind()</code>，两者的区别在于前者内部也是直接调用的<code>ShouldBind()</code>，当然返回<code>err</code>时，会直接进行400响应，后者则不会。如果想要更加灵活的进行错误处理，建议选择后者。这两个函数会自动根据请求的<code>content-type</code>来进行推断用什么方式解析。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> MustBindWith(obj any, b binding.Binding) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用了ShouldBindWith()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.ShouldBindWith(obj, b); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) <span class=\"comment\">// 直接响应400 badrequest</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果想要自行选择可以使用<code>BindWith()</code>和<code>ShouldBindWith()</code></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.MustBindWith(obj, binding.JSON) <span class=\"comment\">//json</span></span><br><span class=\"line\">c.MustBindWith(obj, binding.XML) <span class=\"comment\">//xml</span></span><br></pre></td></tr></table></figure>\r\n<p>gin支持的绑定类型有如下几种实现：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">   JSON          = jsonBinding&#123;&#125;</span><br><span class=\"line\">   XML           = xmlBinding&#123;&#125;</span><br><span class=\"line\">   Form          = formBinding&#123;&#125;</span><br><span class=\"line\">   Query         = queryBinding&#123;&#125;</span><br><span class=\"line\">   FormPost      = formPostBinding&#123;&#125;</span><br><span class=\"line\">   FormMultipart = formMultipartBinding&#123;&#125;</span><br><span class=\"line\">   ProtoBuf      = protobufBinding&#123;&#125;</span><br><span class=\"line\">   MsgPack       = msgpackBinding&#123;&#125;</span><br><span class=\"line\">   YAML          = yamlBinding&#123;&#125;</span><br><span class=\"line\">   Uri           = uriBinding&#123;&#125;</span><br><span class=\"line\">   Header        = headerBinding&#123;&#125;</span><br><span class=\"line\">   TOML          = tomlBinding&#123;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n<p>示例</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LoginUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUsername <span class=\"type\">string</span> <span class=\"string\">`bind:&quot;required&quot; json:&quot;username&quot; form:&quot;username&quot; uri:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span> <span class=\"string\">`bind:&quot;required&quot; json:&quot;password&quot; form:&quot;password&quot; uri:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/loginWithJSON&quot;</span>, Login)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/loginWithForm&quot;</span>, Login)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/loginWithQuery/:username/:password&quot;</span>, Login)</span><br><span class=\"line\">\te.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Login</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> login LoginUser</span><br><span class=\"line\">    <span class=\"comment\">// 使用ShouldBind来让gin自动推断</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.ShouldBind(&amp;login) == <span class=\"literal\">nil</span> &amp;&amp; login.Password != <span class=\"string\">&quot;&quot;</span> &amp;&amp; login.Username != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusOK, <span class=\"string\">&quot;login successfully !&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusBadRequest, <span class=\"string\">&quot;login failed !&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(login)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"json数据绑定\">Json数据绑定</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/loginWithJSON&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;root&quot;,</span><br><span class=\"line\">    &quot;password&quot;:&quot;root&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login successfully !</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"表单数据绑定\">表单数据绑定</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST <span class=\"string\">&#x27;127.0.0.1:8080/loginWithForm&#x27;</span> \\</span><br><span class=\"line\">--form <span class=\"string\">&#x27;username=&quot;root&quot;&#x27;</span> \\</span><br><span class=\"line\">--form <span class=\"string\">&#x27;password=&quot;root&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login successfully !</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"url数据绑定\">URL数据绑定</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/loginWithQuery/root/root&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login failed !</span><br></pre></td></tr></table></figure>\r\n<p>到了这里就会发生错误了，因为这里输出的<code>content-type</code>是空字符串，无法推断到底是要如何进行数据解析。所以当使用URL参数时，我们应该手动指定解析方式，例如：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err := c.ShouldBindUri(&amp;login); err == <span class=\"literal\">nil</span> &amp;&amp; login.Password != <span class=\"string\">&quot;&quot;</span> &amp;&amp; login.Username != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;login successfully !&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   fmt.Println(err)</span><br><span class=\"line\">   c.String(http.StatusBadRequest, <span class=\"string\">&quot;login failed !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多次绑定\">多次绑定</h3>\r\n<p>一般方法都是通过调用 <code>c.Request.Body</code>\r\n方法绑定数据，但不能多次调用这个方法，例如<code>c.ShouldBind</code>，不可重用，如果想要多次绑定的话，可以使用</p>\r\n<p><code>c.ShouldBindBodyWith</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeHandler</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  objA := formA&#123;&#125;</span><br><span class=\"line\">  objB := formB&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取 c.Request.Body 并将结果存入上下文。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> errA := c.ShouldBindBodyWith(&amp;objA, binding.JSON); errA == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formA`</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 这时, 复用存储在上下文中的 body。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> errB := c.ShouldBindBodyWith(&amp;objB, binding.JSON); errB == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formB JSON`</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以接受其他格式</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> errB2 := c.ShouldBindBodyWith(&amp;objB, binding.XML); errB2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formB XML`</span>)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"primary\">\r\n<p><code>c.ShouldBindBodyWith</code> 会在绑定之前将 body\r\n存储到上下文中。\r\n这会对性能造成轻微影响，如果调用一次就能完成绑定的话，那就不要用这个方法。只有某些格式需要此功能，如\r\n<code>JSON</code>, <code>XML</code>, <code>MsgPack</code>,\r\n<code>ProtoBuf</code>。 对于其他格式, 如 <code>Query</code>,\r\n<code>Form</code>, <code>FormPost</code>, <code>FormMultipart</code>\r\n可以多次调用<code>c.ShouldBind()</code> 而不会造成任何性能损失 。</p>\r\n</div>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/26/post/golang/5-Gin-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/",
            "url": "http://example.com/2024/08/26/post/golang/5-Gin-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/",
            "title": "5-Gin-快速开始",
            "date_published": "2024-08-26T08:53:08.309Z",
            "content_html": "<h1\r\nid=\"go-web框架-gin-快速开始\">Go-&gt;Web框架-&gt;Gin-&gt;快速开始</h1>\r\n<h2 id=\"介绍\">介绍</h2>\r\n<p>Gin 是一个用 Go (Golang) 编写的 Web 框架。 它具有类似 martini 的\r\nAPI，性能要好得多，多亏了 <code>httprouter</code>，速度提高了 40 倍。\r\n如果您需要性能和良好的生产力，您一定会喜欢\r\nGin。Gin相比于Iris和Beego而言，更倾向于轻量化的框架，只负责Web部分，追求极致的路由性能，功能或许没那么全，胜在轻量易拓展，这也是它的优点。因此，在所有的Web框架中，Gin是最容易上手和学习的。</p>\r\n<h2 id=\"特性\">特性</h2>\r\n<ul>\r\n<li><strong>快速</strong>：基于 Radix\r\n树的路由，小内存占用。没有反射。可预测的 API 性能。</li>\r\n<li><strong>支持中间件</strong>：传入的 HTTP\r\n请求可以由一系列中间件和最终操作来处理。\r\n例如：Logger，Authorization，GZIP，最终操作 DB。</li>\r\n<li><strong>Crash 处理</strong>：Gin 可以 catch 一个发生在 HTTP 请求中的\r\npanic 并 recover 它。这样，你的服务器将始终可用。</li>\r\n<li><strong>JSON 验证</strong>：Gin 可以解析并验证请求的\r\nJSON，例如检查所需值的存在。</li>\r\n<li><strong>路由组</strong>：更好地组织路由。是否需要授权，不同的 API\r\n版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</li>\r\n<li><strong>错误管理</strong>：Gin 提供了一种方便的方法来收集 HTTP\r\n请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</li>\r\n<li><strong>内置渲染</strong>：Gin 为 JSON，XML 和 HTML\r\n渲染提供了易于使用的 API。</li>\r\n<li><strong>可扩展性</strong>：新建一个中间件非常简单</li>\r\n</ul>\r\n<h2 id=\"安装\"><a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/web/gin.html#安装\"></a>安装</h2>\r\n<p>截止目前<code>2022/11/22</code>，gin支持的go最低版本为<code>1.16</code>，建议使用<code>go mod</code>来管理项目依赖。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get <span class=\"literal\">-u</span> github.com/<span class=\"built_in\">gin</span><span class=\"literal\">-gonic</span>/<span class=\"built_in\">gin</span></span><br></pre></td></tr></table></figure>\r\n<p>导入</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>注意</strong>这边网站是github会出现下载超时问题如出现则重新配置代理</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"> go <span class=\"built_in\">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"> go mod init <span class=\"string\">&quot;项目名称自己的&quot;</span></span><br><span class=\"line\">//安装MySQL驱动</span><br><span class=\"line\">go get -u gorm.io/driver/mysql</span><br><span class=\"line\">go get -u github.com/jinzhu/gorm</span><br><span class=\"line\"></span><br><span class=\"line\">最后输入</span><br><span class=\"line\">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>\r\n<p>结束后会出现go.mod文件</p>\r\n<p><img\r\nsrc=\"https://dlink.host/wx2.sinaimg.cn/large/006V2BDqly8ht1dzztt85j310s0qrjwf.jpg\" /></p>\r\n<h2 id=\"快速开始\">快速开始</h2>\r\n<p>在demo2下创建main.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   engine := gin.Default() <span class=\"comment\">//创建gin引擎</span></span><br><span class=\"line\">   engine.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">         <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;pong&quot;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   engine.Run() <span class=\"comment\">//开启服务器，默认监听localhost:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>请求URL</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET localhost:<span class=\"number\">8080</span>/ping</span><br></pre></td></tr></table></figure>\r\n<p>返回</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Date: Tue, 22 Nov 2022 08:47:11 GMT</span><br><span class=\"line\">Content-Length: 18</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;message&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Response file saved.</span><br><span class=\"line\">&gt; 2022-11-22T164711.200.json</span><br></pre></td></tr></table></figure>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1e6hxc7pj316p0qcq8r.jpg\" /></p>\r\n<h2 id=\"基础框架搭建\">基础框架搭建</h2>\r\n<p><strong>集成Swagger依赖</strong></p>\r\n<p>在Gin框架中使用Swagger可以通过gin-swagger这个库来实现。你可以通过以下步骤来安装gin-swagger并集成Swagger：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/swaggo/gin-swagger</span><br><span class=\"line\">go get -u github.com/swaggo/files</span><br><span class=\"line\"></span><br><span class=\"line\">//安装swag命令行工具</span><br><span class=\"line\">go get -u github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>\r\n<p>下载完之后在终端输入swag init产生docs文件。</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1evrr89lj308y05aq33.jpg\" /></p>\r\n<p><strong>注意</strong>：如果产生报错--显示 'swag'\r\n不是内部或外部命令</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swag : The term &#x27;swag&#x27; is not recognized as the name of a cmdlet, function, script file, or operable program. Check  </span><br><span class=\"line\">the spelling of the name, or if a path was included, verify that the path is correct and try again.</span><br><span class=\"line\">At line:1 char:1</span><br><span class=\"line\">+ swag init</span><br><span class=\"line\">+ ~~~~</span><br><span class=\"line\">    + CategoryInfo          : ObjectNotFound: (swag:String) [], CommandNotFoundException</span><br><span class=\"line\">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure>\r\n<p>进入到</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\你的用户名\\go\\pkg\\mod\\github.com\\swaggo\\swag@v1.8.7\\cmd\\swag</span><br></pre></td></tr></table></figure>\r\n<p>然后cmd，输入指令 <code>go install</code></p>\r\n<p>在</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\你的用户名\\go\\bin   会有 swag.exe文件生成（保存路径时不带swag.exe）</span><br></pre></td></tr></table></figure>\r\n<p>将这个路径保存到环境变量即可</p>\r\n<h2 id=\"完成一个基础的登陆业务\">完成一个基础的登陆业务</h2>\r\n<h3\r\nid=\"创建common文件夹配置相关请求头以及请求状态\">创建common文件夹配置相关请求头以及请求状态</h3>\r\n<p>ApiResponseEnum.go文件配置相关的请求头</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ApiResponseEnum <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tAIREADY_EXISTS   ApiResponseEnum = <span class=\"string\">&quot;-4:密码重复&quot;</span></span><br><span class=\"line\">\tSUCCESS          ApiResponseEnum = <span class=\"string\">&quot;0:成功&quot;</span></span><br><span class=\"line\">\tERROR_PARAM      ApiResponseEnum = <span class=\"string\">&quot;-2:参数错误&quot;</span></span><br><span class=\"line\">\tERROR_DATA_EMPTY ApiResponseEnum = <span class=\"string\">&quot;-3:无数据&quot;</span></span><br><span class=\"line\">\tFAIL             ApiResponseEnum = <span class=\"string\">&quot;-1:失败&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a ApiResponseEnum)</span></span> GetCode() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tcodeMap := <span class=\"keyword\">map</span>[ApiResponseEnum]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\tAIREADY_EXISTS:   <span class=\"string\">&quot;-4&quot;</span>,</span><br><span class=\"line\">\t\tSUCCESS:          <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">\t\tERROR_PARAM:      <span class=\"string\">&quot;-2&quot;</span>,</span><br><span class=\"line\">\t\tERROR_DATA_EMPTY: <span class=\"string\">&quot;-3&quot;</span>,</span><br><span class=\"line\">\t\tFAIL:             <span class=\"string\">&quot;-1&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> codeMap[a]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a ApiResponseEnum)</span></span> GetName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tcodeMsgMap := <span class=\"keyword\">map</span>[ApiResponseEnum]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\tAIREADY_EXISTS:   <span class=\"string\">&quot;密码重复&quot;</span>,</span><br><span class=\"line\">\t\tSUCCESS:          <span class=\"string\">&quot;成功&quot;</span>,</span><br><span class=\"line\">\t\tERROR_PARAM:      <span class=\"string\">&quot;参数错误&quot;</span>,</span><br><span class=\"line\">\t\tERROR_DATA_EMPTY: <span class=\"string\">&quot;无数据&quot;</span>,</span><br><span class=\"line\">\t\tFAIL:             <span class=\"string\">&quot;失败&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> codeMsgMap[a]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>ApiResponseObject获取请求状态</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ApiResponseObject <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tErrorCode <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;errorCode&quot;`</span></span><br><span class=\"line\">\tErrorMsg  <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;errorMsg&quot;`</span></span><br><span class=\"line\">\tData      <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetErrorCode() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.ErrorCode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetErrorCode(errorCode <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresponse.ErrorCode = errorCode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetErrorMsg() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.ErrorMsg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetErrorMsg(errorMsg <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresponse.ErrorMsg = errorMsg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetData() <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.Data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetData(data <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\tresponse.Data = data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>HttpClientTool配置请求接口</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOGIN <span class=\"type\">string</span> =  <span class=\"string\">&quot;/login&quot;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"controllers发布接口文件夹\">controllers发布接口文件夹</h3>\r\n<p>bstractApiController.go数据处理文件</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllerspackage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tAPI <span class=\"string\">&quot;YV/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReponseJSON</span><span class=\"params\">(errorCode <span class=\"type\">string</span>, errorMsg <span class=\"type\">string</span>, resData <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> API.ApiResponseObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tapiResponseObject := API.ApiResponseObject&#123;&#125;</span><br><span class=\"line\">\tapiResponseObject.SetData(resData)</span><br><span class=\"line\">\tapiResponseObject.SetErrorMsg(errorMsg)</span><br><span class=\"line\">\tapiResponseObject.SetErrorCode(errorCode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> apiResponseObject</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>根据项目要求创建相应的文件我这里创建LOGIN文件等其他配置完成在写</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1f1xxbmrj30a7095q3g.jpg\" /></p>\r\n<h3 id=\"model数据库配置以及增删改查\">model数据库配置以及增删改查</h3>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1f7499xwj307203lq2u.jpg\" /></p>\r\n<p>像这样创建文件夹</p>\r\n<p>core.go配置数据库连接</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dsn <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LV1</span><span class=\"params\">()</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span></span><br><span class=\"line\">\tusername := <span class=\"string\">&quot;root&quot;</span>   <span class=\"comment\">//账号</span></span><br><span class=\"line\">\tpassword := <span class=\"string\">&quot;123456&quot;</span> <span class=\"comment\">//密码</span></span><br><span class=\"line\">\thost := <span class=\"string\">&quot;&quot;</span>           <span class=\"comment\">//数据库地123456址，可以是Ip或者域名</span></span><br><span class=\"line\">\tport := <span class=\"number\">3306</span>         <span class=\"comment\">//数据库端口</span></span><br><span class=\"line\">\tDbname := <span class=\"string\">&quot;demo&quot;</span>     <span class=\"comment\">//数据库名</span></span><br><span class=\"line\">\ttimeout := <span class=\"string\">&quot;10s&quot;</span>     <span class=\"comment\">//连接超时，10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//拼接下dsn参数, dsn格式可以参考上面的语法，这里使用Sprintf动态拼接dsn参数，因为一般数据库连接参数，我们都是保存在配置文件里面，需要从配置文件加载参数，然后拼接dsn。</span></span><br><span class=\"line\">\tdsn = fmt.Sprintf(<span class=\"string\">&quot;%s:%s@tcp(%s:%d)/%s?charset=utf8&amp;parseTime=True&amp;loc=Local&amp;timeout=%s&quot;</span>, username, password, host, port, Dbname, timeout)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dsn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>初始化数据库代码，后面加到main.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dataBase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\tv1 <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> err <span class=\"type\">error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DB *gorm.DB</span><br><span class=\"line\"><span class=\"keyword\">var</span> Base <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tBase = v1.LV1() <span class=\"comment\">//切换L1数据库</span></span><br><span class=\"line\">\tDB, err = gorm.Open(mysql.Open(Base), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败, error=&quot;</span> + err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3\r\nid=\"创建router文件夹里面创建app.go主要管理所有发布接口\">创建router文件夹里面创建app.go主要管理所有发布接口</h3>\r\n<p>app.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Router</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3\r\nid=\"创建services文件夹管理各自接口\">创建services文件夹管理各自接口</h3>\r\n<h3 id=\"最后修改main文件\">最后修改main文件</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tv1 <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/router&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> err <span class=\"type\">error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DB *gorm.DB</span><br><span class=\"line\"><span class=\"keyword\">var</span> Base <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tBase = v1.LV1() <span class=\"comment\">//切换L1数据库</span></span><br><span class=\"line\">\tDB, err = gorm.Open(mysql.Open(Base), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败, error=&quot;</span> + err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := router.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := r.Run()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>成品如下：</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1otcjikdj312c0l6q4x.jpg\" /></p>\r\n<h3 id=\"简单使用\">简单使用</h3>\r\n<p>完成一个简单的查询使用 查询id 为1 的用户</p>\r\n<p>1.在HttpClientTool.go文件中生成接口</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOGIN <span class=\"type\">string</span> = <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GETUSER <span class=\"type\">string</span> = <span class=\"string\">&quot;/get/user&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p>2.在services文件下生UserService.go文件调用API以及调用还没有创建的方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    API <span class=\"string\">&quot;demo2/common&quot;</span></span><br><span class=\"line\">    controllerspackage <span class=\"string\">&quot;demo2/controllers&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserService</span><span class=\"params\">(r *gin.Engine)</span></span> *gin.Engine &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;注册路由&quot;</span>)</span><br><span class=\"line\">    r.GET(API.GETUSER, controllerspackage.GetUserImpl)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>3.在app.go声明</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/services&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Router</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tservices.UserService(r)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>4.在model文件夹下的user.go文件中启动查询方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;id&quot; gorm:&quot;column:id&quot;`</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span></span><br><span class=\"line\">\tTel  <span class=\"type\">string</span> <span class=\"string\">`json:&quot;tel&quot; gorm:&quot;column:tel&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">&#125; <span class=\"comment\">//作用是指到user表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SelectUser selectUser查询</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SelectUser</span><span class=\"params\">(db *gorm.DB, userId <span class=\"type\">int</span>)</span></span> ([]User, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> users []User</span><br><span class=\"line\">\tresult := db.Where(<span class=\"string\">&quot;id = ?&quot;</span>, userId).Find(&amp;users)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(users) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> users, result.Error</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> users, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// updateUser 修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UpdateUser</span><span class=\"params\">(db *gorm.DB, userId <span class=\"type\">int</span>, name <span class=\"type\">string</span>)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user User</span><br><span class=\"line\">\tresult := db.Model(&amp;user).Where(<span class=\"string\">&quot;id = ?&quot;</span>, userId).Update(<span class=\"string\">&quot;name&quot;</span>, name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> result.Error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建记录时出现错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, result.Error</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//修改成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>5.在controllers创建GetUserImpl方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllerspackage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tAPI <span class=\"string\">&quot;demo2/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/model&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/model/dataBase&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReponseJSON</span><span class=\"params\">(errorCode <span class=\"type\">string</span>, errorMsg <span class=\"type\">string</span>, resData <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> API.ApiResponseObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tapiResponseObject := API.ApiResponseObject&#123;&#125;</span><br><span class=\"line\">\tapiResponseObject.SetData(resData)</span><br><span class=\"line\">\tapiResponseObject.SetErrorMsg(errorMsg)</span><br><span class=\"line\">\tapiResponseObject.SetErrorCode(errorCode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> apiResponseObject</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserImpl</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//查询id为1的用户</span></span><br><span class=\"line\">\tStatus, _ := model.SelectUser(dataBase.DB, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Status == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.JSON(http.StatusNotFound, ReponseJSON(API.FAIL.GetCode(), API.FAIL.GetName(), <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印返回值</span></span><br><span class=\"line\">\t\tctx.JSON(http.StatusOK, ReponseJSON(API.SUCCESS.GetCode(), API.SUCCESS.GetName(), Status))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>启动main使用工具访问</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1ovhwstzj30i90ek752.jpg\" /></p>\r\n<p>OK，就完成了一个简单的查询业务！</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/22/post/golang/3-Go%E6%8C%87%E5%8D%97-%E6%B3%9B%E5%9E%8B/",
            "url": "http://example.com/2024/08/22/post/golang/3-Go%E6%8C%87%E5%8D%97-%E6%B3%9B%E5%9E%8B/",
            "title": "3-Go指南-泛型",
            "date_published": "2024-08-22T10:02:07.405Z",
            "content_html": "<h1 id=\"go指南-泛型\">Go指南-泛型</h1>\r\n<h3 id=\"类型参数\">1、类型参数</h3>\r\n<p>可以使用类型参数编写Go函数来处理多种类型。函数的类型参数出现在函数参数之前的方括号之间。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span>[<span class=\"title\">T</span> <span class=\"title\">comparables</span>]<span class=\"params\">(s []T,x T)</span></span> <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\r\n<p>此声明意味着s是满足内置约束条件 <code>comparables</code>的任何类型\r\n<code>T</code>的切片，<code>x</code>也是相同类型的值。</p>\r\n<p><code>comparable</code>是一个有用的约束，它能让我们对任意满足该类型的值使用\r\n== 和！=运算符。</p>\r\n<p>在此示例中，我们使用它将所有切片元素进行比较，直到找到匹配项。该Index函数使用与任何支持比较的类型</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Index 返回 x 在 s 中的下标，未找到则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span>[<span class=\"title\">T</span> <span class=\"title\">comparable</span>]<span class=\"params\">(s []T, x T)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// v 和 x 的类型为 T，它拥有 comparable 可比较的约束，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 因此我们可以使用 ==。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v == x &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Index 可以在整数切片上使用</span></span><br><span class=\"line\">\tsi := []<span class=\"type\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">-10</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Index(si, <span class=\"number\">15</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Index 也可以在字符串切片上使用</span></span><br><span class=\"line\">\tss := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>, <span class=\"string\">&quot;baz&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Index(ss, <span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2  -1</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"泛型类型\">2、泛型类型</h3>\r\n<p>除了泛型函数之外，Go还支持泛型类型。类型可以使用类型参数进行参数化，这对于实现通用数据结构非常有用。</p>\r\n<p>此示例展示了能够保存任意类型值的单链表的简单类型的声明。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List 表示一个可以保存任何类型的值的单链表。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> List[T any] <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tnext *List[T]</span><br><span class=\"line\">\tval  T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/22/post/golang/4-Go%E6%8C%87%E5%8D%97-%E5%B9%B6%E5%8F%91/",
            "url": "http://example.com/2024/08/22/post/golang/4-Go%E6%8C%87%E5%8D%97-%E5%B9%B6%E5%8F%91/",
            "title": "4-Go指南-并发",
            "date_published": "2024-08-22T10:02:03.958Z",
            "content_html": "<h1 id=\"go指南-并发\">Go指南-并发</h1>\r\n<h3 id=\"go协程\">1、Go协程</h3>\r\n<p>Go 程（goroutine）是由 Go 运行时管理的轻量级线程。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go f(x,y,z)</span><br></pre></td></tr></table></figure>\r\n<p>会启动一个新的Go协程并执行</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x,y,z)</span><br></pre></td></tr></table></figure>\r\n<p>f,x,y和z的求值发生在当前的Go协程中，而f的执行发生在新的Go协程中。\r\nGo程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。sync包提供了这种能力，不过在Go中并不经常用到，因为还有其他方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">\t\tfmt.Println(s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tsay(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"信道\">2、信道</h3>\r\n<p>信道是带有类型的管道，你可以通过它用信道操作符<code>&lt;-</code>来发送或者接收值</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch &lt;- v //将v发送至信道ch</span><br><span class=\"line\">v := &lt;-ch //从ch接收值并赋予v</span><br></pre></td></tr></table></figure>\r\n<p>箭头就是数据流的方法</p>\r\n<p>和映射与切片一样，信道在使用前必须创建</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch := make(chan int)</span><br></pre></td></tr></table></figure>\r\n<p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得Go程可以在没有显式的锁或竞态变量的情况下进行同步。</p>\r\n<p>以下实例对切片中的数进行求和，将任务分配给两个Go程。一旦两个Go程完成了它们的计算，它就能算出最终的结果。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(s []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\tsum += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc &lt;- sum <span class=\"comment\">// 发送 sum 到 c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">\tx, y := &lt;-c, &lt;-c <span class=\"comment\">// 从 c 接收</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x, y, x+y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-5 17 12</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>带缓冲的信道</strong></p>\r\n<p>信道可以是<strong>带缓冲的</strong>。将缓冲长度作为第二个参数提供给<code>make</code>来初始化一个带参数的信道：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch := make(chan int,100)</span><br></pre></td></tr></table></figure>\r\n<p>仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接受方会阻塞。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tch &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"range和close\">3、range和close</h3>\r\n<p>发送者可以通过close关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v,ok := &lt;-ch</span><br></pre></td></tr></table></figure>\r\n<p>此时 <code>ok</code> 会被设置为 <code>false</code>。</p>\r\n<p>循环 <code>for i := range c</code>\r\n会不断从信道接收值，直到它被关闭。</p>\r\n<p><strong>注意</strong>：\r\n只应由发送者关闭信道，而不应油接收者关闭。向一个已经关闭的信道发送数据会引发程序\r\npanic。</p>\r\n<p><strong>还要注意</strong>：\r\n信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个\r\n<code>range</code> 循环。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tc &lt;- x</span><br><span class=\"line\">\t\tx, y = y, x+y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"select语句\">4、select语句</h3>\r\n<p>select语句使一个Go程可以等待多个通信操作。</p>\r\n<p>select会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(c, quit <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> c &lt;- x:</span><br><span class=\"line\">\t\t\tx, y = y, x+y</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-quit:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;quit&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(&lt;-c)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tquit &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfibonacci(c, quit)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 1 1 2 3 5 8 13 21 34 quit</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>默认选择</strong></p>\r\n<p>当 <code>select</code>\r\n中的其它分支都没有准备好时，<code>default</code> 分支就会执行。</p>\r\n<p>为了在尝试发送或者接收时不发生阻塞，可使用 <code>default</code>\r\n分支：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> i := &lt;-c:</span><br><span class=\"line\">    <span class=\"comment\">// 使用 i</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 从 c 中接收会阻塞时执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"sync.mutex\">5、sync.Mutex</h3>\r\n<p>我们已经看到信道非常适合在各个Go程间进行通信。</p>\r\n<p>但是如果我们并不需要通信呢？比如说，若我们只是想保证每次只有一个Go程能够访问一个共享的变量，从而避免冲突？</p>\r\n<p>这里涉及的概念叫做 **互斥（mutual*exclusion<strong>，我们通常使用\r\n</strong>互斥锁（Mutex）**这一数据结构来提供这种机制。</p>\r\n<p>Go标准库中提供了 <a\r\nhref=\"https://go-zh.org/pkg/sync/#Mutex\"><code>sync.Mutex</code></a>\r\n互斥锁类型及其两个方法：</p>\r\n<ul>\r\n<li><code>Lock</code></li>\r\n<li><code>Unlock</code></li>\r\n</ul>\r\n<p>我们可以通过在代码前调用 <code>Lock</code> 方法，在代码后调用\r\n<code>Unlock</code> 方法来保证一段代码的互斥执行。参见 <code>Inc</code>\r\n方法。</p>\r\n<p>我们也可以用 <code>defer</code> 语句来保证互斥锁一定会被解锁。参见\r\n<code>Value</code> 方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SafeCounter 是并发安全的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SafeCounter <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    mu sync.Mutex</span><br><span class=\"line\">    v <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Inc 对给定键的计数加一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span></span> lnc(key <span class=\"type\">string</span>)&#123;</span><br><span class=\"line\">    c.muu.Lock()</span><br><span class=\"line\">    <span class=\"comment\">//锁定使得一次只有一个Go协程可以访问映射c.v</span></span><br><span class=\"line\">    c.v[key]++</span><br><span class=\"line\">    c.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Value 返回给定键的计数的当前值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span></span>Vlaue(key <span class=\"type\">string</span>)<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    c.mu.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// 锁定使得一次只有一个 Go 协程可以访问映射 c.v。</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c.v[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := SafeCounter&#123;v: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> c.Inc(<span class=\"string\">&quot;somekey&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\tfmt.Println(c.Value(<span class=\"string\">&quot;somekey&quot;</span>))</span><br><span class=\"line\">&#125;<span class=\"comment\">//1000</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"练习web-爬虫\">练习：Web 爬虫</h2>\r\n<p>在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。</p>\r\n<p>修改 <code>Crawl</code> 函数来并行地抓取 URL，并且保证不重复。</p>\r\n<p><em>提示：</em> 你可以用一个 map 来缓存已经获取的 URL，但是要注意 map\r\n本身并不是并发安全的！</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fetcher <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fetch 返回 URL 所指向页面的 body 内容，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 并将该页面上找到的所有 URL 放到一个切片中。</span></span><br><span class=\"line\">\tFetch(url <span class=\"type\">string</span>) (body <span class=\"type\">string</span>, urls []<span class=\"type\">string</span>, err <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Crawl 用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Crawl</span><span class=\"params\">(url <span class=\"type\">string</span>, depth <span class=\"type\">int</span>, fetcher Fetcher)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 并行地爬取 URL。</span></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 不重复爬取页面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 下面并没有实现上面两种情况：</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> depth &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;found: %s %q\\n&quot;</span>, url, body)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</span><br><span class=\"line\">\t\tCrawl(u, depth<span class=\"number\">-1</span>, fetcher)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tCrawl(<span class=\"string\">&quot;https://golang.org/&quot;</span>, <span class=\"number\">4</span>, fetcher)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fakeFetcher 是待填充结果的 Fetcher。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> fakeFetcher <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*fakeResult</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> fakeResult <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbody <span class=\"type\">string</span></span><br><span class=\"line\">\turls []<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f fakeFetcher)</span></span> Fetch(url <span class=\"type\">string</span>) (<span class=\"type\">string</span>, []<span class=\"type\">string</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> res, ok := f[url]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res.body, res.urls, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not found: %s&quot;</span>, url)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fetcher = fakeFetcher&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;The Go Programming Language&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Packages&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Package fmt&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Package os&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/20/post/golang/02-Go%E6%8C%87%E5%8D%97-%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/",
            "url": "http://example.com/2024/08/20/post/golang/02-Go%E6%8C%87%E5%8D%97-%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/",
            "title": "2-Go指南-方法和接口",
            "date_published": "2024-08-20T13:47:25.218Z",
            "content_html": "<h1 id=\"go指南-方法和接口\">Go指南-方法和接口</h1>\r\n<h3 id=\"方法\">1、方法</h3>\r\n<p>Go没有类。不过你可以为类型定义方法。</p>\r\n<p>方法就是一带特殊的 <strong>接收者</strong> 参数的函数。</p>\r\n<p>方法接收值在它自己的参数列表中，位于\r\n<code>func</code>关键字和方法名之间。</p>\r\n<p>在此例中，<code>Abs</code> 方法拥有一个名字为 <code>v</code>，类型为\r\n<code>Vertex</code> 的接收者。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;<span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法即函数</strong></p>\r\n<p>记住：方法只是个带接收者参数的函数。</p>\r\n<p>现在这个 <code>Abs</code>\r\n的写法就是个正常的函数，功能并没有什么变化。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Abs(v))</span><br><span class=\"line\">&#125;<span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法（续）</strong></p>\r\n<p>你也可以为非结构体类型声明方法。</p>\r\n<p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型\r\n<code>MyFloat</code>。</p>\r\n<p>你只能为在同一个包中定义的接收者类型声明方法，而不能为其它别的包中定义的类型\r\n（包括 <code>int</code> 之类的内置类型）声明方法。</p>\r\n<p>（译注：就是接收者的类型定义和方法声明必须在同一包内。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tfmt.Println(f.Abs())</span><br><span class=\"line\">&#125;<span class=\"comment\">//1.4142135623730951</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指针类型的接收者\">2、指针类型的接收者</h3>\r\n<p>你可以为指针类型的接收者声明方法。</p>\r\n<p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code>\r\n的文法。 （此外，<code>T</code> 本身不能是指针，比如不能是\r\n<code>*int</code>。）</p>\r\n<p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code>\r\n方法。</p>\r\n<p>指针接收者的方法可以修改接收者指向的值（如这里的 <code>Scale</code>\r\n所示）。\r\n由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</p>\r\n<p>试着移除第 16 行 <code>Scale</code> 函数声明中的\r\n<code>*</code>，观察此程序的行为如何变化。</p>\r\n<p>若使用值接收者，那么 <code>Scale</code> 方法会对原始\r\n<code>Vertex</code>\r\n值的副本进行操作。（对于函数的其它参数也是如此。）<code>Scale</code>\r\n方法必须用指针接收者来更改 <code>main</code> 函数中声明的\r\n<code>Vertex</code> 的值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 50   (v Vertex)==&gt;  5</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指针与函数\">3、指针与函数</h3>\r\n<p>现在我们要把 <code>Abs</code> 和 <code>Scale</code>\r\n方法重写为函数。</p>\r\n<p>同样，先试着移除掉第 16 的\r\n<code>*</code>，你能看出程序行为改变的原因吗？\r\n要怎样做才能让该示例顺利通过编译？</p>\r\n<p>（如果你不确定，继续往下看。） //报错</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scale</span><span class=\"params\">(v *Vertex, f <span class=\"type\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tScale(&amp;v, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(Abs(v))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//50</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法与指针重定向</strong></p>\r\n<p>比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">ScaleFunc(v, 5)  // 编译错误！</span><br><span class=\"line\">ScaleFunc(&amp;v, 5) // OK</span><br></pre></td></tr></table></figure>\r\n<p>而接收者为指针的的方法被调用时，接收者既能是值又能是指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">v.Scale(5)  // OK</span><br><span class=\"line\">p := &amp;v</span><br><span class=\"line\">p.Scale(10) // OK</span><br></pre></td></tr></table></figure>\r\n<p>对于语句 <code>v.Scale(5)</code> 来说，即便 <code>v</code>\r\n是一个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于\r\n<code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句\r\n<code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ScaleFunc</span><span class=\"params\">(v *Vertex, f <span class=\"type\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">2</span>)</span><br><span class=\"line\">\tScaleFunc(&amp;v, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;Vertex&#123;<span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tp.Scale(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tScaleFunc(p, <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(v, p)</span><br><span class=\"line\">&#125;<span class=\"comment\">//&#123;60 80&#125; &amp;&#123;96 72&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法与指针重定向（续）</strong></p>\r\n<p>反之也一样：</p>\r\n<p>接受一个值作为参数的函数必须接受一个指定类型的值：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">fmt.Println(AbsFunc(v))  // OK</span><br><span class=\"line\">fmt.Println(AbsFunc(&amp;v)) // 编译错误！</span><br></pre></td></tr></table></figure>\r\n<p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">fmt.Println(v.Abs()) // OK</span><br><span class=\"line\">p := &amp;v</span><br><span class=\"line\">fmt.Println(p.Abs()) // OK</span><br></pre></td></tr></table></figure>\r\n<p>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为\r\n<code>(*p).Abs()</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AbsFunc</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">\tfmt.Println(AbsFunc(v))</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;Vertex&#123;<span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tfmt.Println(p.Abs())</span><br><span class=\"line\">\tfmt.Println(AbsFunc(*p))</span><br><span class=\"line\">&#125;  <span class=\"comment\">// 5 5 5 5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>选择值或指针作为接收者</strong></p>\r\n<p>使用指针接收者的原因有二：</p>\r\n<p>首先，方法能够修改其接收者指向的值。</p>\r\n<p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样会更加高效。</p>\r\n<p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为\r\n<code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p>\r\n<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。\r\n（我们会在接下来几页中明白为什么。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := &amp;Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;缩放前：%+v，绝对值：%v\\n&quot;</span>, v, v.Abs())</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;缩放后：%+v，绝对值：%v\\n&quot;</span>, v, v.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//缩放前：&amp;&#123;X:3 Y:4&#125;，绝对值：5</span></span><br><span class=\"line\"><span class=\"comment\">//缩放后：&amp;&#123;X:15 Y:20&#125;，绝对值：25</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"接口\">4、接口</h3>\r\n<p><strong>接口类型</strong> 的定义为一组方法签名。</p>\r\n<p>接口类型的变量可以持有任何实现了这些方法的值。</p>\r\n<p><strong>注意:</strong> 示例代码的第 22 行存在一个错误。由于\r\n<code>Abs</code> 方法只为 <code>*Vertex</code> （指针类型）定义，因此\r\n<code>Vertex</code>（值类型）并未实现 <code>Abser</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Abser <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAbs() <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a Abser</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = f  <span class=\"comment\">// a MyFloat 实现了 Abser</span></span><br><span class=\"line\">\ta = &amp;v <span class=\"comment\">// a *Vertex 实现了 Abser</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下面一行，v 是一个 Vertex（而不是 *Vertex）</span></span><br><span class=\"line\">\t<span class=\"comment\">// 所以没有实现 Abser。</span></span><br><span class=\"line\">\ta = v  <span class=\"comment\">//&amp;v</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(a.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>接口与隐式实现</strong></p>\r\n<p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有\"implements\"关键字.</p>\r\n<p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此方法表示类型 T 实现了接口 I，不过我们并不需要显式声明这一点。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t T)</span></span> M() &#123;</span><br><span class=\"line\">\tfmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = T&#123;<span class=\"string\">&quot;hello&quot;</span>&#125;</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>接口值</strong></p>\r\n<p>接口也是值。它们可以像其他值一样传递。</p>\r\n<p>接口值可以用作函数的参数或返回值。</p>\r\n<p>在内部，接口值可以看做包含值和具体类型的元组。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（Value ， Type）</span><br></pre></td></tr></table></figure>\r\n<p>接口值保存了一个具体底层类型的具体值。</p>\r\n<p>接口值调用方法时会执行其底层类型的同名方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    S <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *T)</span></span> M()&#123;</span><br><span class=\"line\">    fmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> F <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(f F)</span></span> M()&#123;</span><br><span class=\"line\">    fmt.Println(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i I</span><br><span class=\"line\">    i = &amp;T&#123;<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">    </span><br><span class=\"line\">    i = F(math.Pi)</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&amp;&#123;Hello&#125;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//Hello</span></span><br><span class=\"line\"><span class=\"comment\">//(3.141592653589793, main.F)</span></span><br><span class=\"line\"><span class=\"comment\">//3.141592653589793</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>底层值为nil的接口值</strong></p>\r\n<p>即便接口内的具体值为nil，方法仍然会被nil接收者调用。</p>\r\n<p>在一些语言中，这会触发一个空指针\r\n异常，但在Go中通常会写一些方法来优雅的处理它（如本例的M方法）</p>\r\n<p>注意：保存了nil具体值的接口其本身并不为nil</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    S <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> M()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i I</span><br><span class=\"line\">    vat t *T</span><br><span class=\"line\">    i = t</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=&amp;T&#123;<span class=\"string\">&quot;hello&quot;</span>&#125;</span><br><span class=\"line\">    \tdescribe(i)</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i I)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&lt;nil&gt;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//(&amp;&#123;hello&#125;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>nil接口值</strong></p>\r\n<p>nil接口值既不保存吧值也不保存具体类型。</p>\r\n<p>为nil接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个<strong>具体</strong>方法的类型</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I</span><br><span class=\"line\">\tdescibe(i)</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">descibe</span><span class=\"params\">(i I)</span></span>&#123;</span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&lt;nil&gt;, &lt;nil&gt;)</span><br><span class=\"line\">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class=\"line\">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x48fff9]</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox1786886251/prog.go:12 +0x19</span><br></pre></td></tr></table></figure>\r\n<p><strong>空接口</strong></p>\r\n<p>指定了零个方法的接口值被称为 ： 空接口</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface&#123;&#125;</span><br></pre></td></tr></table></figure>\r\n<p>空接口可以保存任何类型的值。（因为每个类型都至少实现了零个方法。）</p>\r\n<p>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code>可接受类型为<code>interface&#123;&#125;</code>的任意数量的参数。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>()</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"number\">42</span></span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&lt;nil&gt;, &lt;nil&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">//(42, int)</span></span><br><span class=\"line\"><span class=\"comment\">//(hello, string)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型断言\">5、类型断言</h3>\r\n<p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t := i.(T)  <span class=\"comment\">//该语句断言接口值i保存了具体类型T，并将其底层类型为T的值赋予变量t。 若i并未保存T类型的值，该语句就会出发一个 panic</span></span><br></pre></td></tr></table></figure>\r\n<p>为了<strong>判断</strong>一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t,ok := i.(T) </span><br><span class=\"line\"><span class=\"comment\">// 若 i 保存了一个 T，那么 t 将会是其底层值，而ok 为true</span></span><br><span class=\"line\"><span class=\"comment\">//否则，OK 将为 false 而 t 将为 T类型的零值，程序并不会产生panic</span></span><br></pre></td></tr></table></figure>\r\n<p>请注意这种语法和读取一个映射时的相同之处</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    s:=i.(String)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">    </span><br><span class=\"line\">    s, ok := i.(<span class=\"type\">string</span>)</span><br><span class=\"line\">\tfmt.Println(s, ok)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, ok := i.(<span class=\"type\">float64</span>)</span><br><span class=\"line\">\tfmt.Println(f, ok)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf = i.(<span class=\"type\">float64</span>) <span class=\"comment\">// panic</span></span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">hello true</span><br><span class=\"line\">0 false</span><br><span class=\"line\">panic: interface conversion: interface &#123;&#125; is string, not float64</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox106650246/prog.go:17 +0x14f</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型选择\">6、类型选择</h3>\r\n<p><strong>类型选择</strong>\r\n是一种按顺序从几个类型断言中选择分支的结构。</p>\r\n<p>类型选择与一般的switch语句相似，不过类型选择中的case为类型（非值），他们针对给定接口值所存储的值的类型进行比较。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> v := i.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> T:</span><br><span class=\"line\">    <span class=\"comment\">//v的类型为T</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> S:</span><br><span class=\"line\">    <span class=\"comment\">//v的类型为S</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 没有匹配，v 与 i 的类型相同</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>类型选择中的声明与类型断言i.(T)的语法相同，只是具体类型T被替换成了关键字type。</p>\r\n<p>此选择语句判断接口值i保存的值类型是T还是S。在T或S的情况下，变量V会分别按照T或S类型保存i拥有的值。在默认（即没有匹配）的情况下，变量v与i的接口类型和值相同。</p>\r\n<h3 id=\"stringer\">7、Stringer</h3>\r\n<p><code>fmt</code>包中定义的<code>Stringer</code>是最普遍的接口之一</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Stringer interface&#123;</span><br><span class=\"line\">\tString() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>Stringer</code>\r\n是一个可以用字符串描述自己的类型。<code>fmt</code>\r\n包（还有很多包）都通过此接口来打印值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := Person&#123;<span class=\"string\">&quot;Arthur Dent&quot;</span>, <span class=\"number\">42</span>&#125;</span><br><span class=\"line\">\tz := Person&#123;<span class=\"string\">&quot;Zaphod Beeblebrox&quot;</span>, <span class=\"number\">9001</span>&#125;</span><br><span class=\"line\">\tfmt.Println(a, z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"错误\">8、错误</h3>\r\n<p>Go程序使用<code>error</code>值来表示错误状态。</p>\r\n<p>与<code>fmt.Stringer</code>类似，<code>error</code>类型是一个内建接口：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">\tError() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包也会根据对\r\n<code>error</code> 的实现来打印值。）</p>\r\n<p>通常函数会返回一个 <code>error</code>\r\n值，调用它的代码应当判断这个错误是否等于 <code>nil</code>\r\n来进行错误处理。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i, err := strconv.Atoi(&quot;42&quot;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;couldn&#x27;t convert number: %v\\n&quot;, err)</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(&quot;Converted integer:&quot;, i)</span><br></pre></td></tr></table></figure>\r\n<p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code>\r\n表示失败。</p>\r\n<h3 id=\"readers\">9、Readers</h3>\r\n<p><code>io</code>包指定了<code>io.Readers</code>接口，它表示数据流的读取端。</p>\r\n<p>Go标准库包含了该接口的<a\r\nhref=\"https://cs.opensource.google/search?q=Read(\\w%2B\\s%5B%5Dbyte)&amp;ss=go%2Fgo\">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p>\r\n<p><code>io.Reader</code>接口有一个<code>Read</code>方法：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T)</span></span>Read(b []<span class=\"type\">byte</span>)(n <span class=\"type\">int</span>,err <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\r\n<p><code>Read</code>用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个<code>io.EOF</code>错误。</p>\r\n<p>示例代码创建了一个 <a\r\nhref=\"https://go-zh.org/pkg/strings/#Reader\"><code>strings.Reader</code></a>\r\n并以每次 8 字节的速度读取它的输出。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := strings.NewReader(<span class=\"string\">&quot;Hello, Reader!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, err := r.Read(b)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;n = %v err = %v b = %v\\n&quot;</span>, n, err, b)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;b[:n] = %q\\n&quot;</span>, b[:n])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：Reader</strong></p>\r\n<p>实现一个 <code>Reader</code> 类型，它产生一个 ASCII 字符\r\n<code>'A'</code> 的无限流。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyReader 是一个自定义的 io.Reader，它产生一个 ASCII 字符 &#x27;A&#x27; 的无限流。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyReader <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read 方法实现了 io.Reader 接口，从 MyReader 中读取数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 它将 &#x27;A&#x27; 字符写入到提供的缓冲区中，并返回写入的字节数和 nil 作为错误。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r MyReader)</span></span> Read(p []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 写入 &#x27;A&#x27; 字符到提供的缓冲区 p 中，最多写入 1 个字节。</span></span><br><span class=\"line\">\tn := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n &lt; <span class=\"built_in\">len</span>(p) &amp;&amp; r.hasMore() &#123;</span><br><span class=\"line\">\t\tp[n] = <span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">\t\tn++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果没有更多的数据可写，返回 io.EOF 表示流结束。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !r.hasMore() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n, io.EOF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasMore 模拟无限数据流的逻辑，这里总是返回 true 来表示有更多数据。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r MyReader)</span></span> hasMore() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建 MyReader 的实例。</span></span><br><span class=\"line\">\treader := MyReader&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个 Scanner 来读取 MyReader 的数据。</span></span><br><span class=\"line\">\tscanner := bufio.NewScanner(&amp;reader)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印前 10 个字符，每个字符后跟一个换行符。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> scanner.Scan() &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(scanner.Text(), <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印可能的错误。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := scanner.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：rot13Reader</strong></p>\r\n<p>有种常见的模式是一个 <a\r\nhref=\"https://go-zh.org/pkg/io/#Reader\"><code>io.Reader</code></a>\r\n包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p>\r\n<p>例如，<a\r\nhref=\"https://go-zh.org/pkg/compress/gzip/#NewReader\"><code>gzip.NewReader</code></a>\r\n函数接受一个\r\n<code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了\r\n<code>io.Reader</code> 的\r\n<code>*gzip.Reader</code>（解压后的数据流）。</p>\r\n<p>编写一个实现了 <code>io.Reader</code> 并从另一个\r\n<code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用\r\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUk9UMTM=\">rot13</span>\r\n代换密码对数据流进行修改。</p>\r\n<p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code>\r\n方法以满足 <code>io.Reader</code>。</p>\r\n<p>有种常见的模式是一个 <a\r\nhref=\"https://go-zh.org/pkg/io/#Reader\"><code>io.Reader</code></a>\r\n包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p>\r\n<p>例如，<a\r\nhref=\"https://go-zh.org/pkg/compress/gzip/#NewReader\"><code>gzip.NewReader</code></a>\r\n函数接受一个\r\n<code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了\r\n<code>io.Reader</code> 的\r\n<code>*gzip.Reader</code>（解压后的数据流）。</p>\r\n<p>编写一个实现了 <code>io.Reader</code> 并从另一个\r\n<code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用\r\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUk9UMTM=\">rot13</span>\r\n代换密码对数据流进行修改。</p>\r\n<p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code>\r\n方法以满足 <code>io.Reader</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rot13Reader 是一个实现了 io.Reader 的类型，它包装了另一个 io.Reader 并对读取的数据应用 rot13 加密。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> rot13Reader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr io.Reader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rot13 函数将单个字符进行 rot13 替换。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rot13</span><span class=\"params\">(b <span class=\"type\">byte</span>)</span></span> <span class=\"type\">byte</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class=\"string\">&#x27;z&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;a&#x27;</span> + (b-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">13</span>)%<span class=\"number\">26</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class=\"string\">&#x27;Z&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;A&#x27;</span> + (b-<span class=\"string\">&#x27;A&#x27;</span>+<span class=\"number\">13</span>)%<span class=\"number\">26</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b <span class=\"comment\">// 非字母字符不变</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read 方法实现了 io.Reader 接口，从 rot13Reader 中读取数据并应用 rot13 加密。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rot13Reader)</span></span> Read(p []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 从底层的 io.Reader 中读取数据。</span></span><br><span class=\"line\">\tn, err := r.r.Read(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 应用 rot13 加密。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tp[i] = rot13(p[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := strings.NewReader(<span class=\"string\">&quot;Lbh penpxrq gur pbqr!&quot;</span>)</span><br><span class=\"line\">\tr := rot13Reader&#123;s&#125;</span><br><span class=\"line\">\tio.Copy(os.Stdout, &amp;r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"图像\">10、图像</h3>\r\n<p><a href=\"https://go-zh.org/pkg/image/#Image\"><code>image</code></a>\r\n包定义了 <code>Image</code> 接口：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package image</span><br><span class=\"line\"></span><br><span class=\"line\">type Image interface &#123;</span><br><span class=\"line\">    ColorModel() color.Model</span><br><span class=\"line\">    Bounds() Rectangle</span><br><span class=\"line\">    At(x, y int) color.Color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注意:</strong> <code>Bounds</code> 方法的返回值\r\n<code>Rectangle</code> 实际上是一个 <a\r\nhref=\"https://go-zh.org/pkg/image/#Rectangle\"><code>image.Rectangle</code></a>，它在\r\n<code>image</code> 包中声明。</p>\r\n<p>（请参阅<a\r\nhref=\"https://go-zh.org/pkg/image/#Image\">文档</a>了解全部信息。）</p>\r\n<p><code>color.Color</code> 和 <code>color.Model</code>\r\n类型也是接口，但是通常因为直接使用预定义的实现 <code>image.RGBA</code>\r\n和 <code>image.RGBAModel</code> 而被忽视了。这些接口和类型由 <a\r\nhref=\"https://go-zh.org/pkg/image/color/\"><code>image/color</code></a>\r\n包定义。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := image.NewRGBA(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">\tfmt.Println(m.Bounds())</span><br><span class=\"line\">\tfmt.Println(m.At(<span class=\"number\">0</span>, <span class=\"number\">0</span>).RGBA())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(0,0)-(100,100)</span></span><br><span class=\"line\"><span class=\"comment\">//0 0 0 0</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：图像</strong></p>\r\n<p>还记得之前编写的<a\r\nhref=\"https://tour.go-zh.org/moretypes/18\">图片生成器</a>\r\n吗？我们再来编写另外一个，不过这次它将会返回一个\r\n<code>image.Image</code> 的实现而非一个数据切片。</p>\r\n<p>定义你自己的 <code>Image</code> 类型，实现<a\r\nhref=\"https://go-zh.org/pkg/image/#Image\">必要的方法</a>并调用\r\n<code>pic.ShowImage</code>。</p>\r\n<p><code>Bounds</code> 应当返回一个 <code>image.Rectangle</code> ，例如\r\n<code>image.Rect(0, 0, w, h)</code>。</p>\r\n<p><code>ColorModel</code> 应当返回 <code>color.RGBAModel</code>。</p>\r\n<p><code>At</code> 应当返回一个颜色。上一个图片生成器的值 <code>v</code>\r\n对应于此次的 <code>color.RGBA&#123;v, v, 255, 255&#125;</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;image&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image/color&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Image 是一个自定义的 image.Image 类型。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Image <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth  <span class=\"type\">int</span></span><br><span class=\"line\">\theight <span class=\"type\">int</span></span><br><span class=\"line\">\tpixels []color.RGBA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewImage 创建一个新的 Image 实例，给定宽度和高度。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewImage</span><span class=\"params\">(width, height <span class=\"type\">int</span>)</span></span> *Image &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Image&#123;</span><br><span class=\"line\">\t\twidth:  width,</span><br><span class=\"line\">\t\theight: height,</span><br><span class=\"line\">\t\tpixels: <span class=\"built_in\">make</span>([]color.RGBA, width*height),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bounds 返回 Image 的边界。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> Bounds() image.Rectangle &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, i.width, i.height)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ColorModel 返回 Image 使用的颜色模型。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> ColorModel() color.Model &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> color.RGBAModel</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// At 返回 Image 在 (x, y) 坐标处的像素颜色。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> At(x, y <span class=\"type\">int</span>) color.Color &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 检查坐标是否在图像的边界内。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !(image.Pt(x, y).In(i.Bounds())) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> color.RGBA&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算像素在切片中的索引。</span></span><br><span class=\"line\">\tindex := y*i.width + x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i.pixels[index]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set 设置 Image 在 (x, y) 坐标处的像素颜色。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> Set(x, y <span class=\"type\">int</span>, c color.RGBA) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> image.Pt(x, y).In(i.Bounds()) &#123;</span><br><span class=\"line\">\t\ti.pixels[y*i.width+x] = c</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := NewImage(<span class=\"number\">640</span>, <span class=\"number\">480</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 这里可以添加代码来设置 Image 的像素颜色。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpic.ShowImage(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/20/post/golang/01-Go%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2024/08/20/post/golang/01-Go%E6%8C%87%E5%8D%97/",
            "title": "1-Go指南",
            "date_published": "2024-08-20T06:09:07.406Z",
            "content_html": "<h1 id=\"go指南-基础\">Go指南-基础</h1>\r\n<h2 id=\"基础---包变量与函数\">基础---包、变量与函数</h2>\r\n<h3 id=\"包\">1、包</h3>\r\n<p>每个Go程序都是由包构成。</p>\r\n<p>程序冲main包开始运行。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;我最喜欢的数字是 &quot;</span>, rand.Intn(<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"导入\">2、导入</h3>\r\n<p>“分组”形式的导入语句</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"导出名\">3、导出名</h3>\r\n<p>在Go中，如果一个名字以大写字母开头，那么它就是已导出的。例如，<code>Pizza</code>就是已导出。<code>Pi</code>也同样，它导出字math包。</p>\r\n<p>在导入一个包时，你只能引用其中已导出的名字。任何[未导出]的名字在该包外均无法访问。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(math.Pi)   <span class=\"comment\">//报错</span></span><br><span class=\"line\">    fmt.Println(math.Pi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数\">4、函数</h3>\r\n<p>函数可接收零个或者多个参数</p>\r\n<p>在本例中，<code>add</code>接受两个int类型的参数。</p>\r\n<p>注意类型在变量名的<strong>后面</strong></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x <span class=\"type\">int</span>, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(add(<span class=\"number\">42</span>, <span class=\"number\">13</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"type\">int</span>, y <span class=\"type\">int</span>  ==&gt;  x,y <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多返回值\">5、多返回值</h3>\r\n<p>函数可以返回任意数量的返回值</p>\r\n<p><code>swap</code>函数返回了两个字符串</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x, y <span class=\"type\">string</span>)</span></span> (<span class=\"type\">string</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> y, x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta, b := swap(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"带名字的返回值\">6、带名字的返回值</h3>\r\n<p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。</p>\r\n<p>返回值的命名应当能反应其含义，它可以作为文档使用。</p>\r\n<p>没有参数的 <code>return</code>\r\n语句会直接返回已命名的返回值，也就是「裸」返回值。</p>\r\n<p>裸返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(sum <span class=\"type\">int</span>)</span></span> (x, y <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tx = sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\ty = sum - x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(split(<span class=\"number\">17</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"变量\">7、变量</h3>\r\n<p><code>var</code>\r\n语句用于声明一系列变量。和函数的参数列表一样，类型在最后。</p>\r\n<p>如例中所示，<code>var</code> 语句可以出现在包或函数的层级。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c, python, java <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(i, c, python, java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"变量的初始化\">8、变量的初始化</h3>\r\n<p>变量声明可以包含初始值，每个变量对应一个。</p>\r\n<p>如果提供了初始值，则类型可以省略；变量会从初始值中推断出类型。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i, j <span class=\"type\">int</span> = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c, python, java = <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"string\">&quot;no!&quot;</span></span><br><span class=\"line\">\tfmt.Println(i, j, c, python, java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  1 2  true false no!</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"短变量声明\">9、短变量声明</h3>\r\n<p>在函数中，短赋值语句 <code>:=</code> 可在隐式确定类型的\r\n<code>var</code> 声明中使用。</p>\r\n<p>函数外的每个语句都 <strong>必须</strong>\r\n以关键字开始（<code>var</code>、<code>func</code> 等），因此\r\n<code>:=</code> 结构不能在函数外使用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i, j <span class=\"type\">int</span> = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">\tk := <span class=\"number\">3</span></span><br><span class=\"line\">\tc, python, java := <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"string\">&quot;no!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(i, j, k, c, python, java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  1 2 3 true false no!</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"基本类型\">10、基本类型</h3>\r\n<p>Go的基本类型有</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br><span class=\"line\"></span><br><span class=\"line\">int  int8  int16  int32  int64</span><br><span class=\"line\">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class=\"line\"></span><br><span class=\"line\">byte // uint8 的别名</span><br><span class=\"line\"></span><br><span class=\"line\">rune // int32 的别名</span><br><span class=\"line\">     // 表示一个 Unicode 码位</span><br><span class=\"line\"></span><br><span class=\"line\">float32 float64</span><br><span class=\"line\"></span><br><span class=\"line\">complex64 complex128</span><br></pre></td></tr></table></figure>\r\n<p>本例展示了几种类型的变量。\r\n和导入语句一样，变量声明也可以「分组」成一个代码块。</p>\r\n<p><code>int</code>、<code>uint</code> 和 <code>uintptr</code> 类型在\r\n32-位系统上通常为 32-位宽，在 64-位系统上则为\r\n64-位宽。当你需要一个整数值时应使用 <code>int</code> 类型，\r\n除非你有特殊的理由使用固定大小或无符号的整数类型。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math/cmplx&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tToBe   <span class=\"type\">bool</span>       = <span class=\"literal\">false</span></span><br><span class=\"line\">\tMaxInt <span class=\"type\">uint64</span>     = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">64</span> - <span class=\"number\">1</span></span><br><span class=\"line\">\tz      <span class=\"type\">complex128</span> = cmplx.Sqrt(<span class=\"number\">-5</span> + <span class=\"number\">12i</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, ToBe, ToBe)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, MaxInt, MaxInt)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, z, z)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"零值\">11、零值</h3>\r\n<p>没有明确初始化的变量声明会被赋予对应类型的\r\n<strong>零值</strong>。</p>\r\n<p>零值是：</p>\r\n<ul>\r\n<li>数值类型为 <code>0</code>，</li>\r\n<li>布尔类型为 <code>false</code>，</li>\r\n<li>字符串为 <code>\"\"</code>（空字符串）。</li>\r\n</ul>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"type\">float64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"type\">string</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%v %v %v %q\\n&quot;</span>, i, f, b, s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型转换\">12、类型转换</h3>\r\n<p>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型\r\n<code>T</code>。</p>\r\n<p>一些数值类型的转换：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i int = 42</span><br><span class=\"line\">var f float64 = float64(i)</span><br><span class=\"line\">var u uint = uint(f)</span><br></pre></td></tr></table></figure>\r\n<p>或者，更加简短的形式：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42</span><br><span class=\"line\">f := float64(i)</span><br><span class=\"line\">u := uint(f)</span><br></pre></td></tr></table></figure>\r\n<p>与 C 不同的是，Go\r\n在不同类型的项之间赋值时需要显式转换。试着移除例子中的\r\n<code>float64</code> 或 <code>uint</code>\r\n的类型转换，看看会发生什么。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x, y <span class=\"type\">int</span> = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"type\">float64</span> = math.Sqrt(<span class=\"type\">float64</span>(x*x + y*y))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z <span class=\"type\">uint</span> = <span class=\"type\">uint</span>(f)</span><br><span class=\"line\">\tfmt.Println(x, y, z)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型推断\">14、类型推断</h3>\r\n<p>在声明一个变量而不指定其类型时（即使用不带类型的 <code>:=</code> 语法\r\n<code>var =</code> 表达式语法），变量的类型会通过右值推断出来。</p>\r\n<p>当声明的右值确定了类型时，新变量的类型与其相同：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i int</span><br><span class=\"line\">j := i // j 也是一个 int</span><br></pre></td></tr></table></figure>\r\n<p>不过当右边包含未指明类型的数值常量时，新变量的类型就可能是\r\n<code>int</code>、<code>float64</code> 或 <code>complex128</code>\r\n了，这取决于常量的精度：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42           // int</span><br><span class=\"line\">f := 3.142        // float64</span><br><span class=\"line\">g := 0.867 + 0.5i // complex128</span><br></pre></td></tr></table></figure>\r\n<p>试着修改示例代码中 <code>v</code>\r\n的初始值，并观察它是如何影响类型的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := <span class=\"number\">42</span> <span class=\"comment\">// 修改这里看看！</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;v is of type %T\\n&quot;</span>, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"常量\">15、常量</h3>\r\n<p>常量的声明与变量类似，只不过使用 <code>const</code> 关键字。</p>\r\n<p>常量可以是字符、字符串、布尔值或数值。</p>\r\n<p>常量不能用 <code>:=</code> 语法声明。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> World = <span class=\"string\">&quot;世界&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello&quot;</span>, World)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Happy&quot;</span>, Pi, <span class=\"string\">&quot;Day&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Truth = <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Go rules?&quot;</span>, Truth)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"数值常量\">16、数值常量</h3>\r\n<p>数值常量是高精度的 <strong>值</strong>。</p>\r\n<p>一个未指定类型的常量由上下文来决定其类型。</p>\r\n<p>再试着一下输出 <code>needInt(Big)</code> 吧。</p>\r\n<p>（<code>int</code> 类型可以存储最大 64\r\n位的整数，根据平台不同有时会更小。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 将 1 左移 100 位来创建一个非常大的数字</span></span><br><span class=\"line\">\t<span class=\"comment\">// 即这个数的二进制是 1 后面跟着 100 个 0</span></span><br><span class=\"line\">\tBig = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"comment\">// 再往右移 99 位，即 Small = 1 &lt;&lt; 1，或者说 Small = 2</span></span><br><span class=\"line\">\tSmall = Big &gt;&gt; <span class=\"number\">99</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">needInt</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123; <span class=\"keyword\">return</span> x*<span class=\"number\">10</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">needFloat</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * <span class=\"number\">0.1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(needInt(Small))</span><br><span class=\"line\">\tfmt.Println(needFloat(Small))</span><br><span class=\"line\">\tfmt.Println(needFloat(Big))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"基础---流程控制语句\">基础---流程控制语句</h2>\r\n<h3 id=\"for循环\">1、for循环</h3>\r\n<p>Go中只有一种循环，for循环</p>\r\n<p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：</p>\r\n<ul>\r\n<li>初始化语句：在第一次迭代前执行</li>\r\n<li>条件表达式：在每次迭代前求值</li>\r\n<li>后置语句：在每次迭代的结尾执行</li>\r\n</ul>\r\n<p>初始化语句通常为一句短变量声明，该变量声明仅在 <code>for</code>\r\n语句的作用域中可见。</p>\r\n<p>一旦条件表达式求值为 <code>false</code>，循环迭代就会终止。</p>\r\n<p><strong>注意</strong>：和 C、Java、JavaScript 之类的语言不同，Go 的\r\n<code>for</code> 语句后面的三个构成部分外没有小括号， 大括号\r\n<code>&#123; &#125;</code> 则是必须的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++&#123;</span><br><span class=\"line\">        sum+=i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句和后置语句是可选的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; sum &lt; <span class=\"number\">1000</span>; &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>for 是 Go 中的「while」</strong></p>\r\n<p>此时你可以去掉分号，因为 C 的 <code>while</code> 在 Go 中叫做\r\n<code>for</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sum &lt; <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>无限循环</strong></p>\r\n<p>如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"if-判断\">2、if 判断</h3>\r\n<p>Go 的 <code>if</code> 语句与 <code>for</code>\r\n循环类似，表达式外无需小括号 <code>( )</code>，而大括号 <code>&#123; &#125;</code>\r\n则是必须的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sqrt(-x) + <span class=\"string\">&quot;i&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sqrt(<span class=\"number\">2</span>), sqrt(<span class=\"number\">-4</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>if 和简短语句</strong></p>\r\n<p>和 <code>for</code> 一样，<code>if</code>\r\n语句可以在条件表达式前执行一个简短语句。</p>\r\n<p>该语句声明的变量作用域仅在 <code>if</code> 之内。</p>\r\n<p>（在最后的 <code>return</code> 语句处使用 <code>v</code> 看看。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>if 和 else</strong></p>\r\n<p>在 <code>if</code> 的简短语句中声明的变量同样可以在对应的任何\r\n<code>else</code> 块中使用。</p>\r\n<p>（在 <code>main</code> 的 <code>fmt.Println</code> 调用开始前，两次对\r\n<code>pow</code> 的调用均已执行并返回其各自的结果。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%g &gt;= %g\\n&quot;</span>, v, lim)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// can&#x27;t use v here, though</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习</strong></p>\r\n<p>为了练习函数与循环，我们来实现一个平方根函数：给定一个数\r\nx，我们需要找到一个数 z 使得 z² 尽可能地接近 x。</p>\r\n<p>计算机通常使用循环来计算 x 的平方根。从某个猜测的值 z\r\n开始，我们可以根据 z² 与 x 的近似度来改进 z，产生一个更好的猜测：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z -= (z*z - x) / (2*z)</span><br></pre></td></tr></table></figure>\r\n<p>重复调整的过程，猜测的结果会越来越精确，得到的答案也会尽可能接近实际的平方根。</p>\r\n<p>请在提供的 <code>func Sqrt</code>\r\n中实现它。无论输入是什么，可以先猜测 z 为 1。 首先，重复计算 10\r\n次并连续打印每次的 z 值。观察对于不同的 x 值（1、2、3 ...），\r\n你得到的答案是如何逼近结果的，以及猜测改进的速度有多快。</p>\r\n<p>提示：用类型转换或浮点数语法来声明并初始化一个浮点数值：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z := 1.0</span><br><span class=\"line\">z := float64(1)</span><br></pre></td></tr></table></figure>\r\n<p>然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。\r\n观察迭代次数大于还是小于 10。尝试改变 z 的初始猜测，如 x 或 x/2。\r\n你的函数结果与标准库中的 <a\r\nhref=\"https://go-zh.org/pkg/math/#Sqrt\">math.Sqrt</a> 有多接近？</p>\r\n<p>（ <strong>注</strong>： 如果你对该算法的细节感兴趣，上面的 z² − x 是\r\nz² 到它所要到达的值（即 x） 的距离，除数 2z 为 z² 的导数，我们通过 z²\r\n的变化速度来改变 z 的调整量。 这种通用方法叫做<a\r\nhref=\"https://zh.wikipedia.org/wiki/牛顿法\">牛顿法</a>，\r\n它对很多函数，特别是平方根而言非常有效。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\tz := x/<span class=\"number\">2.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++  &#123;</span><br><span class=\"line\">\t\tz1 := (z+x/z) /<span class=\"number\">2</span>  <span class=\"comment\">//牛顿法更新法则</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;迭代 %d,z = %f\\n&quot;</span>,i+<span class=\"number\">1</span>,z1)</span><br><span class=\"line\">\t\tz = z1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(Sqrt(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"switch分支\">3、switch分支</h3>\r\n<p><code>switch</code> 语句是编写一连串 <code>if - else</code>\r\n语句的简便方法。它运行第一个 <code>case</code> 值\r\n值等于条件表达式的子句。</p>\r\n<p>Go 的 <code>switch</code> 语句类似于 C、C++、Java、JavaScript 和 PHP\r\n中的，不过 Go 只会运行选定的 <code>case</code>，而非之后所有的\r\n<code>case</code>。 在效果上，Go 的做法相当于这些语言中为每个\r\n<code>case</code> 后面自动添加了所需的 <code>break</code> 语句。在 Go\r\n中，除非以 <code>fallthrough</code> 语句结束，否则分支会自动终止。 Go\r\n的另一点重要的不同在于 <code>switch</code> 的 <code>case</code>\r\n无需为常量，且取值不限于整数。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;Go 运行的系统环境：&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os := runtime.GOOS; os &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;darwin&quot;</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;macOS.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;linux&quot;</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Linux.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// freebsd, openbsd,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// plan9, windows...</span></span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s.\\n&quot;</span>, os)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>switch的求值顺序</strong></p>\r\n<p>switch的case语句从上到下顺次执行，直到匹配成功时停止。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;周六是哪天？&quot;</span>)</span><br><span class=\"line\">\ttoday := time.Now().Weekday()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> time.Saturday &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;今天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;明天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;后天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;很多天后。&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>无条件switch</strong></p>\r\n<p>无条件的 <code>switch</code> 同 <code>switch true</code> 一样。</p>\r\n<p>这种形式能将一长串 <code>if-then-else</code> 写得更加清晰。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tt := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">12</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;早上好！&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">17</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;下午好！&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;晚上好！&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"defer推迟\">4、defer推迟</h3>\r\n<p>defer 语句会将函数推迟到外层函数返回之后执行。</p>\r\n<p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>defer 栈</strong></p>\r\n<p>推迟调用的函数调用会被压入一个栈中。\r\n当外层函数返回时，被推迟的调用会按照后进先出的顺序调用。</p>\r\n<p>更多关于 defer 语句的信息，请阅读<a\r\nhref=\"http://blog.go-zh.org/defer-panic-and-recover\">此博文</a>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;counting&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//counting done  9  8  ---</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"更多类型结构体切片和映射\">更多类型：结构体、切片和映射</h2>\r\n<h3 id=\"指针\">1、指针</h3>\r\n<p>Go 拥有指针。指针保存了值的内存地址。</p>\r\n<p>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针，其零值为\r\n<code>nil</code>。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p *int</span><br></pre></td></tr></table></figure>\r\n<p><code>&amp;</code> 操作符会生成一个指向其操作数的指针。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42</span><br><span class=\"line\">p = &amp;i</span><br></pre></td></tr></table></figure>\r\n<p><code>*</code> 操作符表示指针指向的底层值。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(*p) // 通过指针 p 读取 i</span><br><span class=\"line\">*p = 21         // 通过指针 p 设置 i</span><br></pre></td></tr></table></figure>\r\n<p>这也就是通常所说的「解引用」或「间接引用」。</p>\r\n<p>与 C 不同，Go 没有指针运算。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti, j := <span class=\"number\">42</span>, <span class=\"number\">2701</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;i         <span class=\"comment\">// 指向 i</span></span><br><span class=\"line\">\tfmt.Println(*p) <span class=\"comment\">// 通过指针读取 i 的值</span></span><br><span class=\"line\">\t*p = <span class=\"number\">21</span>         <span class=\"comment\">// 通过指针设置 i 的值</span></span><br><span class=\"line\">\tfmt.Println(i)  <span class=\"comment\">// 查看 i 的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tp = &amp;j         <span class=\"comment\">// 指向 j</span></span><br><span class=\"line\">\t*p = *p / <span class=\"number\">37</span>   <span class=\"comment\">// 通过指针对 j 进行除法运算</span></span><br><span class=\"line\">\tfmt.Println(j) <span class=\"comment\">// 查看 j 的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 42 21 73</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"结构体\">2、结构体</h3>\r\n<p>一个 结构体（<code>struct</code>）就是一组 字段（field）。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体字段</strong></p>\r\n<p>结构体字段可通过点号 <code>.</code> 来访问。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tv.X = <span class=\"number\">4</span></span><br><span class=\"line\">\tfmt.Println(v.X)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体指针</strong></p>\r\n<p>结构体字段可通过结构体指针来访问。</p>\r\n<p>如果我们有一个指向结构体的指针 <code>p</code> 那么可以通过\r\n<code>(*p).X</code> 来访问其字段 <code>X</code>。\r\n不过这么写太啰嗦了，所以语言也允许我们使用隐式解引用，直接写\r\n<code>p.X</code> 就可以。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tp := &amp;v</span><br><span class=\"line\">\tp.X = <span class=\"number\">1e9</span></span><br><span class=\"line\">\tfmt.Println(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;1000000000 2&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体字面量</strong></p>\r\n<p>使用 <code>Name:</code>\r\n语法可以仅列出部分字段（字段名的顺序无关）。</p>\r\n<p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tv1 = Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;  <span class=\"comment\">// 创建一个 Vertex 类型的结构体</span></span><br><span class=\"line\">\tv2 = Vertex&#123;X: <span class=\"number\">1</span>&#125;  <span class=\"comment\">// Y:0 被隐式地赋予零值</span></span><br><span class=\"line\">\tv3 = Vertex&#123;&#125;      <span class=\"comment\">// X:0 Y:0</span></span><br><span class=\"line\">\tp  = &amp;Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125; <span class=\"comment\">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(v1, p, v2, v3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  &#123;1 2&#125; &amp;&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"数组\">3、数组</h3>\r\n<p>类型 <code>[n]T</code> 表示一个数组，它拥有 <code>n</code> 个类型为\r\n<code>T</code> 的值。</p>\r\n<p>表达式</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a [10]int</span><br></pre></td></tr></table></figure>\r\n<p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p>\r\n<p>数组的长度是其类型的一部分，因此数组不能改变大小。\r\n这看起来是个限制，不过没关系，Go 拥有更加方便的使用数组的方式。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a [<span class=\"number\">2</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\ta[<span class=\"number\">1</span>] = <span class=\"string\">&quot;World&quot;</span></span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">0</span>], a[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(primes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"切片\">4、切片</h3>\r\n<p>每个数组的大小都是固定的。而切片则为数组元素提供了动态大小的、灵活的视角。\r\n在实践中，切片比数组更常用。</p>\r\n<p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。.</p>\r\n<p>切片通过两个下标来界定，一个下界和一个上界，二者以冒号分隔：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[low : high]</span><br></pre></td></tr></table></figure>\r\n<p>它会选出一个半闭半开区间，包括第一个元素，但排除最后一个元素。</p>\r\n<p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3\r\n的元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[1:4]</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span> = primes[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>切片类似数组的引用</strong></p>\r\n<p>切片就像数组的引用\r\n切片并不存储任何数据，它只是描述了底层数组中的一段。</p>\r\n<p>更改切片的元素会修改其底层数组中对应的元素。</p>\r\n<p>和它共享底层数组的切片都会观测到这些修改。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnames := [<span class=\"number\">4</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Paul&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;George&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Ringo&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(names)</span><br><span class=\"line\"></span><br><span class=\"line\">\ta := names[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tb := names[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"string\">&quot;XXX&quot;</span></span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\tfmt.Println(names)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[John Paul George Ringo]</span></span><br><span class=\"line\"><span class=\"comment\">//[John Paul] [Paul George]</span></span><br><span class=\"line\"><span class=\"comment\">//[John XXX] [XXX George]</span></span><br><span class=\"line\"><span class=\"comment\">//[John XXX George Ringo]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片字面量</strong></p>\r\n<p>切片字面量类似于没有长度的数组字面量。</p>\r\n<p>这是一个数组字面量：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>\r\n<p>下面这样则会创建一个和上面相同的数组，然后再构建一个引用了它的切片：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tq := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(q)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := []<span class=\"type\">bool</span>&#123;<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">\tfmt.Println(r)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\ti <span class=\"type\">int</span></span><br><span class=\"line\">\t\tb <span class=\"type\">bool</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">11</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">13</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[2 3 5 7 11 13]</span></span><br><span class=\"line\"><span class=\"comment\">//[true false true true false true]</span></span><br><span class=\"line\"><span class=\"comment\">//[&#123;2 true&#125; &#123;3 false&#125; &#123;5 true&#125; &#123;7 true&#125; &#123;11 false&#125; &#123;13 true&#125;]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的默认行为</strong></p>\r\n<p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p>\r\n<p>切片下界的默认值为 0，上界则是该切片的长度。</p>\r\n<p>对于数组</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a [10]int</span><br></pre></td></tr></table></figure>\r\n<p>来说，以下切片表达式和它是等价的：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[0:10]</span><br><span class=\"line\">a[:10]</span><br><span class=\"line\">a[0:]</span><br><span class=\"line\">a[:]</span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的长度与容量</strong></p>\r\n<p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>\r\n<p>切片的长度就是它所包含的元素个数。</p>\r\n<p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>\r\n<p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和\r\n<code>cap(s)</code> 来获取。</p>\r\n<p>你可以通过重新切片来扩展一个切片，给它提供足够的容量。\r\n试着修改示例程序中的切片操作，向外扩展它的长度，看看会发生什么。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 截取切片使其长度为 0</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 扩展其长度</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 舍弃前两个值</span></span><br><span class=\"line\">\ts = s[<span class=\"number\">2</span>:]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//len=6 cap=6 [2 3 5 7 11 13]</span></span><br><span class=\"line\"><span class=\"comment\">//len=0 cap=6 []</span></span><br><span class=\"line\"><span class=\"comment\">//len=4 cap=6 [2 3 5 7]</span></span><br><span class=\"line\"><span class=\"comment\">//len=2 cap=4 [5 7]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>nil 切片</strong></p>\r\n<p>切片的零值是 <code>nil</code>。</p>\r\n<p>nil 切片的长度和容量为 0 且没有底层数组。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;nil!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[] 0 0</span></span><br><span class=\"line\"><span class=\"comment\">//nil!</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>用 make 创建切片</strong></p>\r\n<p>切片可以用内置函数 <code>make</code>\r\n来创建，这也是你创建动态数组的方式。</p>\r\n<p><code>make</code>\r\n函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := make([]int, 5)  // len(a)=5</span><br></pre></td></tr></table></figure>\r\n<p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</span><br><span class=\"line\"></span><br><span class=\"line\">b = b[:cap(b)] // len(b)=5, cap(b)=5</span><br><span class=\"line\">b = b[1:]      // len(b)=4, cap(b)=4</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;a&quot;</span>, a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;b&quot;</span>, b)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := b[:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;c&quot;</span>, c)</span><br><span class=\"line\"></span><br><span class=\"line\">\td := c[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;d&quot;</span>, d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s <span class=\"type\">string</span>, x []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s len=%d cap=%d %v\\n&quot;</span>,</span><br><span class=\"line\">\t\ts, <span class=\"built_in\">len</span>(x), <span class=\"built_in\">cap</span>(x), x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a len=5 cap=5 [0 0 0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">//b len=0 cap=5 []</span></span><br><span class=\"line\"><span class=\"comment\">//c len=2 cap=5 [0 0]</span></span><br><span class=\"line\"><span class=\"comment\">//d len=3 cap=3 [0 0 0]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的切片</strong></p>\r\n<p>切片可以包含任何类型，当然也包括其他切片。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个井字棋（经典游戏）</span></span><br><span class=\"line\">\tboard := [][]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 两个玩家轮流打上 X 和 O</span></span><br><span class=\"line\">\tboard[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;O&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;O&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(board); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, strings.Join(board[i], <span class=\"string\">&quot; &quot;</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//X _ X</span></span><br><span class=\"line\"><span class=\"comment\">//O _ X</span></span><br><span class=\"line\"><span class=\"comment\">//_ _ O</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>向切片追加元素</strong></p>\r\n<p>为切片追加新的元素是种常见的操作，为此 Go 提供了内置的\r\n<code>append</code> 函数。内置函数的<a\r\nhref=\"https://tour.go-zh.org/pkg/builtin/#append\">文档</a>对该函数有详细的介绍。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func append(s []T, vs ...T) []T</span><br></pre></td></tr></table></figure>\r\n<p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为\r\n<code>T</code> 的切片，其余类型为 <code>T</code>\r\n的值将会追加到该切片的末尾。</p>\r\n<p><code>append</code>\r\n的结果是一个包含原切片所有元素加上新添加元素的切片。</p>\r\n<p>当 <code>s</code>\r\n的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。\r\n返回的切片会指向这个新分配的数组。</p>\r\n<p>（要了解关于切片的更多内容，请阅读文章 <a\r\nhref=\"https://tour.go-zh.org/blog/go-slices-usage-and-internals\">Go\r\n切片：用法和本质</a>。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可在空切片上追加</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这个切片会按需增长</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以一次性添加多个元素</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//len=0 cap=0 []</span></span><br><span class=\"line\"><span class=\"comment\">//len=1 cap=1 [0]</span></span><br><span class=\"line\"><span class=\"comment\">//len=2 cap=2 [0 1]</span></span><br><span class=\"line\"><span class=\"comment\">//len=5 cap=6 [0 1 2 3 4]</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"range-遍历\">5、range 遍历</h3>\r\n<p><code>for</code> 循环的 <code>range</code> 形式可遍历切片或映射。</p>\r\n<p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。\r\n第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pow = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">128</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;2**%d = %d\\n&quot;</span>, i, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2**0 = 1</span></span><br><span class=\"line\"><span class=\"comment\">//2**1 = 2</span></span><br><span class=\"line\"><span class=\"comment\">//2**2 = 4</span></span><br><span class=\"line\"><span class=\"comment\">//2**3 = 8</span></span><br><span class=\"line\"><span class=\"comment\">//2**4 = 16</span></span><br><span class=\"line\"><span class=\"comment\">//2**5 = 32</span></span><br><span class=\"line\"><span class=\"comment\">//2**6 = 64</span></span><br><span class=\"line\"><span class=\"comment\">//2**7 = 128</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>range 遍历（续）</strong></p>\r\n<p>可以将下标或值赋予 <code>_</code> 来忽略它。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i, _ := range pow</span><br><span class=\"line\">for _, value := range pow</span><br></pre></td></tr></table></figure>\r\n<p>若你只需要索引，忽略第二个变量即可。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i := range pow</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpow := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tpow[i] = <span class=\"number\">1</span> &lt;&lt; <span class=\"type\">uint</span>(i) <span class=\"comment\">// == 2**i</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%d\\n&quot;</span>, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：切片</strong></p>\r\n<p>实现 <code>Pic</code>。它应当返回一个长度为 <code>dy</code>\r\n的切片，其中每个元素是一个长度为 <code>dx</code>，元素类型为\r\n<code>uint8</code> 的切片。当你运行此程序时，它会将每个整数解释为灰度值\r\n（好吧，其实是蓝度值）并显示它所对应的图像。</p>\r\n<p>图像的解析式由你来定。几个有趣的函数包括\r\n<code>(x+y)/2</code>、<code>x*y</code>、<code>x^y</code>、<code>x*log(y)</code>\r\n和 <code>x%(y+1)</code>。</p>\r\n<p>（提示：需要使用循环来分配 <code>[][]uint8</code> 中的每个\r\n<code>[]uint8</code>。）</p>\r\n<p>（请使用 <code>uint8(intValue)</code> 在类型之间转换；你可能会用到\r\n<code>math</code> 包中的函数。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Pic</span><span class=\"params\">(dx, dy <span class=\"type\">int</span>)</span></span> [][]<span class=\"type\">uint8</span> &#123;</span><br><span class=\"line\">\timg := <span class=\"built_in\">make</span>([][]<span class=\"type\">uint8</span>, dy) <span class=\"comment\">// 创建一个长度为 dy 的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; dy; y++ &#123;</span><br><span class=\"line\">\t\timg[y] = <span class=\"built_in\">make</span>([]<span class=\"type\">uint8</span>, dx) <span class=\"comment\">// 为每行创建一个长度为 dx 的切片</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; dx; x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算灰度值，这里使用 (x+y)/2</span></span><br><span class=\"line\">\t\t\tgrayValue := <span class=\"type\">uint8</span>((x + y) / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\timg[y][x] = grayValue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> img</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpic.Show(Pic)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"map映射\">6、map映射</h3>\r\n<p><code>map</code> 映射将键映射到值。</p>\r\n<p>映射的零值为 <code>nil</code> 。<code>nil</code>\r\n映射既没有键，也不能添加键。</p>\r\n<p><code>make</code> 函数会返回给定类型的映射，并将其初始化备用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(m[<span class=\"string\">&quot;Bell Labs&quot;</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&#123;40.68433 -74.39967&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>映射字面量</strong></p>\r\n<p>映射的字面量和结构体类似，只不过必须有键名。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">37.42202</span>, <span class=\"number\">-122.08408</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//map[Bell Labs:&#123;40.68433 -74.39967&#125; Google:&#123;37.42202 -122.08408&#125;]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>映射字面量（续）</strong></p>\r\n<p>若顶层类型只是一个类型名，那么你可以在字面量的元素中省略它。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;Bell Labs&quot;</span>: &#123;<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;Google&quot;</span>:    &#123;<span class=\"number\">37.42202</span>, <span class=\"number\">-122.08408</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>修改映射</strong></p>\r\n<p>在映射 <code>m</code> 中插入或修改元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m[key] = elem</span><br></pre></td></tr></table></figure>\r\n<p>获取元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem = m[key]</span><br></pre></td></tr></table></figure>\r\n<p>删除元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(m, key)</span><br></pre></td></tr></table></figure>\r\n<p>通过双赋值检测某个键是否存在：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem, ok = m[key]</span><br></pre></td></tr></table></figure>\r\n<p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为\r\n<code>true</code> ；否则，<code>ok</code> 为 <code>false</code>。</p>\r\n<p>若 <code>key</code> 不在映射中，则 <code>elem</code>\r\n是该映射元素类型的零值。</p>\r\n<p><strong>注</strong>：若 <code>elem</code> 或 <code>ok</code>\r\n还未声明，你可以使用短变量声明：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem, ok := m[key]</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tm[<span class=\"string\">&quot;答案&quot;</span>] = <span class=\"number\">42</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tm[<span class=\"string\">&quot;答案&quot;</span>] = <span class=\"number\">48</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(m, <span class=\"string\">&quot;答案&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tv, ok := m[<span class=\"string\">&quot;答案&quot;</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, v, <span class=\"string\">&quot;是否存在？&quot;</span>, ok)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//值： 42</span></span><br><span class=\"line\"><span class=\"comment\">//值： 48</span></span><br><span class=\"line\"><span class=\"comment\">//值： 0</span></span><br><span class=\"line\"><span class=\"comment\">//值： 0 是否存在？ false</span></span><br></pre></td></tr></table></figure>\r\n<p>练习：<strong>映射</strong></p>\r\n<p>实现 <code>WordCount</code>。它应当返回一个映射，其中包含字符串\r\n<code>s</code> 中每个“单词”的个数。 函数 <code>wc.Test</code>\r\n会为此函数执行一系列测试用例，并输出成功还是失败。</p>\r\n<p>你会发现 <a\r\nhref=\"https://go-zh.org/pkg/strings/#Fields\">strings.Fields</a>\r\n很有用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;golang.org/x/tour/wc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WordCount 返回字符串 s 中每个单词的出现次数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WordCount</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 strings.Fields 函数分割字符串为单词</span></span><br><span class=\"line\">\twords := strings.Fields(s)</span><br><span class=\"line\">\tcounts := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>) <span class=\"comment\">// 创建一个映射来存储单词计数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历单词并计数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, word := <span class=\"keyword\">range</span> words &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将单词转换为小写，以确保计数时不区分大小写</span></span><br><span class=\"line\">\t\tword = strings.ToLower(word)</span><br><span class=\"line\">\t\tcounts[word]++ <span class=\"comment\">// 增加单词的计数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counts</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\twc.Test(WordCount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数值\">7、函数值</h3>\r\n<p>函数也是值。它们可以像其他值一样传递。</p>\r\n<p>函数值可以用作函数的参数或返回值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//函数接受一个类型为func(float64, float64) float64的参数fn，即接受一个函数，这个函数接受两个float64类型的参数并返回一个float64类型的结果。compute函数调用这个传入的函数，并传入3和4作为参数，然后返回这个调用的结果。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">\t&#125;  <span class=\"comment\">//接受两个float64类型的参数x和y，并返回这两个参数平方和的平方根，即计算直角三角形的斜边长度。</span></span><br><span class=\"line\">\tfmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))  <span class=\"comment\">// 直角边 5 12 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(compute(hypot))  <span class=\"comment\">// 进入 3跟 4  返回斜边5</span></span><br><span class=\"line\">\tfmt.Println(compute(math.Pow)) <span class=\"comment\">// 这里定义了一个匿名函数，计算 x 的平方  也就是3的4次方</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 13 5 81</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>函数闭包</strong></p>\r\n<p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。\r\n该函数可以访问并赋予其引用的变量值，换句话说，该函数被“绑定”到了这些变量。</p>\r\n<p>例如，函数 <code>adder</code>\r\n返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//adder函数返回一个新的函数，这个新函数有能力修改并记住adder函数中定义的局部变量sum。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adder</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\tsum += x</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := adder(), adder()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(</span><br><span class=\"line\">\t\t\tpos(i),</span><br><span class=\"line\">\t\t\tneg(<span class=\"number\">-2</span>*i),</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//显示pos和neg闭包的累加和</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：斐波纳契闭包</strong></p>\r\n<p>让我们用函数做些好玩的。</p>\r\n<p>实现一个 <code>fibonacci</code>\r\n函数，它返回一个函数（闭包），该闭包返回一个<a\r\nhref=\"https://zh.wikipedia.org/wiki/斐波那契数列\">斐波纳契数列</a> (0,\r\n1, 1, 2, 3, 5, ...)。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fibonacci 是返回一个「返回一个 int 的函数」的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义两个变量a和b，分别保存当前和前一个斐波纳契数</span></span><br><span class=\"line\">\ta, b := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回一个闭包，该闭包能够访问并更新a和b的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回当前斐波纳契数a</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后，将b赋值给a，将a+b的值赋值给b，更新为下一个斐波纳契数</span></span><br><span class=\"line\">\t\ta, b = b, a+b</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := fibonacci()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(f())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        }
    ]
}