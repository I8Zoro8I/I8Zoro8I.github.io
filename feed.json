{
    "version": "https://jsonfeed.org/version/1",
    "title": "CYX",
    "subtitle": "Blog",
    "icon": "http://example.com/images/favicon.ico",
    "description": "我的个人博客",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/2024/08/27/post/golang/13-Gin-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2024/08/27/post/golang/13-Gin-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/",
            "title": "13-Gin-日志管理",
            "date_published": "2024-08-27T02:03:14.491Z",
            "content_html": "<h1 id=\"gin-日志管理\">Gin-日志管理</h1>\r\n<p>Gin默认使用的日志中间件采用的是<code>os.Stdout</code>，只有最基本的功能，毕竟Gin只专注于Web服务，大多数情况下应该使用更加成熟的日志框架，不过这并不在本章的讨论范围内，而且Gin的拓展性很高，可以很轻易的整合其他框架，这里只讨论其自带的日志服务。</p>\r\n<h3 id=\"控制台颜色\">控制台颜色</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gin.DisableConsoleColor() <span class=\"comment\">// 关闭控制台日志颜色</span></span><br></pre></td></tr></table></figure>\r\n<p>除了在开发的时候，大多数时候都不建议开启此项</p>\r\n<h3 id=\"日志写入文件\">日志写入文件</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">    <span class=\"comment\">// 关掉控制台颜色</span></span><br><span class=\"line\">\tgin.DisableConsoleColor()</span><br><span class=\"line\">    <span class=\"comment\">// 创建两个日志文件</span></span><br><span class=\"line\">\tlog1, _ := os.Create(<span class=\"string\">&quot;info1.log&quot;</span>)</span><br><span class=\"line\">\tlog2, _ := os.Create(<span class=\"string\">&quot;info2.log&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 同时记录进两个日志文件</span></span><br><span class=\"line\">\tgin.DefaultWriter = io.MultiWriter(log1, log2)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>gin自带的日志支持写入多个文件，但内容是相同的，使用起来不太方便，并且不会将请求日志写入文件中。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\trouter := gin.New()</span><br><span class=\"line\">\t<span class=\"comment\">// LoggerWithFormatter 中间件会写入日志到 gin.DefaultWriter</span></span><br><span class=\"line\">\t<span class=\"comment\">// 默认 gin.DefaultWriter = os.Stdout</span></span><br><span class=\"line\">\trouter.Use(gin.LoggerWithFormatter(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(param gin.LogFormatterParams)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//TODO 写入对应文件的逻辑</span></span><br><span class=\"line\">        ......</span><br><span class=\"line\">\t\t<span class=\"comment\">// 输出自定义格式</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%s - [%s] \\&quot;%s %s %s %d %s \\&quot;%s\\&quot; %s\\&quot;\\n&quot;</span>,</span><br><span class=\"line\">\t\t\t\tparam.ClientIP,</span><br><span class=\"line\">\t\t\t\tparam.TimeStamp.Format(time.RFC1123),</span><br><span class=\"line\">\t\t\t\tparam.Method,</span><br><span class=\"line\">\t\t\t\tparam.Path,</span><br><span class=\"line\">\t\t\t\tparam.Request.Proto,</span><br><span class=\"line\">\t\t\t\tparam.StatusCode,</span><br><span class=\"line\">\t\t\t\tparam.Latency,</span><br><span class=\"line\">\t\t\t\tparam.Request.UserAgent(),</span><br><span class=\"line\">\t\t\t\tparam.ErrorMessage,</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;))</span><br><span class=\"line\">\trouter.Use(gin.Recovery())</span><br><span class=\"line\">\trouter.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t\tc.String(<span class=\"number\">200</span>, <span class=\"string\">&quot;pong&quot;</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\trouter.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>通过自定义中间件，可以实现日志写入文件中</p>\r\n<h3 id=\"路由调试日志格式\">路由调试日志格式</h3>\r\n<p>这里修改的只是启动时输出路由信息的的日志</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   gin.SetMode(gin.DebugMode)</span><br><span class=\"line\">   gin.DebugPrintRouteFunc = <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(httpMethod, absolutePath, handlerName <span class=\"type\">string</span>, nuHandlers <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> gin.IsDebugging() &#123;</span><br><span class=\"line\">         log.Printf(<span class=\"string\">&quot;路由 %v %v %v %v\\n&quot;</span>, httpMethod, absolutePath, handlerName, nuHandlers)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2022/12/21 17:19:13 路由 GET /hello main.Hello 3</span><br></pre></td></tr></table></figure>\r\n<p><strong>结语</strong>：Gin算是Go语言Web框架中最易学习的一种，因为Gin真正做到了职责最小化，只是单纯的负责Web服务，其他的认证逻辑，数据缓存等等功能都交给开发者自行完成，相比于那些大而全的框架，轻量简洁的Gin对于初学者而言更适合也更应该去学习，因为Gin并没有强制使用某一种规范，项目该如何构建，采用什么结构都需要自行斟酌，对于初学者而言更能锻炼能力。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/12-Gin-%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/",
            "url": "http://example.com/2024/08/27/post/golang/12-Gin-%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6/",
            "title": "12-Gin-会话控制",
            "date_published": "2024-08-27T01:58:36.406Z",
            "content_html": "<h1 id=\"gin-会话控制\">Gin-会话控制</h1>\r\n<h2 id=\"会话控制\">会话控制</h2>\r\n<p>在目前的时代中，流行的三种Web会话控制总共有三种，<code>cookie</code>，<code>session</code>，<code>JWT</code>。</p>\r\n<h3 id=\"cookie\">Cookie</h3>\r\n<p>cookie中的信息是以键值对的形式储存在浏览器中，而且在浏览器中可以直接看到数据</p>\r\n<p>优点：</p>\r\n<ul>\r\n<li>结构简单</li>\r\n<li>数据持久</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>大小受限</li>\r\n<li>明文存储</li>\r\n<li>容易受到CSRF攻击</li>\r\n</ul>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    router := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">    router.GET(<span class=\"string\">&quot;/cookie&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       \t<span class=\"comment\">// 获取对应的cookie</span></span><br><span class=\"line\">        cookie, err := c.Cookie(<span class=\"string\">&quot;gin_cookie&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            cookie = <span class=\"string\">&quot;NotSet&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// 设置cookie 参数：key，val，存在时间，目录，域名，是否允许他人通过js访问cookie，仅http</span></span><br><span class=\"line\">            c.SetCookie(<span class=\"string\">&quot;gin_cookie&quot;</span>, <span class=\"string\">&quot;test&quot;</span>, <span class=\"number\">3600</span>, <span class=\"string\">&quot;/&quot;</span>, <span class=\"string\">&quot;localhost&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;Cookie value: %s \\n&quot;</span>, cookie)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    router.Run()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>单纯的cookie在五六年前用的比较多，不过作者一般很少使用单纯的cookie来做会话控制，这样做确实不太安全。</p>\r\n<h3 id=\"session\">Session</h3>\r\n<p>session存储在服务器中，然后发送一个cookie存储在浏览器中，cookie中存储的是session_id，之后每次请求服务器通过session_id可以获取对应的session信息</p>\r\n<p>优点：</p>\r\n<ul>\r\n<li>存储在服务端，增加安全性，便于管理</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>存储在服务端，增大服务器开销，降低性能</li>\r\n<li>基于cookie识别，不安全</li>\r\n<li>认证信息在分布式情况下不同步</li>\r\n</ul>\r\n<p>Session与Cookie是不分家的，每次要用到Session，默认就是要用到Cookie了。Gin默认是不支持Session的，因为Cookie是Http协议里面的内容，但Session不是，不过有第三方中间件支持，安装依赖即可，仓库地址：<a\r\nhref=\"https://github.com/gin-contrib/sessions#sessions\">gin-contrib/sessions:\r\nGin middleware for session management (github.com)open in new\r\nwindow</a></p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get github.com/gin-contrib/sessions</span><br></pre></td></tr></table></figure>\r\n<p>支持cookie，Redis，MongoDB，GORM，PostgreSQL</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   r := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 创建基于Cookie的存储引擎</span></span><br><span class=\"line\">   store := cookie.NewStore([]<span class=\"type\">byte</span>(<span class=\"string\">&quot;secret&quot;</span>))</span><br><span class=\"line\">   <span class=\"comment\">// 设置Session中间件，mysession即session名称，也是cookie的名称</span></span><br><span class=\"line\">   r.Use(sessions.Sessions(<span class=\"string\">&quot;mysession&quot;</span>, store))</span><br><span class=\"line\">   r.GET(<span class=\"string\">&quot;/incr&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 初始化session</span></span><br><span class=\"line\">      session := sessions.Default(c)</span><br><span class=\"line\">      <span class=\"keyword\">var</span> count <span class=\"type\">int</span></span><br><span class=\"line\">      <span class=\"comment\">// 获取值</span></span><br><span class=\"line\">      v := session.Get(<span class=\"string\">&quot;count&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> v == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">         count = <span class=\"number\">0</span></span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         count = v.(<span class=\"type\">int</span>)</span><br><span class=\"line\">         count++</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 设置</span></span><br><span class=\"line\">      session.Set(<span class=\"string\">&quot;count&quot;</span>, count)</span><br><span class=\"line\">      <span class=\"comment\">// 保存</span></span><br><span class=\"line\">      session.Save()</span><br><span class=\"line\">      c.JSON(<span class=\"number\">200</span>, gin.H&#123;<span class=\"string\">&quot;count&quot;</span>: count&#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   r.Run(<span class=\"string\">&quot;:8000&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>一般不推荐通过Cookie存储Sesison，推荐使用Redis，其他例子还请自行去官方仓库了解。</p>\r\n<h3 id=\"jwt\">JWT</h3>\r\n<p>优点：</p>\r\n<ul>\r\n<li>基于JSON，多语言通用</li>\r\n<li>可以存储非敏感信息</li>\r\n<li>占用很小，便于传输</li>\r\n<li>服务端无需存储，利于分布式拓展</li>\r\n</ul>\r\n<p>缺点：</p>\r\n<ul>\r\n<li>Token刷新问题</li>\r\n<li>一旦签发则无法主动控制</li>\r\n</ul>\r\n<p>自从前端革命以来，前端程序员不再只是一个“写页面的”，前后端分离的趋势愈演愈烈，JWT是最适合前后端分离和分布式系统来做会话控制的，具有很大的天然优势。考虑到JWT已经完全脱离Gin的内容，且没有任何中间件支持，因为JWT本身就是不局限于任何框架任何语言，在这里就不作细致的讲解，可以前往另一篇文档：<a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/auth/jwt.html\">JWT</a></p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/11-Gin-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/",
            "url": "http://example.com/2024/08/27/post/golang/11-Gin-%E6%9C%8D%E5%8A%A1%E9%85%8D%E7%BD%AE/",
            "title": "11-Gin-服务配置",
            "date_published": "2024-08-27T01:55:09.830Z",
            "content_html": "<h1 id=\"gin-服务配置\">Gin-服务配置</h1>\r\n<p>光是使用默认的配置是远远不够的，大多数情况下都需求修改很多的服务配置才能达到需求。</p>\r\n<h3 id=\"http配置\">Http配置</h3>\r\n<p>可以通过<code>net/http</code>创建Server来配置，Gin本身也支持像原生API一样使用Gin。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   router := gin.Default()</span><br><span class=\"line\">   server := &amp;http.Server&#123;</span><br><span class=\"line\">      Addr:           <span class=\"string\">&quot;:8080&quot;</span>,</span><br><span class=\"line\">      Handler:        router,</span><br><span class=\"line\">      ReadTimeout:    <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">      WriteTimeout:   <span class=\"number\">10</span> * time.Second,</span><br><span class=\"line\">      MaxHeaderBytes: <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>,</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatal(server.ListenAndServe())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"静态资源配置\">静态资源配置</h3>\r\n<p>静态资源在以往基本上是服务端不可或缺的一部分，尽管在现在使用占比正在逐渐减少，但仍旧有大量的系统还是使用单体架构的情况。</p>\r\n<p>Gin提供了三个方法来加载静态资源</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 加载某一静态文件夹 </span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> Static(relativePath, root <span class=\"type\">string</span>) IRoutes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载某一个fs</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> StaticFS(relativePath <span class=\"type\">string</span>, fs http.FileSystem) IRoutes</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加载某一个静态文件</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> StaticFile(relativePath, filepath <span class=\"type\">string</span>) IRoutes</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>relativePath是映射到网页URL上的相对路径，root是文件在项目中的实际路径</p>\r\n</div>\r\n<p>假设项目的目录如下</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root</span><br><span class=\"line\">|</span><br><span class=\"line\">|-- static</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">|\t|-- a.jpg</span><br><span class=\"line\">|\t|</span><br><span class=\"line\">|\t|-- favicon.ico</span><br><span class=\"line\">|</span><br><span class=\"line\">|-- view</span><br><span class=\"line\">\t|</span><br><span class=\"line\">\t|-- html</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   router := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件目录</span></span><br><span class=\"line\">   router.Static(<span class=\"string\">&quot;/static&quot;</span>, <span class=\"string\">&quot;./static&quot;</span>)</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件目录</span></span><br><span class=\"line\">   router.StaticFS(<span class=\"string\">&quot;/view&quot;</span>, http.Dir(<span class=\"string\">&quot;view&quot;</span>))</span><br><span class=\"line\">   <span class=\"comment\">// 加载静态文件</span></span><br><span class=\"line\">   router.StaticFile(<span class=\"string\">&quot;/favicon&quot;</span>, <span class=\"string\">&quot;./static/favicon.ico&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   router.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"跨域配置\">跨域配置</h3>\r\n<p>Gin本身是没有对于跨域配置做出任何处理，需要自行编写中间件来进行实现相应的需求，其实难度也不大，稍微熟悉HTTP协议的人一般都能写出来，逻辑基本上都是那一套。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">CorsMiddle</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      method := c.Request.Method</span><br><span class=\"line\">      origin := c.Request.Header.Get(<span class=\"string\">&quot;Origin&quot;</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> origin != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 生产环境中的服务端通常都不会填 *，应当填写指定域名</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, origin)</span><br><span class=\"line\">         <span class=\"comment\">// 允许使用的HTTP METHOD</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 允许使用的请求头</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 允许客户端访问的响应头</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)</span><br><span class=\"line\">         <span class=\"comment\">// 是否需要携带认证信息 Credentials 可以是 cookies、authorization headers 或 TLS client certificates </span></span><br><span class=\"line\">         <span class=\"comment\">// 设置为true时，Access-Control-Allow-Origin不能为 *</span></span><br><span class=\"line\">         c.Header(<span class=\"string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"string\">&quot;true&quot;</span>)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 放行OPTION请求，但不执行后续方法</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> method == <span class=\"string\">&quot;OPTIONS&quot;</span> &#123;</span><br><span class=\"line\">         c.AbortWithStatus(http.StatusNoContent)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 放行</span></span><br><span class=\"line\">      c.Next()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>将中间件注册为全局中间件即可</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/10-Gin-%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "url": "http://example.com/2024/08/27/post/golang/10-Gin-%E4%B8%AD%E9%97%B4%E4%BB%B6/",
            "title": "10-Gin-中间件",
            "date_published": "2024-08-27T01:49:32.688Z",
            "content_html": "<h1 id=\"gin-中间件\">Gin-中间件</h1>\r\n<p>gin十分轻便灵活，拓展性非常高，对于中间件的支持也非常友好。在Gin中，所有的接口请求都要经过中间件，通过中间件，开发者可以自定义实现很多功能和逻辑，gin虽然本身自带的功能很少，但是由第三方社区开发的gin拓展中间件十分丰富。</p>\r\n<p>中间件本质上其实还是一个接口处理器</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HandlerFunc defines the handler used by gin middleware as return value.</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> HandlerFunc <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Context)</span></span></span><br></pre></td></tr></table></figure>\r\n<p>从某种意义上来说，每一个请求对应的处理器也是中间件，只不过是作用范围非常小的局部中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Default</span><span class=\"params\">()</span></span> *Engine &#123;</span><br><span class=\"line\">   debugPrintWARNINGDefault()</span><br><span class=\"line\">   engine := New()</span><br><span class=\"line\">   engine.Use(Logger(), Recovery())</span><br><span class=\"line\">   <span class=\"keyword\">return</span> engine</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>查看gin的源代码，<code>Default</code>函数中，返回的默认<code>Engine</code>就使用两个默认中间件<code>Logger()</code>，<code>Recovery()</code>，如果不想使用默认的中间件也可以使用<code>gin.New()</code>来代替。</p>\r\n<h3 id=\"全局中间件\">全局中间件</h3>\r\n<p>全局中间件即作用范围为全局，整个系统所有的请求都会经过此中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GlobalMiddleware</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;全局中间件被执行...&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>先创建一个闭包函数来创建中间件，再通过<code>Engine.Use()</code>来注册全局中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 注册全局中间件</span></span><br><span class=\"line\">   e.Use(GlobalMiddleware())</span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/v1/hello&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GIN-debug] Listening and serving HTTP on :8080</span><br><span class=\"line\">全局中间件被执行...</span><br><span class=\"line\">[GIN] 2022/12/21 - 11:57:52 | 200 |       538.9µs |             ::1 | GET      &quot;/v1/hello&quot;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"局部中间件\">局部中间件</h3>\r\n<p>局部中间件即作用范围为局部，系统中局部的请求会经过此中间件。局部中间件可以注册到单个路由上，不过更多时候是注册到路由组上。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 注册全局中间件</span></span><br><span class=\"line\">   e.Use(GlobalMiddleware())</span><br><span class=\"line\">   <span class=\"comment\">// 注册路由组局部中间件</span></span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>, LocalMiddleware())</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 注册单个路由局部中间件</span></span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, LocalMiddleware(), Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/v2/update&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">全局中间件被执行...</span><br><span class=\"line\">局部中间件被执行</span><br><span class=\"line\">[GIN] 2022/12/21 - 12:05:03 | 200 |       999.9µs |             ::1 | POST     &quot;/v2/update&quot;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"中间件原理\">中间件原理</h3>\r\n<p>Gin中间的使用和自定义非常容易，其内部的原理也比较简单，为了后续的学习，需要简单的了解下内部原理。Gin中的中间件其实用到了责任链模式，<code>Context</code>中维护着一个<code>HandlersChain</code>，本质上是一个<code>[]HandlerFunc</code>，和一个<code>index</code>，其数据类型为<code>int8</code>。在<code>Engine.handlerHTTPRequest(c *Context)</code>方法中，有一段代码表明了调用过程：gin在路由树中找到了对应的路由后，便调用了<code>Next()</code>方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> value.handlers != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 将调用链赋值给Context</span></span><br><span class=\"line\">   c.handlers = value.handlers</span><br><span class=\"line\">   c.fullPath = value.fullPath</span><br><span class=\"line\">   <span class=\"comment\">// 调用中间件</span></span><br><span class=\"line\">   c.Next()</span><br><span class=\"line\">   c.writermem.WriteHeaderNow()</span><br><span class=\"line\">   <span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>Next()</code>的调用才是关键，<code>Next()</code>会遍历路由的<code>handlers</code>中的<code>HandlerFunc</code>\r\n并执行，此时可以看到<code>index</code>的作用就是记录中间件的调用位置。其中，给对应路由注册的接口函数也在<code>handlers</code>内，这也就是为什么前面会说接口也是一个中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Next() &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 一进来就+1是为了避免陷入递归死循环，默认值是-1</span></span><br><span class=\"line\">   c.index++</span><br><span class=\"line\">   <span class=\"keyword\">for</span> c.index &lt; <span class=\"type\">int8</span>(<span class=\"built_in\">len</span>(c.handlers)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 执行HandlerFunc</span></span><br><span class=\"line\">      c.handlers[c.index](c)</span><br><span class=\"line\">      <span class=\"comment\">// 执行完毕，index+1</span></span><br><span class=\"line\">      c.index++</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>修改一下<code>Hello()</code>的逻辑，来验证是否果真如此</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   fmt.Println(c.HandlerNames())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>输出结果为</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.GlobalMiddleware.func1 main.LocalMiddleware.func1 main.Hello]</span><br></pre></td></tr></table></figure>\r\n<p>可以看到中间件调用链的顺序为：<code>Logger -&gt; Recovery -&gt; GlobalMiddleware -&gt; LocalMiddleWare -&gt; Hello</code>，调用链的最后一个元素才是真正要执行的接口函数，前面的都是中间件。</p>\r\n<div class=\"info\">\r\n<p>在注册局部路由时，有如下一个断言</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">finalSize := <span class=\"built_in\">len</span>(group.Handlers) + <span class=\"built_in\">len</span>(handlers) <span class=\"comment\">//中间件总数</span></span><br><span class=\"line\">assert1(finalSize &lt; <span class=\"type\">int</span>(abortIndex), <span class=\"string\">&quot;too many handlers&quot;</span>)</span><br></pre></td></tr></table></figure>\r\n<p>其中<code>abortIndex int8 = math.MaxInt8 &gt;&gt; 1</code>值为63，即使用系统时路由注册数量不要超过63个。</p>\r\n</div>\r\n<h3 id=\"计时器中间件\">计时器中间件</h3>\r\n<p>在知晓了上述的中间件原理后，就可以编写一个简单的请求时间统计中间件。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TimeMiddleware</span><span class=\"params\">()</span></span> gin.HandlerFunc &#123;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 记录开始时间</span></span><br><span class=\"line\">      start := time.Now()</span><br><span class=\"line\">      <span class=\"comment\">// 执行后续调用链</span></span><br><span class=\"line\">      context.Next()</span><br><span class=\"line\">      <span class=\"comment\">// 计算时间间隔</span></span><br><span class=\"line\">      duration := time.Since(start)</span><br><span class=\"line\">      <span class=\"comment\">// 输出纳秒，以便观测结果</span></span><br><span class=\"line\">      fmt.Println(<span class=\"string\">&quot;请求用时: &quot;</span>, duration.Nanoseconds())</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\t<span class=\"comment\">// 注册全局中间件，计时中间件</span></span><br><span class=\"line\">\te.Use(GlobalMiddleware(), TimeMiddleware())</span><br><span class=\"line\">\t<span class=\"comment\">// 注册路由组局部中间件</span></span><br><span class=\"line\">\tv1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>, LocalMiddleware())</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 注册单个路由局部中间件</span></span><br><span class=\"line\">\t\tv2.POST(<span class=\"string\">&quot;/update&quot;</span>, LocalMiddleware(), Update)</span><br><span class=\"line\">\t\tv2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/v1/hello&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">请求用时:  517600</span><br></pre></td></tr></table></figure>\r\n<p>一个简单的计时器中间件就已经编写完毕了，后续可以凭借自己的摸索编写一些功能更实用的中间件。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/9-Gin-%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/",
            "url": "http://example.com/2024/08/27/post/golang/9-Gin-%E8%B7%AF%E7%94%B1%E7%AE%A1%E7%90%86/",
            "title": "9-Gin-路由管理",
            "date_published": "2024-08-27T01:31:37.820Z",
            "content_html": "<h1 id=\"gin-路由管理\">Gin-路由管理</h1>\r\n<p>路由管理是一个系统中非常重要的部分，需要确保每一个请求都能被正确的映射到对应的函数上。</p>\r\n<h3 id=\"路由组\">路由组</h3>\r\n<p>创建一个路由组是将接口分类，不同类别的接口对应不同的功能，也更易于管理。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Login</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Update</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Delete</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>假设我们有以上四个接口，暂时不管其内部实现，<code>Hello</code>，<code>Login</code>是一组，<code>Update</code>，<code>Delete</code>是一组。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(group *RouterGroup)</span></span> Group(relativePath <span class=\"type\">string</span>, handlers ...HandlerFunc) *RouterGroup</span><br></pre></td></tr></table></figure>\r\n<p>在创建分组的时候，我们也可以给分组的根路由注册处理器，不过大多数时候并不会这么做。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\tv1 := e.Group(<span class=\"string\">&quot;v1&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\t\tv1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tv2 := e.Group(<span class=\"string\">&quot;v2&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tv2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">\t\tv2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>我们将其分成了<code>v1</code>，<code>v2</code>两个分组，其中的花括号<code>&#123;&#125;</code>仅仅只是为了规范，表名花括号内注册的处理器是属于同一个路由分组，在功能上没有任何作用。同样的，gin也支持嵌套分组，方法与上例一致，这里就不再演示。</p>\r\n<h3 id=\"路由\">404路由</h3>\r\n<p>gin\r\n中的<code>Engine</code>结构体提供了一个方法<code>NoRoute</code>，来设置当访问的URL不存在时如何处理，开发者可以将逻辑写入此方法中，以便路由未找到时自动调用，默认会返回404状态码</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span></span> NoRoute(handlers ...HandlerFunc)</span><br></pre></td></tr></table></figure>\r\n<p>我们拿上个例子举例</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"comment\">// 注册处理器</span></span><br><span class=\"line\">   e.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123; <span class=\"comment\">// 这里只是演示，不要在生产环境中直接返回HTML代码</span></span><br><span class=\"line\">      context.String(http.StatusNotFound, <span class=\"string\">&quot;&lt;h1&gt;404 Page Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>随便发一个请求</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;404 Page Not Found&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"路由-1\">405路由</h3>\r\n<p>Http状态码中，405代表着当前请求的方法类型是不允许的，gin中提供了如下方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(engine *Engine)</span></span> NoMethod(handlers ...HandlerFunc)</span><br></pre></td></tr></table></figure>\r\n<p>来注册一个处理器，以便在发生时自动调用，前提是设置<code>Engine.HandleMethodNotAllowed = true</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   <span class=\"comment\">// 需要将其设置为true</span></span><br><span class=\"line\">   e.HandleMethodNotAllowed = <span class=\"literal\">true</span></span><br><span class=\"line\">   v1 := e.Group(<span class=\"string\">&quot;/v1&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">      v1.GET(<span class=\"string\">&quot;/login&quot;</span>, Login)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   v2 := e.Group(<span class=\"string\">&quot;/v2&quot;</span>)</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      v2.POST(<span class=\"string\">&quot;/update&quot;</span>, Update)</span><br><span class=\"line\">      v2.DELETE(<span class=\"string\">&quot;/delete&quot;</span>, Delete)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   e.NoRoute(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.String(http.StatusNotFound, <span class=\"string\">&quot;&lt;h1&gt;404 Page Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   <span class=\"comment\">// 注册处理器</span></span><br><span class=\"line\">   e.NoMethod(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.String(http.StatusMethodNotAllowed, <span class=\"string\">&quot;method not allowed&quot;</span>)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>配置好后，gin默认的header是不支持<code>OPTION</code>请求的，测试一下</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request OPTIONS &#x27;http://localhost:8080/v2/delete&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">method not allowed</span><br></pre></td></tr></table></figure>\r\n<p>至此配置成功</p>\r\n<h3 id=\"重定向\">重定向</h3>\r\n<p>gin中的重定向十分简单，调用<code>gin.Context.Redirect()</code>方法即可。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/&quot;</span>, Index)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.Redirect(http.StatusMovedPermanently, <span class=\"string\">&quot;/hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/8-Gin-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/",
            "url": "http://example.com/2024/08/27/post/golang/8-Gin-%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/",
            "title": "8-Gin-文件传输",
            "date_published": "2024-08-27T01:27:47.846Z",
            "content_html": "<h1 id=\"gin-文件传输\">Gin-文件传输</h1>\r\n<p>文件传输是Web应用的一个不可或缺的功能，gin对于此的支持也是封装的十分简单，但其实本质上和用原生的<code>net/http</code>的流程都差不多。流程都是从请求体中读取文件流，然后再保存到本地。</p>\r\n<h3 id=\"单文件上传\">单文件上传</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uploadFile</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取文件</span></span><br><span class=\"line\">\tfile, err := ctx.FormFile(<span class=\"string\">&quot;file&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;%+v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 保存在本地</span></span><br><span class=\"line\">\terr = ctx.SaveUploadedFile(file, <span class=\"string\">&quot;./&quot;</span>+file.Filename)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;%+v&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">\tctx.String(http.StatusOK, <span class=\"string\">&quot;upload %s size:%d byte successfully!&quot;</span>, file.Filename, file.Size)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/upload&#x27; \\</span><br><span class=\"line\">--form &#x27;file=@&quot;/C:/Users/user/Pictures/Camera Roll/a.jpg&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>结果</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload a.jpg size:1424 byte successfully!</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>一般情况下，上传文件的<code>Method</code>都会指定用<code>POST</code>，一些公司可能会倾向于使用<code>PUT</code>，前者是简单HTTP请求，后者是复杂HTTP请求，具体区别不作赘述，如果使用后者的话，尤其是前后端分离的项目时，需要进行相应的跨域处理，而Gin默认的配置是不支持跨域的跨域配置。</p>\r\n</div>\r\n<h3 id=\"多文件上传\">多文件上传</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/uploadFiles&quot;</span>, uploadFiles)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">uploadFiles</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 获取gin解析好的multipart表单</span></span><br><span class=\"line\">\tform, _ := ctx.MultipartForm()</span><br><span class=\"line\">\t<span class=\"comment\">// 根据键值取得对应的文件列表</span></span><br><span class=\"line\">\tfiles := form.File[<span class=\"string\">&quot;files&quot;</span>]</span><br><span class=\"line\">\t<span class=\"comment\">// 遍历文件列表，保存到本地</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, file := <span class=\"keyword\">range</span> files &#123;</span><br><span class=\"line\">\t\terr := ctx.SaveUploadedFile(file, <span class=\"string\">&quot;./&quot;</span>+file.Filename)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t\tctx.String(http.StatusBadRequest, <span class=\"string\">&quot;upload failed&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 返回结果</span></span><br><span class=\"line\">\tctx.String(http.StatusOK, <span class=\"string\">&quot;upload %d files successfully!&quot;</span>, <span class=\"built_in\">len</span>(files))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/uploadFiles&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/a.jpg&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/123.jpg&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;files=@&quot;/C:/Users/Stranger/Pictures/Camera Roll/girl.jpg&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upload 3 files successfully!</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"文件下载\">文件下载</h3>\r\n<p>关于文件下载的部分Gin对于原有标准库的API再一次封装，使得文件下载异常简单。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/upload&quot;</span>, uploadFile)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/uploadFiles&quot;</span>, uploadFiles)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/download/:filename&quot;</span>, download)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">download</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取文件名</span></span><br><span class=\"line\">\tfilename := ctx.Param(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 返回对应文件</span></span><br><span class=\"line\">\tctx.FileAttachment(filename, filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/download/a.jpg&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>结果</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Content-Disposition: attachment; filename=&quot;a.jpg&quot;</span><br><span class=\"line\">Date: Wed, 21 Dec 2022 08:04:17 GMT</span><br><span class=\"line\">Last-Modified: Wed, 21 Dec 2022 07:50:44 GMT</span><br></pre></td></tr></table></figure>\r\n<p>是不是觉得简单过头了，不妨不用框架的方法，自行编写一遍过程</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">download</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 获取参数</span></span><br><span class=\"line\">   filename := ctx.Param(<span class=\"string\">&quot;filename&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 请求响应对象和请求对象</span></span><br><span class=\"line\">   response, request := ctx.Writer, ctx.Request</span><br><span class=\"line\">   <span class=\"comment\">// 写入响应头</span></span><br><span class=\"line\">   <span class=\"comment\">// response.Header().Set(&quot;Content-Type&quot;, &quot;application/octet-stream&quot;) 以二进制流传输文件</span></span><br><span class=\"line\">   response.Header().Set(<span class=\"string\">&quot;Content-Disposition&quot;</span>, <span class=\"string\">`attachment; filename*=UTF-8&#x27;&#x27;`</span>+url.QueryEscape(filename)) <span class=\"comment\">// 对文件名进行安全转义</span></span><br><span class=\"line\">   response.Header().Set(<span class=\"string\">&quot;Content-Transfer-Encoding&quot;</span>, <span class=\"string\">&quot;binary&quot;</span>)                                            <span class=\"comment\">// 传输编码</span></span><br><span class=\"line\">   http.ServeFile(response, request, filename)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>可以通过<code>Engine.MaxMultipartMemory</code>来设置文件传输的最大内存，默认为<code>32 &lt;&lt; 20 // 32 MB</code></p>\r\n</div>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/27/post/golang/7-Gin-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "url": "http://example.com/2024/08/27/post/golang/7-Gin-%E6%95%B0%E6%8D%AE%E6%A0%A1%E9%AA%8C/",
            "title": "7-Gin-数据校验/响应",
            "date_published": "2024-08-27T01:11:02.696Z",
            "content_html": "<h1 id=\"gin-数据校验\">Gin-数据校验</h1>\r\n<p><code>gin</code>内置的校验工具其实是<code>github.com/go-playground/validator/v10</code>，使用方法也几乎没有什么差别，<a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/validate/Validator.html\">Validator</a></p>\r\n<h3 id=\"简单示例\"><strong>简单示例</strong></h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LoginUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">   Username <span class=\"type\">string</span> <span class=\"string\">`binding:&quot;required&quot;  json:&quot;username&quot; form:&quot;username&quot; uri:&quot;username&quot;`</span></span><br><span class=\"line\">   Password <span class=\"type\">string</span> <span class=\"string\">`binding:&quot;required&quot; json:&quot;password&quot; form:&quot;password&quot; uri:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.POST(<span class=\"string\">&quot;/register&quot;</span>, Register)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Register</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   newUser := &amp;LoginUser&#123;&#125;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> err := ctx.ShouldBind(newUser); err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">      ctx.String(http.StatusOK, <span class=\"string\">&quot;user%+v&quot;</span>, *newUser)</span><br><span class=\"line\">   &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      ctx.String(http.StatusBadRequest, <span class=\"string\">&quot;invalid user,%v&quot;</span>, err)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;http://localhost:8080/register&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;jack1&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">invalid user,Key: &#x27;LoginUser.Password&#x27; Error:Field validation for &#x27;Password&#x27; failed on the &#x27;required&#x27; tag</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>需要注意的一点是，gin中validator的校验tag是<code>binding</code>，而单独使用<code>validator</code>的的校验tag是<code>validator</code></p>\r\n</div>\r\n<h1 id=\"数据响应\">数据响应</h1>\r\n<p>数据响应是接口处理中最后一步要做的事情，后端将所有数据处理完成后，通过HTTP协议返回给调用者，gin对于数据响应提供了丰富的内置支持，用法简洁明了，上手十分容易。</p>\r\n<h3 id=\"简单示例-1\"><strong>简单示例</strong></h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回纯字符串格式的数据，http.StatusOK代表着200状态码，数据为&quot;Hello world !&quot;</span></span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;Hello world !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"info\">\r\n<p>文件加载的时候，默认根路径是项目路径，也就是<code>go.mod</code>文件所在的路径，下面例子中的<code>index.html</code>即位于根路径下的<code>index.html</code>，不过一般情况下这些模板文件都不会放在根路径，而是会存放在静态资源文件夹中</p>\r\n</div>\r\n<h3 id=\"html渲染\">HTML渲染</h3>\r\n<div class=\"info\">\r\n<p>文件加载的时候，默认根路径是项目路径，也就是<code>go.mod</code>文件所在的路径，下面例子中的<code>index.html</code>即位于根路径下的<code>index.html</code>，不过一般情况下这些模板文件都不会放在根路径，而是会存放在静态资源文件夹中</p>\r\n</div>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">    <span class=\"comment\">// 加载HTML文件，也可以使用Engine.LoadHTMLGlob()</span></span><br><span class=\"line\">   e.LoadHTMLFiles(<span class=\"string\">&quot;index.html&quot;</span>)</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/&quot;</span>, Index)</span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   c.HTML(http.StatusOK, <span class=\"string\">&quot;index.html&quot;</span>, gin.H&#123;&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;http://localhost:8080/&#x27;</span><br></pre></td></tr></table></figure>\r\n<p>返回</p>\r\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>GinLearn<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>This is a HTML Template Render Example<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"快速响应\">快速响应</h3>\r\n<p>前面经常用到<code>context.String()</code>方法来进行数据响应，这是最原始的响应方法，直接返回一个字符串，<code>gin</code>中其实还内置了许多了快速响应的方法例如:</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用Render写入响应头，并进行数据渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Render(code <span class=\"type\">int</span>, r render.Render)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 渲染一个HTML模板，name是html路径，obj是内容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> HTML(code <span class=\"type\">int</span>, name <span class=\"type\">string</span>, obj any)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以美化了的缩进JSON字符串进行数据渲染，通常不建议使用这个方法，因为会造成更多的传输消耗。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> IndentedJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 安全的JSON，可以防止JSON劫持</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> SecureJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSONP方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> JSONP(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> JSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染，会将unicode码转换为ASCII码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> AsciiJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// JSON方式进行渲染，不会对HTML特殊字符串进行转义</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> PureJSON(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// XML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> XML(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// YML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> YAML(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// TOML方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> TOML(code <span class=\"type\">int</span>, obj <span class=\"keyword\">interface</span>&#123;&#125;) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ProtoBuf方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> ProtoBuf(code <span class=\"type\">int</span>, obj any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// String方式进行渲染</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> String(code <span class=\"type\">int</span>, format <span class=\"type\">string</span>, values ...any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 重定向到特定的位置</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Redirect(code <span class=\"type\">int</span>, location <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将data写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Data(code <span class=\"type\">int</span>, contentType <span class=\"type\">string</span>, data []<span class=\"type\">byte</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过reader读取流并写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> DataFromReader(code <span class=\"type\">int</span>, contentLength <span class=\"type\">int64</span>, contentType <span class=\"type\">string</span>, reader io.Reader, extraHeaders <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高效的将文件写入响应流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> File(filepath <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以一种高效的方式将fs中的文件流写入响应流</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> FileFromFS(filepath <span class=\"type\">string</span>, fs http.FileSystem) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以一种高效的方式将fs中的文件流写入响应流，并且在客户端会以指定的文件名进行下载</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> FileAttachment(filepath, filename <span class=\"type\">string</span>) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将服务端推送流写入响应流中</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> SSEvent(name <span class=\"type\">string</span>, message any) </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 发送一个流响应并返回一个布尔值，以此来判断客户端是否在流中间断开</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Stream(step <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(w io.Writer)</span></span> <span class=\"type\">bool</span>) <span class=\"type\">bool</span></span><br></pre></td></tr></table></figure>\r\n<p>对于大多数应用而言，用的最多的还是<code>context.JSON</code>，其他的相对而言要少一些，这里就不举例子演示了，因为都比较简单易懂，差不多都是直接调用的事情。</p>\r\n<h3 id=\"异步处理\">异步处理</h3>\r\n<p>在gin中，异步处理需要结合goroutine使用，使用起来十分简单。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// copy返回一个当前Context的副本以便在当前Context作用范围外安全的使用，可以用于传递给一个goroutine</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> Copy() *Context</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/hello&quot;</span>, Hello)</span><br><span class=\"line\">\tlog.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Hello</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tctx := c.Copy()</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 子协程应该使用Context的副本，不应该使用原始Context</span></span><br><span class=\"line\">\t\tlog.Println(<span class=\"string\">&quot;异步处理函数: &quot;</span>, ctx.HandlerNames())</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tlog.Println(<span class=\"string\">&quot;接口处理函数: &quot;</span>, c.HandlerNames())</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>测试</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;http://localhost:8080/hello&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<p>输出</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> 异步处理函数:  []</span><br><span class=\"line\"><span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> 接口处理函数:  [github.com/gin-gonic/gin.LoggerWithConfig.func1 github.com/gin-gonic/gin.CustomRecoveryWithWriter.func1 main.Hello]</span><br><span class=\"line\">[GIN] <span class=\"number\">2022</span>/<span class=\"number\">12</span>/<span class=\"number\">21</span> - <span class=\"number\">13</span>:<span class=\"number\">33</span>:<span class=\"number\">47</span> | <span class=\"number\">200</span> |     <span class=\"number\">11.1927</span>ms |             ::<span class=\"number\">1</span> | GET      <span class=\"string\">&quot;/hello&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p>可以看到两者输出不同，副本在复制时，为了安全考虑，删掉了许多元素的值。</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/26/post/golang/6-Gin-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/",
            "url": "http://example.com/2024/08/26/post/golang/6-Gin-%E5%8F%82%E6%95%B0%E8%A7%A3%E6%9E%90/",
            "title": "6-Gin-参数/数据解析",
            "date_published": "2024-08-26T09:12:33.792Z",
            "content_html": "<h1 id=\"gin-参数解析\">Gin-参数解析</h1>\r\n<p><code>gin</code>中的参数解析总共支持三种方式:<code>路由参数</code>，<code>URL参数</code>，<code>表单参数</code>，下面逐一讲解并结合代码示例，比较简单易懂。</p>\r\n<h2 id=\"路由参数\">路由参数</h2>\r\n<p>路由参数其实是封装了<code>HttpRouter</code>的参数解析功能，使用方法基本上与<code>HttpRouter</code>一致</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   e := gin.Default()</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/findUser/:username/:userid&quot;</span>, FindUser)</span><br><span class=\"line\">   e.GET(<span class=\"string\">&quot;/downloadFile/*filepath&quot;</span>, UserPage)</span><br><span class=\"line\"></span><br><span class=\"line\">   log.Fatalln(e.Run(<span class=\"string\">&quot;:8080&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 命名参数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   username := c.Param(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">   userid := c.Param(<span class=\"string\">&quot;userid&quot;</span>)</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;username is %s\\n userid is %s&quot;</span>, username, userid)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 路径参数示例</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserPage</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">   filepath := c.Param(<span class=\"string\">&quot;filepath&quot;</span>)</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;filepath is  %s&quot;</span>, filepath)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/findUser/jack/001&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is jack</span><br><span class=\"line\"> userid is 001</span><br></pre></td></tr></table></figure>\r\n<p>示例二</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/downloadFile/img/fruit.png&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">filepath is  /img/fruit.png</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"url参数\">URL参数</h2>\r\n<p>传统的URL参数，格式就是<code>/url?key=val&amp;key1=val1&amp;key2=val2</code></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e :=gin.Default()</span><br><span class=\"line\">    e.GET(<span class=\"string\">&quot;/findUser&quot;</span>,FindUser)</span><br><span class=\"line\">    log.Fatalln(e.Run(<span class=\"string\">&quot;:8084&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">FindUser</span><span class=\"params\">(c *gin.Context)</span></span>&#123;</span><br><span class=\"line\">    username := c.DefaultQuery(<span class=\"string\">&quot;username&quot;</span>,<span class=\"string\">&quot;defaultUser&quot;</span>)</span><br><span class=\"line\">    userid := c.Query(<span class=\"string\">&quot;userid&quot;</span>)</span><br><span class=\"line\">    c.String(http,StatusOK,<span class=\"string\">&quot;username is %s\\nuserid is %s&quot;</span>,username,userid)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;127.0.0.1:8080/findUser?username=jack&amp;userid=001&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is jack</span><br><span class=\"line\">userid is 001</span><br></pre></td></tr></table></figure>\r\n<p>示例二</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET &#x27;127.0.0.1:8080/findUser&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">username is defaultUser</span><br><span class=\"line\">userid is </span><br></pre></td></tr></table></figure>\r\n<h2 id=\"表单参数\">表单参数</h2>\r\n<p>表单的内容类型一般有<code>application/json</code>，<code>application/x-www-form-urlencoded</code>，<code>application/xml</code>，<code>multipart/form-data</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\te := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/register&quot;</span>, RegisterUser)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/update&quot;</span>, UpdateUser)</span><br><span class=\"line\">\te.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RegisterUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tusername := c.PostForm(<span class=\"string\">&quot;username&quot;</span>)</span><br><span class=\"line\">\tpassword := c.PostForm(<span class=\"string\">&quot;password&quot;</span>)</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;successfully registered,your username is [%s],password is [%s]&quot;</span>, username, password)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UpdateUser</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> form <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\tc.ShouldBind(&amp;form)</span><br><span class=\"line\">\tc.String(http.StatusOK, <span class=\"string\">&quot;successfully update,your username is [%s],password is [%s]&quot;</span>, form[<span class=\"string\">&quot;username&quot;</span>], form[<span class=\"string\">&quot;password&quot;</span>])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>示例一：使用<code>form-data</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/register&#x27; \\</span><br><span class=\"line\">--form &#x27;username=&quot;jack&quot;&#x27; \\</span><br><span class=\"line\">--form &#x27;password=&quot;123456&quot;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">successfully registered,your username is [jack],password is [123456]</span><br></pre></td></tr></table></figure>\r\n<p><code>PostForm</code>方法默认解析<code>application/x-www-form-urlencoded</code>和<code>multipart/form-data</code>类型的表单。</p>\r\n<p>示例二：使用<code>json</code></p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/update&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;username&quot;,</span><br><span class=\"line\">    &quot;password&quot;:&quot;123456&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">successfully update,your username is [username],password is [123456]</span><br></pre></td></tr></table></figure>\r\n<h1 id=\"gin-数据解析\">Gin-数据解析</h1>\r\n<p>在大多数情况下，我们都会使用结构体来承载数据，而不是直接解析参数。在<code>gin</code>中，用于数据绑定的方法主要是<code>Bind()</code>和<code>ShouldBind()</code>，两者的区别在于前者内部也是直接调用的<code>ShouldBind()</code>，当然返回<code>err</code>时，会直接进行400响应，后者则不会。如果想要更加灵活的进行错误处理，建议选择后者。这两个函数会自动根据请求的<code>content-type</code>来进行推断用什么方式解析。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *Context)</span></span> MustBindWith(obj any, b binding.Binding) <span class=\"type\">error</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用了ShouldBindWith()</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.ShouldBindWith(obj, b); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tc.AbortWithError(http.StatusBadRequest, err).SetType(ErrorTypeBind) <span class=\"comment\">// 直接响应400 badrequest</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>如果想要自行选择可以使用<code>BindWith()</code>和<code>ShouldBindWith()</code></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c.MustBindWith(obj, binding.JSON) <span class=\"comment\">//json</span></span><br><span class=\"line\">c.MustBindWith(obj, binding.XML) <span class=\"comment\">//xml</span></span><br></pre></td></tr></table></figure>\r\n<p>gin支持的绑定类型有如下几种实现：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">   JSON          = jsonBinding&#123;&#125;</span><br><span class=\"line\">   XML           = xmlBinding&#123;&#125;</span><br><span class=\"line\">   Form          = formBinding&#123;&#125;</span><br><span class=\"line\">   Query         = queryBinding&#123;&#125;</span><br><span class=\"line\">   FormPost      = formPostBinding&#123;&#125;</span><br><span class=\"line\">   FormMultipart = formMultipartBinding&#123;&#125;</span><br><span class=\"line\">   ProtoBuf      = protobufBinding&#123;&#125;</span><br><span class=\"line\">   MsgPack       = msgpackBinding&#123;&#125;</span><br><span class=\"line\">   YAML          = yamlBinding&#123;&#125;</span><br><span class=\"line\">   Uri           = uriBinding&#123;&#125;</span><br><span class=\"line\">   Header        = headerBinding&#123;&#125;</span><br><span class=\"line\">   TOML          = tomlBinding&#123;&#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n<p>示例</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LoginUser <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUsername <span class=\"type\">string</span> <span class=\"string\">`bind:&quot;required&quot; json:&quot;username&quot; form:&quot;username&quot; uri:&quot;username&quot;`</span></span><br><span class=\"line\">\tPassword <span class=\"type\">string</span> <span class=\"string\">`bind:&quot;required&quot; json:&quot;password&quot; form:&quot;password&quot; uri:&quot;password&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    e := gin.Default()</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/loginWithJSON&quot;</span>, Login)</span><br><span class=\"line\">\te.POST(<span class=\"string\">&quot;/loginWithForm&quot;</span>, Login)</span><br><span class=\"line\">\te.GET(<span class=\"string\">&quot;/loginWithQuery/:username/:password&quot;</span>, Login)</span><br><span class=\"line\">\te.Run(<span class=\"string\">&quot;:8080&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Login</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> login LoginUser</span><br><span class=\"line\">    <span class=\"comment\">// 使用ShouldBind来让gin自动推断</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> c.ShouldBind(&amp;login) == <span class=\"literal\">nil</span> &amp;&amp; login.Password != <span class=\"string\">&quot;&quot;</span> &amp;&amp; login.Username != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusOK, <span class=\"string\">&quot;login successfully !&quot;</span>)</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tc.String(http.StatusBadRequest, <span class=\"string\">&quot;login failed !&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(login)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"json数据绑定\">Json数据绑定</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST &#x27;127.0.0.1:8080/loginWithJSON&#x27; \\</span><br><span class=\"line\">--header &#x27;Content-Type: application/json&#x27; \\</span><br><span class=\"line\">--data-raw &#x27;&#123;</span><br><span class=\"line\">    &quot;username&quot;:&quot;root&quot;,</span><br><span class=\"line\">    &quot;password&quot;:&quot;root&quot;</span><br><span class=\"line\">&#125;&#x27;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login successfully !</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"表单数据绑定\">表单数据绑定</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request POST <span class=\"string\">&#x27;127.0.0.1:8080/loginWithForm&#x27;</span> \\</span><br><span class=\"line\">--form <span class=\"string\">&#x27;username=&quot;root&quot;&#x27;</span> \\</span><br><span class=\"line\">--form <span class=\"string\">&#x27;password=&quot;root&quot;&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login successfully !</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"url数据绑定\">URL数据绑定</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --location --request GET <span class=\"string\">&#x27;127.0.0.1:8080/loginWithQuery/root/root&#x27;</span></span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">login failed !</span><br></pre></td></tr></table></figure>\r\n<p>到了这里就会发生错误了，因为这里输出的<code>content-type</code>是空字符串，无法推断到底是要如何进行数据解析。所以当使用URL参数时，我们应该手动指定解析方式，例如：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err := c.ShouldBindUri(&amp;login); err == <span class=\"literal\">nil</span> &amp;&amp; login.Password != <span class=\"string\">&quot;&quot;</span> &amp;&amp; login.Username != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">   c.String(http.StatusOK, <span class=\"string\">&quot;login successfully !&quot;</span>)</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">   fmt.Println(err)</span><br><span class=\"line\">   c.String(http.StatusBadRequest, <span class=\"string\">&quot;login failed !&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多次绑定\">多次绑定</h3>\r\n<p>一般方法都是通过调用 <code>c.Request.Body</code>\r\n方法绑定数据，但不能多次调用这个方法，例如<code>c.ShouldBind</code>，不可重用，如果想要多次绑定的话，可以使用</p>\r\n<p><code>c.ShouldBindBodyWith</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeHandler</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">  objA := formA&#123;&#125;</span><br><span class=\"line\">  objB := formB&#123;&#125;</span><br><span class=\"line\">  <span class=\"comment\">// 读取 c.Request.Body 并将结果存入上下文。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> errA := c.ShouldBindBodyWith(&amp;objA, binding.JSON); errA == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formA`</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 这时, 复用存储在上下文中的 body。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> errB := c.ShouldBindBodyWith(&amp;objB, binding.JSON); errB == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formB JSON`</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 可以接受其他格式</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> errB2 := c.ShouldBindBodyWith(&amp;objB, binding.XML); errB2 == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    c.String(http.StatusOK, <span class=\"string\">`the body should be formB XML`</span>)</span><br><span class=\"line\">  &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<div class=\"primary\">\r\n<p><code>c.ShouldBindBodyWith</code> 会在绑定之前将 body\r\n存储到上下文中。\r\n这会对性能造成轻微影响，如果调用一次就能完成绑定的话，那就不要用这个方法。只有某些格式需要此功能，如\r\n<code>JSON</code>, <code>XML</code>, <code>MsgPack</code>,\r\n<code>ProtoBuf</code>。 对于其他格式, 如 <code>Query</code>,\r\n<code>Form</code>, <code>FormPost</code>, <code>FormMultipart</code>\r\n可以多次调用<code>c.ShouldBind()</code> 而不会造成任何性能损失 。</p>\r\n</div>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/26/post/golang/5-Gin-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/",
            "url": "http://example.com/2024/08/26/post/golang/5-Gin-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/",
            "title": "5-Gin-快速开始",
            "date_published": "2024-08-26T08:53:08.309Z",
            "content_html": "<h1\r\nid=\"go-web框架-gin-快速开始\">Go-&gt;Web框架-&gt;Gin-&gt;快速开始</h1>\r\n<h2 id=\"介绍\">介绍</h2>\r\n<p>Gin 是一个用 Go (Golang) 编写的 Web 框架。 它具有类似 martini 的\r\nAPI，性能要好得多，多亏了 <code>httprouter</code>，速度提高了 40 倍。\r\n如果您需要性能和良好的生产力，您一定会喜欢\r\nGin。Gin相比于Iris和Beego而言，更倾向于轻量化的框架，只负责Web部分，追求极致的路由性能，功能或许没那么全，胜在轻量易拓展，这也是它的优点。因此，在所有的Web框架中，Gin是最容易上手和学习的。</p>\r\n<h2 id=\"特性\">特性</h2>\r\n<ul>\r\n<li><strong>快速</strong>：基于 Radix\r\n树的路由，小内存占用。没有反射。可预测的 API 性能。</li>\r\n<li><strong>支持中间件</strong>：传入的 HTTP\r\n请求可以由一系列中间件和最终操作来处理。\r\n例如：Logger，Authorization，GZIP，最终操作 DB。</li>\r\n<li><strong>Crash 处理</strong>：Gin 可以 catch 一个发生在 HTTP 请求中的\r\npanic 并 recover 它。这样，你的服务器将始终可用。</li>\r\n<li><strong>JSON 验证</strong>：Gin 可以解析并验证请求的\r\nJSON，例如检查所需值的存在。</li>\r\n<li><strong>路由组</strong>：更好地组织路由。是否需要授权，不同的 API\r\n版本…… 此外，这些组可以无限制地嵌套而不会降低性能。</li>\r\n<li><strong>错误管理</strong>：Gin 提供了一种方便的方法来收集 HTTP\r\n请求期间发生的所有错误。最终，中间件可以将它们写入日志文件，数据库并通过网络发送。</li>\r\n<li><strong>内置渲染</strong>：Gin 为 JSON，XML 和 HTML\r\n渲染提供了易于使用的 API。</li>\r\n<li><strong>可扩展性</strong>：新建一个中间件非常简单</li>\r\n</ul>\r\n<h2 id=\"安装\"><a\r\nhref=\"https://golang.halfiisland.com/community/pkgs/web/gin.html#安装\"></a>安装</h2>\r\n<p>截止目前<code>2022/11/22</code>，gin支持的go最低版本为<code>1.16</code>，建议使用<code>go mod</code>来管理项目依赖。</p>\r\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get <span class=\"literal\">-u</span> github.com/<span class=\"built_in\">gin</span><span class=\"literal\">-gonic</span>/<span class=\"built_in\">gin</span></span><br></pre></td></tr></table></figure>\r\n<p>导入</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>注意</strong>这边网站是github会出现下载超时问题如出现则重新配置代理</p>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> go <span class=\"built_in\">env</span> -w GO111MODULE=on</span><br><span class=\"line\"> go <span class=\"built_in\">env</span> -w GOPROXY=https://goproxy.cn,direct</span><br><span class=\"line\"> go mod init <span class=\"string\">&quot;项目名称自己的&quot;</span></span><br><span class=\"line\">//安装MySQL驱动</span><br><span class=\"line\">go get -u gorm.io/driver/mysql</span><br><span class=\"line\">go get -u github.com/jinzhu/gorm</span><br><span class=\"line\"></span><br><span class=\"line\">最后输入</span><br><span class=\"line\">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure>\r\n<p>结束后会出现go.mod文件</p>\r\n<p><img\r\nsrc=\"https://dlink.host/wx2.sinaimg.cn/large/006V2BDqly8ht1dzztt85j310s0qrjwf.jpg\" /></p>\r\n<h2 id=\"快速开始\">快速开始</h2>\r\n<p>在demo2下创建main.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">   <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">   <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   engine := gin.Default() <span class=\"comment\">//创建gin引擎</span></span><br><span class=\"line\">   engine.GET(<span class=\"string\">&quot;/ping&quot;</span>, <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(context *gin.Context)</span></span> &#123;</span><br><span class=\"line\">      context.JSON(http.StatusOK, gin.H&#123;</span><br><span class=\"line\">         <span class=\"string\">&quot;message&quot;</span>: <span class=\"string\">&quot;pong&quot;</span>,</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\">   engine.Run() <span class=\"comment\">//开启服务器，默认监听localhost:8080</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>请求URL</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET localhost:<span class=\"number\">8080</span>/ping</span><br></pre></td></tr></table></figure>\r\n<p>返回</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HTTP/1.1 200 OK</span><br><span class=\"line\">Content-Type: application/json; charset=utf-8</span><br><span class=\"line\">Date: Tue, 22 Nov 2022 08:47:11 GMT</span><br><span class=\"line\">Content-Length: 18</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;message&quot;: &quot;pong&quot;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Response file saved.</span><br><span class=\"line\">&gt; 2022-11-22T164711.200.json</span><br></pre></td></tr></table></figure>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1e6hxc7pj316p0qcq8r.jpg\" /></p>\r\n<h2 id=\"基础框架搭建\">基础框架搭建</h2>\r\n<p><strong>集成Swagger依赖</strong></p>\r\n<p>在Gin框架中使用Swagger可以通过gin-swagger这个库来实现。你可以通过以下步骤来安装gin-swagger并集成Swagger：</p>\r\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com/swaggo/gin-swagger</span><br><span class=\"line\">go get -u github.com/swaggo/files</span><br><span class=\"line\"></span><br><span class=\"line\">//安装swag命令行工具</span><br><span class=\"line\">go get -u github.com/swaggo/swag/cmd/swag</span><br></pre></td></tr></table></figure>\r\n<p>下载完之后在终端输入swag init产生docs文件。</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1evrr89lj308y05aq33.jpg\" /></p>\r\n<p><strong>注意</strong>：如果产生报错--显示 'swag'\r\n不是内部或外部命令</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swag : The term &#x27;swag&#x27; is not recognized as the name of a cmdlet, function, script file, or operable program. Check  </span><br><span class=\"line\">the spelling of the name, or if a path was included, verify that the path is correct and try again.</span><br><span class=\"line\">At line:1 char:1</span><br><span class=\"line\">+ swag init</span><br><span class=\"line\">+ ~~~~</span><br><span class=\"line\">    + CategoryInfo          : ObjectNotFound: (swag:String) [], CommandNotFoundException</span><br><span class=\"line\">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure>\r\n<p>进入到</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\你的用户名\\go\\pkg\\mod\\github.com\\swaggo\\swag@v1.8.7\\cmd\\swag</span><br></pre></td></tr></table></figure>\r\n<p>然后cmd，输入指令 <code>go install</code></p>\r\n<p>在</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\Users\\你的用户名\\go\\bin   会有 swag.exe文件生成（保存路径时不带swag.exe）</span><br></pre></td></tr></table></figure>\r\n<p>将这个路径保存到环境变量即可</p>\r\n<h2 id=\"完成一个基础的登陆业务\">完成一个基础的登陆业务</h2>\r\n<h3\r\nid=\"创建common文件夹配置相关请求头以及请求状态\">创建common文件夹配置相关请求头以及请求状态</h3>\r\n<p>ApiResponseEnum.go文件配置相关的请求头</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ApiResponseEnum <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\tAIREADY_EXISTS   ApiResponseEnum = <span class=\"string\">&quot;-4:密码重复&quot;</span></span><br><span class=\"line\">\tSUCCESS          ApiResponseEnum = <span class=\"string\">&quot;0:成功&quot;</span></span><br><span class=\"line\">\tERROR_PARAM      ApiResponseEnum = <span class=\"string\">&quot;-2:参数错误&quot;</span></span><br><span class=\"line\">\tERROR_DATA_EMPTY ApiResponseEnum = <span class=\"string\">&quot;-3:无数据&quot;</span></span><br><span class=\"line\">\tFAIL             ApiResponseEnum = <span class=\"string\">&quot;-1:失败&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a ApiResponseEnum)</span></span> GetCode() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tcodeMap := <span class=\"keyword\">map</span>[ApiResponseEnum]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\tAIREADY_EXISTS:   <span class=\"string\">&quot;-4&quot;</span>,</span><br><span class=\"line\">\t\tSUCCESS:          <span class=\"string\">&quot;0&quot;</span>,</span><br><span class=\"line\">\t\tERROR_PARAM:      <span class=\"string\">&quot;-2&quot;</span>,</span><br><span class=\"line\">\t\tERROR_DATA_EMPTY: <span class=\"string\">&quot;-3&quot;</span>,</span><br><span class=\"line\">\t\tFAIL:             <span class=\"string\">&quot;-1&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> codeMap[a]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(a ApiResponseEnum)</span></span> GetName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\tcodeMsgMap := <span class=\"keyword\">map</span>[ApiResponseEnum]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\tAIREADY_EXISTS:   <span class=\"string\">&quot;密码重复&quot;</span>,</span><br><span class=\"line\">\t\tSUCCESS:          <span class=\"string\">&quot;成功&quot;</span>,</span><br><span class=\"line\">\t\tERROR_PARAM:      <span class=\"string\">&quot;参数错误&quot;</span>,</span><br><span class=\"line\">\t\tERROR_DATA_EMPTY: <span class=\"string\">&quot;无数据&quot;</span>,</span><br><span class=\"line\">\t\tFAIL:             <span class=\"string\">&quot;失败&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> codeMsgMap[a]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>ApiResponseObject获取请求状态</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ApiResponseObject <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tErrorCode <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;errorCode&quot;`</span></span><br><span class=\"line\">\tErrorMsg  <span class=\"type\">string</span>      <span class=\"string\">`json:&quot;errorMsg&quot;`</span></span><br><span class=\"line\">\tData      <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"string\">`json:&quot;data&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetErrorCode() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.ErrorCode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetErrorCode(errorCode <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresponse.ErrorCode = errorCode</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetErrorMsg() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.ErrorMsg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetErrorMsg(errorMsg <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\tresponse.ErrorMsg = errorMsg</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> GetData() <span class=\"keyword\">interface</span>&#123;&#125; &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> response.Data</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(response *ApiResponseObject)</span></span> SetData(data <span class=\"keyword\">interface</span>&#123;&#125;) &#123;</span><br><span class=\"line\">\tresponse.Data = data</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>HttpClientTool配置请求接口</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOGIN <span class=\"type\">string</span> =  <span class=\"string\">&quot;/login&quot;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"controllers发布接口文件夹\">controllers发布接口文件夹</h3>\r\n<p>bstractApiController.go数据处理文件</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllerspackage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tAPI <span class=\"string\">&quot;YV/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReponseJSON</span><span class=\"params\">(errorCode <span class=\"type\">string</span>, errorMsg <span class=\"type\">string</span>, resData <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> API.ApiResponseObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tapiResponseObject := API.ApiResponseObject&#123;&#125;</span><br><span class=\"line\">\tapiResponseObject.SetData(resData)</span><br><span class=\"line\">\tapiResponseObject.SetErrorMsg(errorMsg)</span><br><span class=\"line\">\tapiResponseObject.SetErrorCode(errorCode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> apiResponseObject</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>根据项目要求创建相应的文件我这里创建LOGIN文件等其他配置完成在写</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1f1xxbmrj30a7095q3g.jpg\" /></p>\r\n<h3 id=\"model数据库配置以及增删改查\">model数据库配置以及增删改查</h3>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1f7499xwj307203lq2u.jpg\" /></p>\r\n<p>像这样创建文件夹</p>\r\n<p>core.go配置数据库连接</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> v1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> dsn <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">LV1</span><span class=\"params\">()</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 参考 https://github.com/go-sql-driver/mysql#dsn-data-source-name 获取详情</span></span><br><span class=\"line\">\tusername := <span class=\"string\">&quot;root&quot;</span>   <span class=\"comment\">//账号</span></span><br><span class=\"line\">\tpassword := <span class=\"string\">&quot;123456&quot;</span> <span class=\"comment\">//密码</span></span><br><span class=\"line\">\thost := <span class=\"string\">&quot;&quot;</span>           <span class=\"comment\">//数据库地123456址，可以是Ip或者域名</span></span><br><span class=\"line\">\tport := <span class=\"number\">3306</span>         <span class=\"comment\">//数据库端口</span></span><br><span class=\"line\">\tDbname := <span class=\"string\">&quot;demo&quot;</span>     <span class=\"comment\">//数据库名</span></span><br><span class=\"line\">\ttimeout := <span class=\"string\">&quot;10s&quot;</span>     <span class=\"comment\">//连接超时，10秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//拼接下dsn参数, dsn格式可以参考上面的语法，这里使用Sprintf动态拼接dsn参数，因为一般数据库连接参数，我们都是保存在配置文件里面，需要从配置文件加载参数，然后拼接dsn。</span></span><br><span class=\"line\">\tdsn = fmt.Sprintf(<span class=\"string\">&quot;%s:%s@tcp(%s:%d)/%s?charset=utf8&amp;parseTime=True&amp;loc=Local&amp;timeout=%s&quot;</span>, username, password, host, port, Dbname, timeout)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dsn</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>初始化数据库代码，后面加到main.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> dataBase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t_ <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\tv1 <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> err <span class=\"type\">error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DB *gorm.DB</span><br><span class=\"line\"><span class=\"keyword\">var</span> Base <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tBase = v1.LV1() <span class=\"comment\">//切换L1数据库</span></span><br><span class=\"line\">\tDB, err = gorm.Open(mysql.Open(Base), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败, error=&quot;</span> + err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3\r\nid=\"创建router文件夹里面创建app.go主要管理所有发布接口\">创建router文件夹里面创建app.go主要管理所有发布接口</h3>\r\n<p>app.go</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Router</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3\r\nid=\"创建services文件夹管理各自接口\">创建services文件夹管理各自接口</h3>\r\n<h3 id=\"最后修改main文件\">最后修改main文件</h3>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tv1 <span class=\"string\">&quot;demo2/model/dataBase/v1&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/router&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/driver/mysql&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> err <span class=\"type\">error</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> DB *gorm.DB</span><br><span class=\"line\"><span class=\"keyword\">var</span> Base <span class=\"type\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">init</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tBase = v1.LV1() <span class=\"comment\">//切换L1数据库</span></span><br><span class=\"line\">\tDB, err = gorm.Open(mysql.Open(Base), &amp;gorm.Config&#123;&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;连接数据库失败, error=&quot;</span> + err.Error())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := router.Router()</span><br><span class=\"line\"></span><br><span class=\"line\">\terr := r.Run()</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>成品如下：</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1otcjikdj312c0l6q4x.jpg\" /></p>\r\n<h3 id=\"简单使用\">简单使用</h3>\r\n<p>完成一个简单的查询使用 查询id 为1 的用户</p>\r\n<p>1.在HttpClientTool.go文件中生成接口</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> API</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> LOGIN <span class=\"type\">string</span> = <span class=\"string\">&quot;/login&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> GETUSER <span class=\"type\">string</span> = <span class=\"string\">&quot;/get/user&quot;</span></span><br></pre></td></tr></table></figure>\r\n<p>2.在services文件下生UserService.go文件调用API以及调用还没有创建的方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> services</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    API <span class=\"string\">&quot;demo2/common&quot;</span></span><br><span class=\"line\">    controllerspackage <span class=\"string\">&quot;demo2/controllers&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UserService</span><span class=\"params\">(r *gin.Engine)</span></span> *gin.Engine &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;注册路由&quot;</span>)</span><br><span class=\"line\">    r.GET(API.GETUSER, controllerspackage.GetUserImpl)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>3.在app.go声明</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> router</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/services&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Router</span><span class=\"params\">()</span></span> *gin.Engine &#123;</span><br><span class=\"line\">\tr := gin.Default()</span><br><span class=\"line\">\tservices.UserService(r)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> r</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>4.在model文件夹下的user.go文件中启动查询方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> model</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;gorm.io/gorm&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tId   <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;id&quot; gorm:&quot;column:id&quot;`</span></span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot; gorm:&quot;column:name&quot;`</span></span><br><span class=\"line\">\tTel  <span class=\"type\">string</span> <span class=\"string\">`json:&quot;tel&quot; gorm:&quot;column:tel&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(User)</span></span> TableName() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;user&quot;</span></span><br><span class=\"line\">&#125; <span class=\"comment\">//作用是指到user表</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// SelectUser selectUser查询</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SelectUser</span><span class=\"params\">(db *gorm.DB, userId <span class=\"type\">int</span>)</span></span> ([]User, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> users []User</span><br><span class=\"line\">\tresult := db.Where(<span class=\"string\">&quot;id = ?&quot;</span>, userId).Find(&amp;users)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(users) == <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> users, result.Error</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> users, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// updateUser 修改</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">UpdateUser</span><span class=\"params\">(db *gorm.DB, userId <span class=\"type\">int</span>, name <span class=\"type\">string</span>)</span></span> (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> user User</span><br><span class=\"line\">\tresult := db.Model(&amp;user).Where(<span class=\"string\">&quot;id = ?&quot;</span>, userId).Update(<span class=\"string\">&quot;name&quot;</span>, name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> result.Error != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//创建记录时出现错误</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>, result.Error</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//修改成功</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>5.在controllers创建GetUserImpl方法</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> controllerspackage</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\tAPI <span class=\"string\">&quot;demo2/common&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/model&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;demo2/model/dataBase&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ReponseJSON</span><span class=\"params\">(errorCode <span class=\"type\">string</span>, errorMsg <span class=\"type\">string</span>, resData <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> API.ApiResponseObject &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tapiResponseObject := API.ApiResponseObject&#123;&#125;</span><br><span class=\"line\">\tapiResponseObject.SetData(resData)</span><br><span class=\"line\">\tapiResponseObject.SetErrorMsg(errorMsg)</span><br><span class=\"line\">\tapiResponseObject.SetErrorCode(errorCode)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> apiResponseObject</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">GetUserImpl</span><span class=\"params\">(ctx *gin.Context)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//查询id为1的用户</span></span><br><span class=\"line\">\tStatus, _ := model.SelectUser(dataBase.DB, <span class=\"number\">1</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> Status == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tctx.JSON(http.StatusNotFound, ReponseJSON(API.FAIL.GetCode(), API.FAIL.GetName(), <span class=\"number\">0</span>))</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//打印返回值</span></span><br><span class=\"line\">\t\tctx.JSON(http.StatusOK, ReponseJSON(API.SUCCESS.GetCode(), API.SUCCESS.GetName(), Status))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>启动main使用工具访问</p>\r\n<p><img\r\nsrc=\"D:\\Pictures\\typore\\006V2BDqly8ht1ovhwstzj30i90ek752.jpg\" /></p>\r\n<p>OK，就完成了一个简单的查询业务！</p>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/22/post/golang/3-Go%E6%8C%87%E5%8D%97-%E6%B3%9B%E5%9E%8B/",
            "url": "http://example.com/2024/08/22/post/golang/3-Go%E6%8C%87%E5%8D%97-%E6%B3%9B%E5%9E%8B/",
            "title": "3-Go指南-泛型",
            "date_published": "2024-08-22T10:02:07.405Z",
            "content_html": "<h1 id=\"go指南-泛型\">Go指南-泛型</h1>\r\n<h3 id=\"类型参数\">1、类型参数</h3>\r\n<p>可以使用类型参数编写Go函数来处理多种类型。函数的类型参数出现在函数参数之前的方括号之间。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span>[<span class=\"title\">T</span> <span class=\"title\">comparables</span>]<span class=\"params\">(s []T,x T)</span></span> <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\r\n<p>此声明意味着s是满足内置约束条件 <code>comparables</code>的任何类型\r\n<code>T</code>的切片，<code>x</code>也是相同类型的值。</p>\r\n<p><code>comparable</code>是一个有用的约束，它能让我们对任意满足该类型的值使用\r\n== 和！=运算符。</p>\r\n<p>在此示例中，我们使用它将所有切片元素进行比较，直到找到匹配项。该Index函数使用与任何支持比较的类型</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Index 返回 x 在 s 中的下标，未找到则返回 -1。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Index</span>[<span class=\"title\">T</span> <span class=\"title\">comparable</span>]<span class=\"params\">(s []T, x T)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// v 和 x 的类型为 T，它拥有 comparable 可比较的约束，</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 因此我们可以使用 ==。</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> v == x &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> i</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Index 可以在整数切片上使用</span></span><br><span class=\"line\">\tsi := []<span class=\"type\">int</span>&#123;<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">15</span>, <span class=\"number\">-10</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Index(si, <span class=\"number\">15</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// Index 也可以在字符串切片上使用</span></span><br><span class=\"line\">\tss := []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;foo&quot;</span>, <span class=\"string\">&quot;bar&quot;</span>, <span class=\"string\">&quot;baz&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Index(ss, <span class=\"string\">&quot;hello&quot;</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2  -1</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"泛型类型\">2、泛型类型</h3>\r\n<p>除了泛型函数之外，Go还支持泛型类型。类型可以使用类型参数进行参数化，这对于实现通用数据结构非常有用。</p>\r\n<p>此示例展示了能够保存任意类型值的单链表的简单类型的声明。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// List 表示一个可以保存任何类型的值的单链表。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> List[T any] <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tnext *List[T]</span><br><span class=\"line\">\tval  T</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/22/post/golang/4-Go%E6%8C%87%E5%8D%97-%E5%B9%B6%E5%8F%91/",
            "url": "http://example.com/2024/08/22/post/golang/4-Go%E6%8C%87%E5%8D%97-%E5%B9%B6%E5%8F%91/",
            "title": "4-Go指南-并发",
            "date_published": "2024-08-22T10:02:03.958Z",
            "content_html": "<h1 id=\"go指南-并发\">Go指南-并发</h1>\r\n<h3 id=\"go协程\">1、Go协程</h3>\r\n<p>Go 程（goroutine）是由 Go 运行时管理的轻量级线程。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go f(x,y,z)</span><br></pre></td></tr></table></figure>\r\n<p>会启动一个新的Go协程并执行</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">f(x,y,z)</span><br></pre></td></tr></table></figure>\r\n<p>f,x,y和z的求值发生在当前的Go协程中，而f的执行发生在新的Go协程中。\r\nGo程在相同的地址空间中运行，因此在访问共享的内存时必须进行同步。sync包提供了这种能力，不过在Go中并不经常用到，因为还有其他方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">say</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++ &#123;</span><br><span class=\"line\">\t\ttime.Sleep(<span class=\"number\">100</span> * time.Millisecond)</span><br><span class=\"line\">\t\tfmt.Println(s)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> say(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tsay(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"信道\">2、信道</h3>\r\n<p>信道是带有类型的管道，你可以通过它用信道操作符<code>&lt;-</code>来发送或者接收值</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch &lt;- v //将v发送至信道ch</span><br><span class=\"line\">v := &lt;-ch //从ch接收值并赋予v</span><br></pre></td></tr></table></figure>\r\n<p>箭头就是数据流的方法</p>\r\n<p>和映射与切片一样，信道在使用前必须创建</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch := make(chan int)</span><br></pre></td></tr></table></figure>\r\n<p>默认情况下，发送和接收操作在另一端准备好之前都会阻塞。这使得Go程可以在没有显式的锁或竞态变量的情况下进行同步。</p>\r\n<p>以下实例对切片中的数进行求和，将任务分配给两个Go程。一旦两个Go程完成了它们的计算，它就能算出最终的结果。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sum</span><span class=\"params\">(s []<span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, v := <span class=\"keyword\">range</span> s &#123;</span><br><span class=\"line\">\t\tsum += v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc &lt;- sum <span class=\"comment\">// 发送 sum 到 c</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">-9</span>, <span class=\"number\">4</span>, <span class=\"number\">0</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum(s[:<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>], c)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> sum(s[<span class=\"built_in\">len</span>(s)/<span class=\"number\">2</span>:], c)</span><br><span class=\"line\">\tx, y := &lt;-c, &lt;-c <span class=\"comment\">// 从 c 接收</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(x, y, x+y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//-5 17 12</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>带缓冲的信道</strong></p>\r\n<p>信道可以是<strong>带缓冲的</strong>。将缓冲长度作为第二个参数提供给<code>make</code>来初始化一个带参数的信道：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ch := make(chan int,100)</span><br></pre></td></tr></table></figure>\r\n<p>仅当信道的缓冲区填满后，向其发送数据时才会阻塞。当缓冲区为空时，接受方会阻塞。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tch := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">\tch &lt;- <span class=\"number\">1</span></span><br><span class=\"line\">\tch &lt;- <span class=\"number\">2</span></span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">\tfmt.Println(&lt;-ch)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"range和close\">3、range和close</h3>\r\n<p>发送者可以通过close关闭一个信道来表示没有需要发送的值了。接收者可以通过为接收表达式分配第二个参数来测试信道是否被关闭：若没有值可以接收且信道已被关闭，那么在执行完</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v,ok := &lt;-ch</span><br></pre></td></tr></table></figure>\r\n<p>此时 <code>ok</code> 会被设置为 <code>false</code>。</p>\r\n<p>循环 <code>for i := range c</code>\r\n会不断从信道接收值，直到它被关闭。</p>\r\n<p><strong>注意</strong>：\r\n只应由发送者关闭信道，而不应油接收者关闭。向一个已经关闭的信道发送数据会引发程序\r\npanic。</p>\r\n<p><strong>还要注意</strong>：\r\n信道与文件不同，通常情况下无需关闭它们。只有在必须告诉接收者不再有需要发送的值时才有必要关闭，例如终止一个\r\n<code>range</code> 循环。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(n <span class=\"type\">int</span>, c <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tc &lt;- x</span><br><span class=\"line\">\t\tx, y = y, x+y</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">close</span>(c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> fibonacci(<span class=\"built_in\">cap</span>(c), c)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> c &#123;</span><br><span class=\"line\">\t\tfmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"select语句\">4、select语句</h3>\r\n<p>select语句使一个Go程可以等待多个通信操作。</p>\r\n<p>select会阻塞到某个分支可以继续执行为止，这时就会执行该分支。当多个分支都准备好时会随机选择一个执行。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">(c, quit <span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tx, y := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> c &lt;- x:</span><br><span class=\"line\">\t\t\tx, y = y, x+y</span><br><span class=\"line\">\t\t<span class=\"keyword\">case</span> &lt;-quit:</span><br><span class=\"line\">\t\t\tfmt.Println(<span class=\"string\">&quot;quit&quot;</span>)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\tquit := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"type\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t\tfmt.Println(&lt;-c)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tquit &lt;- <span class=\"number\">0</span></span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">\tfibonacci(c, quit)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 1 1 2 3 5 8 13 21 34 quit</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>默认选择</strong></p>\r\n<p>当 <code>select</code>\r\n中的其它分支都没有准备好时，<code>default</code> 分支就会执行。</p>\r\n<p>为了在尝试发送或者接收时不发生阻塞，可使用 <code>default</code>\r\n分支：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> i := &lt;-c:</span><br><span class=\"line\">    <span class=\"comment\">// 使用 i</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 从 c 中接收会阻塞时执行</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"sync.mutex\">5、sync.Mutex</h3>\r\n<p>我们已经看到信道非常适合在各个Go程间进行通信。</p>\r\n<p>但是如果我们并不需要通信呢？比如说，若我们只是想保证每次只有一个Go程能够访问一个共享的变量，从而避免冲突？</p>\r\n<p>这里涉及的概念叫做 **互斥（mutual*exclusion<strong>，我们通常使用\r\n</strong>互斥锁（Mutex）**这一数据结构来提供这种机制。</p>\r\n<p>Go标准库中提供了 <a\r\nhref=\"https://go-zh.org/pkg/sync/#Mutex\"><code>sync.Mutex</code></a>\r\n互斥锁类型及其两个方法：</p>\r\n<ul>\r\n<li><code>Lock</code></li>\r\n<li><code>Unlock</code></li>\r\n</ul>\r\n<p>我们可以通过在代码前调用 <code>Lock</code> 方法，在代码后调用\r\n<code>Unlock</code> 方法来保证一段代码的互斥执行。参见 <code>Inc</code>\r\n方法。</p>\r\n<p>我们也可以用 <code>defer</code> 语句来保证互斥锁一定会被解锁。参见\r\n<code>Value</code> 方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;sync&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//SafeCounter 是并发安全的</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> SafeCounter <span class=\"keyword\">struct</span>&#123;</span><br><span class=\"line\">    mu sync.Mutex</span><br><span class=\"line\">    v <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Inc 对给定键的计数加一</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span></span> lnc(key <span class=\"type\">string</span>)&#123;</span><br><span class=\"line\">    c.muu.Lock()</span><br><span class=\"line\">    <span class=\"comment\">//锁定使得一次只有一个Go协程可以访问映射c.v</span></span><br><span class=\"line\">    c.v[key]++</span><br><span class=\"line\">    c.mu.Unlock()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Value 返回给定键的计数的当前值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(c *SafeCounter)</span></span>Vlaue(key <span class=\"type\">string</span>)<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">    c.mu.Lock()</span><br><span class=\"line\">\t<span class=\"comment\">// 锁定使得一次只有一个 Go 协程可以访问映射 c.v。</span></span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> c.mu.Unlock()</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> c.v[key]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tc := SafeCounter&#123;v: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">go</span> c.Inc(<span class=\"string\">&quot;somekey&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ttime.Sleep(time.Second)</span><br><span class=\"line\">\tfmt.Println(c.Value(<span class=\"string\">&quot;somekey&quot;</span>))</span><br><span class=\"line\">&#125;<span class=\"comment\">//1000</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"练习web-爬虫\">练习：Web 爬虫</h2>\r\n<p>在这个练习中，我们将会使用 Go 的并发特性来并行化一个 Web 爬虫。</p>\r\n<p>修改 <code>Crawl</code> 函数来并行地抓取 URL，并且保证不重复。</p>\r\n<p><em>提示：</em> 你可以用一个 map 来缓存已经获取的 URL，但是要注意 map\r\n本身并不是并发安全的！</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Fetcher <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Fetch 返回 URL 所指向页面的 body 内容，</span></span><br><span class=\"line\">\t<span class=\"comment\">// 并将该页面上找到的所有 URL 放到一个切片中。</span></span><br><span class=\"line\">\tFetch(url <span class=\"type\">string</span>) (body <span class=\"type\">string</span>, urls []<span class=\"type\">string</span>, err <span class=\"type\">error</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Crawl 用 fetcher 从某个 URL 开始递归的爬取页面，直到达到最大深度。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Crawl</span><span class=\"params\">(url <span class=\"type\">string</span>, depth <span class=\"type\">int</span>, fetcher Fetcher)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 并行地爬取 URL。</span></span><br><span class=\"line\">\t<span class=\"comment\">// <span class=\"doctag\">TODO:</span> 不重复爬取页面。</span></span><br><span class=\"line\">\t<span class=\"comment\">// 下面并没有实现上面两种情况：</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> depth &lt;= <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tbody, urls, err := fetcher.Fetch(url)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;found: %s %q\\n&quot;</span>, url, body)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> urls &#123;</span><br><span class=\"line\">\t\tCrawl(u, depth<span class=\"number\">-1</span>, fetcher)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tCrawl(<span class=\"string\">&quot;https://golang.org/&quot;</span>, <span class=\"number\">4</span>, fetcher)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fakeFetcher 是待填充结果的 Fetcher。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> fakeFetcher <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]*fakeResult</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> fakeResult <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tbody <span class=\"type\">string</span></span><br><span class=\"line\">\turls []<span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f fakeFetcher)</span></span> Fetch(url <span class=\"type\">string</span>) (<span class=\"type\">string</span>, []<span class=\"type\">string</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> res, ok := f[url]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res.body, res.urls, <span class=\"literal\">nil</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;not found: %s&quot;</span>, url)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fetcher 是填充后的 fakeFetcher。</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fetcher = fakeFetcher&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;The Go Programming Language&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Packages&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/cmd/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/fmt/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/os/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/fmt/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Package fmt&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;https://golang.org/pkg/os/&quot;</span>: &amp;fakeResult&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Package os&quot;</span>,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;https://golang.org/pkg/&quot;</span>,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/20/post/golang/02-Go%E6%8C%87%E5%8D%97-%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/",
            "url": "http://example.com/2024/08/20/post/golang/02-Go%E6%8C%87%E5%8D%97-%E6%96%B9%E6%B3%95%E5%92%8C%E6%8E%A5%E5%8F%A3/",
            "title": "2-Go指南-方法和接口",
            "date_published": "2024-08-20T13:47:25.218Z",
            "content_html": "<h1 id=\"go指南-方法和接口\">Go指南-方法和接口</h1>\r\n<h3 id=\"方法\">1、方法</h3>\r\n<p>Go没有类。不过你可以为类型定义方法。</p>\r\n<p>方法就是一带特殊的 <strong>接收者</strong> 参数的函数。</p>\r\n<p>方法接收值在它自己的参数列表中，位于\r\n<code>func</code>关键字和方法名之间。</p>\r\n<p>在此例中，<code>Abs</code> 方法拥有一个名字为 <code>v</code>，类型为\r\n<code>Vertex</code> 的接收者。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;<span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法即函数</strong></p>\r\n<p>记住：方法只是个带接收者参数的函数。</p>\r\n<p>现在这个 <code>Abs</code>\r\n的写法就是个正常的函数，功能并没有什么变化。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(Abs(v))</span><br><span class=\"line\">&#125;<span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法（续）</strong></p>\r\n<p>你也可以为非结构体类型声明方法。</p>\r\n<p>在此例中，我们看到了一个带 <code>Abs</code> 方法的数值类型\r\n<code>MyFloat</code>。</p>\r\n<p>你只能为在同一个包中定义的接收者类型声明方法，而不能为其它别的包中定义的类型\r\n（包括 <code>int</code> 之类的内置类型）声明方法。</p>\r\n<p>（译注：就是接收者的类型定义和方法声明必须在同一包内。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tfmt.Println(f.Abs())</span><br><span class=\"line\">&#125;<span class=\"comment\">//1.4142135623730951</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指针类型的接收者\">2、指针类型的接收者</h3>\r\n<p>你可以为指针类型的接收者声明方法。</p>\r\n<p>这意味着对于某类型 <code>T</code>，接收者的类型可以用 <code>*T</code>\r\n的文法。 （此外，<code>T</code> 本身不能是指针，比如不能是\r\n<code>*int</code>。）</p>\r\n<p>例如，这里为 <code>*Vertex</code> 定义了 <code>Scale</code>\r\n方法。</p>\r\n<p>指针接收者的方法可以修改接收者指向的值（如这里的 <code>Scale</code>\r\n所示）。\r\n由于方法经常需要修改它的接收者，指针接收者比值接收者更常用。</p>\r\n<p>试着移除第 16 行 <code>Scale</code> 函数声明中的\r\n<code>*</code>，观察此程序的行为如何变化。</p>\r\n<p>若使用值接收者，那么 <code>Scale</code> 方法会对原始\r\n<code>Vertex</code>\r\n值的副本进行操作。（对于函数的其它参数也是如此。）<code>Scale</code>\r\n方法必须用指针接收者来更改 <code>main</code> 函数中声明的\r\n<code>Vertex</code> 的值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 50   (v Vertex)==&gt;  5</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"指针与函数\">3、指针与函数</h3>\r\n<p>现在我们要把 <code>Abs</code> 和 <code>Scale</code>\r\n方法重写为函数。</p>\r\n<p>同样，先试着移除掉第 16 的\r\n<code>*</code>，你能看出程序行为改变的原因吗？\r\n要怎样做才能让该示例顺利通过编译？</p>\r\n<p>（如果你不确定，继续往下看。） //报错</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Abs</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Scale</span><span class=\"params\">(v *Vertex, f <span class=\"type\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tScale(&amp;v, <span class=\"number\">10</span>)</span><br><span class=\"line\">\tfmt.Println(Abs(v))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//50</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法与指针重定向</strong></p>\r\n<p>比较前两个程序，你大概会注意到带指针参数的函数必须接受一个指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">ScaleFunc(v, 5)  // 编译错误！</span><br><span class=\"line\">ScaleFunc(&amp;v, 5) // OK</span><br></pre></td></tr></table></figure>\r\n<p>而接收者为指针的的方法被调用时，接收者既能是值又能是指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">v.Scale(5)  // OK</span><br><span class=\"line\">p := &amp;v</span><br><span class=\"line\">p.Scale(10) // OK</span><br></pre></td></tr></table></figure>\r\n<p>对于语句 <code>v.Scale(5)</code> 来说，即便 <code>v</code>\r\n是一个值而非指针，带指针接收者的方法也能被直接调用。 也就是说，由于\r\n<code>Scale</code> 方法有一个指针接收者，为方便起见，Go 会将语句\r\n<code>v.Scale(5)</code> 解释为 <code>(&amp;v).Scale(5)</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ScaleFunc</span><span class=\"params\">(v *Vertex, f <span class=\"type\">float64</span>)</span></span> &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">2</span>)</span><br><span class=\"line\">\tScaleFunc(&amp;v, <span class=\"number\">10</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;Vertex&#123;<span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tp.Scale(<span class=\"number\">3</span>)</span><br><span class=\"line\">\tScaleFunc(p, <span class=\"number\">8</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(v, p)</span><br><span class=\"line\">&#125;<span class=\"comment\">//&#123;60 80&#125; &amp;&#123;96 72&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>方法与指针重定向（续）</strong></p>\r\n<p>反之也一样：</p>\r\n<p>接受一个值作为参数的函数必须接受一个指定类型的值：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">fmt.Println(AbsFunc(v))  // OK</span><br><span class=\"line\">fmt.Println(AbsFunc(&amp;v)) // 编译错误！</span><br></pre></td></tr></table></figure>\r\n<p>而以值为接收者的方法被调用时，接收者既能为值又能为指针：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var v Vertex</span><br><span class=\"line\">fmt.Println(v.Abs()) // OK</span><br><span class=\"line\">p := &amp;v</span><br><span class=\"line\">fmt.Println(p.Abs()) // OK</span><br></pre></td></tr></table></figure>\r\n<p>这种情况下，方法调用 <code>p.Abs()</code> 会被解释为\r\n<code>(*p).Abs()</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AbsFunc</span><span class=\"params\">(v Vertex)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Println(v.Abs())</span><br><span class=\"line\">\tfmt.Println(AbsFunc(v))</span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;Vertex&#123;<span class=\"number\">4</span>, <span class=\"number\">3</span>&#125;</span><br><span class=\"line\">\tfmt.Println(p.Abs())</span><br><span class=\"line\">\tfmt.Println(AbsFunc(*p))</span><br><span class=\"line\">&#125;  <span class=\"comment\">// 5 5 5 5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>选择值或指针作为接收者</strong></p>\r\n<p>使用指针接收者的原因有二：</p>\r\n<p>首先，方法能够修改其接收者指向的值。</p>\r\n<p>其次，这样可以避免在每次调用方法时复制该值。若值的类型为大型结构体时，这样会更加高效。</p>\r\n<p>在本例中，<code>Scale</code> 和 <code>Abs</code> 接收者的类型为\r\n<code>*Vertex</code>，即便 <code>Abs</code> 并不需要修改其接收者。</p>\r\n<p>通常来说，所有给定类型的方法都应该有值或指针接收者，但并不应该二者混用。\r\n（我们会在接下来几页中明白为什么。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Scale(f <span class=\"type\">float64</span>) &#123;</span><br><span class=\"line\">\tv.X = v.X * f</span><br><span class=\"line\">\tv.Y = v.Y * f</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := &amp;Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;缩放前：%+v，绝对值：%v\\n&quot;</span>, v, v.Abs())</span><br><span class=\"line\">\tv.Scale(<span class=\"number\">5</span>)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;缩放后：%+v，绝对值：%v\\n&quot;</span>, v, v.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//缩放前：&amp;&#123;X:3 Y:4&#125;，绝对值：5</span></span><br><span class=\"line\"><span class=\"comment\">//缩放后：&amp;&#123;X:15 Y:20&#125;，绝对值：25</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"接口\">4、接口</h3>\r\n<p><strong>接口类型</strong> 的定义为一组方法签名。</p>\r\n<p>接口类型的变量可以持有任何实现了这些方法的值。</p>\r\n<p><strong>注意:</strong> 示例代码的第 22 行存在一个错误。由于\r\n<code>Abs</code> 方法只为 <code>*Vertex</code> （指针类型）定义，因此\r\n<code>Vertex</code>（值类型）并未实现 <code>Abser</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Abser <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tAbs() <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a Abser</span><br><span class=\"line\">\tf := MyFloat(-math.Sqrt2)</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">3</span>, <span class=\"number\">4</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\ta = f  <span class=\"comment\">// a MyFloat 实现了 Abser</span></span><br><span class=\"line\">\ta = &amp;v <span class=\"comment\">// a *Vertex 实现了 Abser</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 下面一行，v 是一个 Vertex（而不是 *Vertex）</span></span><br><span class=\"line\">\t<span class=\"comment\">// 所以没有实现 Abser。</span></span><br><span class=\"line\">\ta = v  <span class=\"comment\">//&amp;v</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(a.Abs())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyFloat <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(f MyFloat)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> f &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(-f)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"type\">float64</span>(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(v *Vertex)</span></span> Abs() <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//5</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>接口与隐式实现</strong></p>\r\n<p>类型通过实现一个接口的所有方法来实现该接口。既然无需专门显式声明，也就没有\"implements\"关键字.</p>\r\n<p>隐式接口从接口的实现中解耦了定义，这样接口的实现可以出现在任何包中，无需提前准备。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tS <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 此方法表示类型 T 实现了接口 I，不过我们并不需要显式声明这一点。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t T)</span></span> M() &#123;</span><br><span class=\"line\">\tfmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I = T&#123;<span class=\"string\">&quot;hello&quot;</span>&#125;</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>接口值</strong></p>\r\n<p>接口也是值。它们可以像其他值一样传递。</p>\r\n<p>接口值可以用作函数的参数或返回值。</p>\r\n<p>在内部，接口值可以看做包含值和具体类型的元组。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（Value ， Type）</span><br></pre></td></tr></table></figure>\r\n<p>接口值保存了一个具体底层类型的具体值。</p>\r\n<p>接口值调用方法时会执行其底层类型的同名方法。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    S <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(t *T)</span></span> M()&#123;</span><br><span class=\"line\">    fmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> F <span class=\"type\">float64</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(f F)</span></span> M()&#123;</span><br><span class=\"line\">    fmt.Println(f)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i I</span><br><span class=\"line\">    i = &amp;T&#123;<span class=\"string\">&quot;Hello&quot;</span>&#125;</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">    </span><br><span class=\"line\">    i = F(math.Pi)</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&amp;&#123;Hello&#125;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//Hello</span></span><br><span class=\"line\"><span class=\"comment\">//(3.141592653589793, main.F)</span></span><br><span class=\"line\"><span class=\"comment\">//3.141592653589793</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>底层值为nil的接口值</strong></p>\r\n<p>即便接口内的具体值为nil，方法仍然会被nil接收者调用。</p>\r\n<p>在一些语言中，这会触发一个空指针\r\n异常，但在Go中通常会写一些方法来优雅的处理它（如本例的M方法）</p>\r\n<p>注意：保存了nil具体值的接口其本身并不为nil</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> T <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    S <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(t *T)</span></span> M()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> t == <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;&lt;nil&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(t.S)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i I</span><br><span class=\"line\">    vat t *T</span><br><span class=\"line\">    i = t</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    i.M()</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=&amp;T&#123;<span class=\"string\">&quot;hello&quot;</span>&#125;</span><br><span class=\"line\">    \tdescribe(i)</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i I)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&lt;nil&gt;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//&lt;nil&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//(&amp;&#123;hello&#125;, *main.T)</span></span><br><span class=\"line\"><span class=\"comment\">//hello</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>nil接口值</strong></p>\r\n<p>nil接口值既不保存吧值也不保存具体类型。</p>\r\n<p>为nil接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个<strong>具体</strong>方法的类型</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> I <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">\tM()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i I</span><br><span class=\"line\">\tdescibe(i)</span><br><span class=\"line\">\ti.M()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">descibe</span><span class=\"params\">(i I)</span></span>&#123;</span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&lt;nil&gt;, &lt;nil&gt;)</span><br><span class=\"line\">panic: runtime error: invalid memory address or nil pointer dereference</span><br><span class=\"line\">[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x48fff9]</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox1786886251/prog.go:12 +0x19</span><br></pre></td></tr></table></figure>\r\n<p><strong>空接口</strong></p>\r\n<p>指定了零个方法的接口值被称为 ： 空接口</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">interface&#123;&#125;</span><br></pre></td></tr></table></figure>\r\n<p>空接口可以保存任何类型的值。（因为每个类型都至少实现了零个方法。）</p>\r\n<p>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code>可接受类型为<code>interface&#123;&#125;</code>的任意数量的参数。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>()</span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"number\">42</span></span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">    </span><br><span class=\"line\">    i=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    describe(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">describe</span><span class=\"params\">(i <span class=\"keyword\">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;(%v, %T)\\n&quot;</span>, i, i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(&lt;nil&gt;, &lt;nil&gt;)</span></span><br><span class=\"line\"><span class=\"comment\">//(42, int)</span></span><br><span class=\"line\"><span class=\"comment\">//(hello, string)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型断言\">5、类型断言</h3>\r\n<p><strong>类型断言</strong> 提供了访问接口值底层具体值的方式。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t := i.(T)  <span class=\"comment\">//该语句断言接口值i保存了具体类型T，并将其底层类型为T的值赋予变量t。 若i并未保存T类型的值，该语句就会出发一个 panic</span></span><br></pre></td></tr></table></figure>\r\n<p>为了<strong>判断</strong>一个接口值是否保存了一个特定的类型，类型断言可返回两个值：其底层值以及一个报告断言是否成功的布尔值</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t,ok := i.(T) </span><br><span class=\"line\"><span class=\"comment\">// 若 i 保存了一个 T，那么 t 将会是其底层值，而ok 为true</span></span><br><span class=\"line\"><span class=\"comment\">//否则，OK 将为 false 而 t 将为 T类型的零值，程序并不会产生panic</span></span><br></pre></td></tr></table></figure>\r\n<p>请注意这种语法和读取一个映射时的相同之处</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i <span class=\"keyword\">interface</span>&#123;&#125; = <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    s:=i.(String)</span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">    </span><br><span class=\"line\">    s, ok := i.(<span class=\"type\">string</span>)</span><br><span class=\"line\">\tfmt.Println(s, ok)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf, ok := i.(<span class=\"type\">float64</span>)</span><br><span class=\"line\">\tfmt.Println(f, ok)</span><br><span class=\"line\"></span><br><span class=\"line\">\tf = i.(<span class=\"type\">float64</span>) <span class=\"comment\">// panic</span></span><br><span class=\"line\">\tfmt.Println(f)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello</span><br><span class=\"line\">hello true</span><br><span class=\"line\">0 false</span><br><span class=\"line\">panic: interface conversion: interface &#123;&#125; is string, not float64</span><br><span class=\"line\"></span><br><span class=\"line\">goroutine 1 [running]:</span><br><span class=\"line\">main.main()</span><br><span class=\"line\">\t/tmp/sandbox106650246/prog.go:17 +0x14f</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型选择\">6、类型选择</h3>\r\n<p><strong>类型选择</strong>\r\n是一种按顺序从几个类型断言中选择分支的结构。</p>\r\n<p>类型选择与一般的switch语句相似，不过类型选择中的case为类型（非值），他们针对给定接口值所存储的值的类型进行比较。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> v := i.(<span class=\"keyword\">type</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> T:</span><br><span class=\"line\">    <span class=\"comment\">//v的类型为T</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> S:</span><br><span class=\"line\">    <span class=\"comment\">//v的类型为S</span></span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// 没有匹配，v 与 i 的类型相同</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>类型选择中的声明与类型断言i.(T)的语法相同，只是具体类型T被替换成了关键字type。</p>\r\n<p>此选择语句判断接口值i保存的值类型是T还是S。在T或S的情况下，变量V会分别按照T或S类型保存i拥有的值。在默认（即没有匹配）的情况下，变量v与i的接口类型和值相同。</p>\r\n<h3 id=\"stringer\">7、Stringer</h3>\r\n<p><code>fmt</code>包中定义的<code>Stringer</code>是最普遍的接口之一</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Stringer interface&#123;</span><br><span class=\"line\">\tString() string</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><code>Stringer</code>\r\n是一个可以用字符串描述自己的类型。<code>fmt</code>\r\n包（还有很多包）都通过此接口来打印值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(p Person)</span></span> String() <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprintf(<span class=\"string\">&quot;%v (%v years)&quot;</span>, p.Name, p.Age)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := Person&#123;<span class=\"string\">&quot;Arthur Dent&quot;</span>, <span class=\"number\">42</span>&#125;</span><br><span class=\"line\">\tz := Person&#123;<span class=\"string\">&quot;Zaphod Beeblebrox&quot;</span>, <span class=\"number\">9001</span>&#125;</span><br><span class=\"line\">\tfmt.Println(a, z)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Arthur Dent (42 years) Zaphod Beeblebrox (9001 years)</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"错误\">8、错误</h3>\r\n<p>Go程序使用<code>error</code>值来表示错误状态。</p>\r\n<p>与<code>fmt.Stringer</code>类似，<code>error</code>类型是一个内建接口：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"type\">error</span> <span class=\"keyword\">interface</span>&#123;</span><br><span class=\"line\">\tError() <span class=\"type\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包也会根据对\r\n<code>error</code> 的实现来打印值。）</p>\r\n<p>通常函数会返回一个 <code>error</code>\r\n值，调用它的代码应当判断这个错误是否等于 <code>nil</code>\r\n来进行错误处理。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i, err := strconv.Atoi(&quot;42&quot;)</span><br><span class=\"line\">if err != nil &#123;</span><br><span class=\"line\">    fmt.Printf(&quot;couldn&#x27;t convert number: %v\\n&quot;, err)</span><br><span class=\"line\">    return</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(&quot;Converted integer:&quot;, i)</span><br></pre></td></tr></table></figure>\r\n<p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code>\r\n表示失败。</p>\r\n<h3 id=\"readers\">9、Readers</h3>\r\n<p><code>io</code>包指定了<code>io.Readers</code>接口，它表示数据流的读取端。</p>\r\n<p>Go标准库包含了该接口的<a\r\nhref=\"https://cs.opensource.google/search?q=Read(\\w%2B\\s%5B%5Dbyte)&amp;ss=go%2Fgo\">许多实现</a>，包括文件、网络连接、压缩和加密等等。</p>\r\n<p><code>io.Reader</code>接口有一个<code>Read</code>方法：</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(T)</span></span>Read(b []<span class=\"type\">byte</span>)(n <span class=\"type\">int</span>,err <span class=\"type\">error</span>)</span><br></pre></td></tr></table></figure>\r\n<p><code>Read</code>用数据填充给定的字节切片并返回填充的字节数和错误值。在遇到数据流的结尾时，它会返回一个<code>io.EOF</code>错误。</p>\r\n<p>示例代码创建了一个 <a\r\nhref=\"https://go-zh.org/pkg/strings/#Reader\"><code>strings.Reader</code></a>\r\n并以每次 8 字节的速度读取它的输出。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tr := strings.NewReader(<span class=\"string\">&quot;Hello, Reader!&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">byte</span>, <span class=\"number\">8</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t\tn, err := r.Read(b)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;n = %v err = %v b = %v\\n&quot;</span>, n, err, b)</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;b[:n] = %q\\n&quot;</span>, b[:n])</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> err == io.EOF &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：Reader</strong></p>\r\n<p>实现一个 <code>Reader</code> 类型，它产生一个 ASCII 字符\r\n<code>'A'</code> 的无限流。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bufio&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// MyReader 是一个自定义的 io.Reader，它产生一个 ASCII 字符 &#x27;A&#x27; 的无限流。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyReader <span class=\"keyword\">struct</span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read 方法实现了 io.Reader 接口，从 MyReader 中读取数据。</span></span><br><span class=\"line\"><span class=\"comment\">// 它将 &#x27;A&#x27; 字符写入到提供的缓冲区中，并返回写入的字节数和 nil 作为错误。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r MyReader)</span></span> Read(p []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 写入 &#x27;A&#x27; 字符到提供的缓冲区 p 中，最多写入 1 个字节。</span></span><br><span class=\"line\">\tn := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> n &lt; <span class=\"built_in\">len</span>(p) &amp;&amp; r.hasMore() &#123;</span><br><span class=\"line\">\t\tp[n] = <span class=\"string\">&#x27;A&#x27;</span></span><br><span class=\"line\">\t\tn++</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 如果没有更多的数据可写，返回 io.EOF 表示流结束。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !r.hasMore() &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n, io.EOF</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// hasMore 模拟无限数据流的逻辑，这里总是返回 true 来表示有更多数据。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r MyReader)</span></span> hasMore() <span class=\"type\">bool</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建 MyReader 的实例。</span></span><br><span class=\"line\">\treader := MyReader&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个 Scanner 来读取 MyReader 的数据。</span></span><br><span class=\"line\">\tscanner := bufio.NewScanner(&amp;reader)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印前 10 个字符，每个字符后跟一个换行符。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> scanner.Scan() &#123;</span><br><span class=\"line\">\t\t\tfmt.Print(scanner.Text(), <span class=\"string\">&quot;\\n&quot;</span>)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 打印可能的错误。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := scanner.Err(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：rot13Reader</strong></p>\r\n<p>有种常见的模式是一个 <a\r\nhref=\"https://go-zh.org/pkg/io/#Reader\"><code>io.Reader</code></a>\r\n包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p>\r\n<p>例如，<a\r\nhref=\"https://go-zh.org/pkg/compress/gzip/#NewReader\"><code>gzip.NewReader</code></a>\r\n函数接受一个\r\n<code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了\r\n<code>io.Reader</code> 的\r\n<code>*gzip.Reader</code>（解压后的数据流）。</p>\r\n<p>编写一个实现了 <code>io.Reader</code> 并从另一个\r\n<code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用\r\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUk9UMTM=\">rot13</span>\r\n代换密码对数据流进行修改。</p>\r\n<p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code>\r\n方法以满足 <code>io.Reader</code>。</p>\r\n<p>有种常见的模式是一个 <a\r\nhref=\"https://go-zh.org/pkg/io/#Reader\"><code>io.Reader</code></a>\r\n包装另一个 <code>io.Reader</code>，然后通过某种方式修改其数据流。</p>\r\n<p>例如，<a\r\nhref=\"https://go-zh.org/pkg/compress/gzip/#NewReader\"><code>gzip.NewReader</code></a>\r\n函数接受一个\r\n<code>io.Reader</code>（已压缩的数据流）并返回一个同样实现了\r\n<code>io.Reader</code> 的\r\n<code>*gzip.Reader</code>（解压后的数据流）。</p>\r\n<p>编写一个实现了 <code>io.Reader</code> 并从另一个\r\n<code>io.Reader</code> 中读取数据的 <code>rot13Reader</code>，通过应用\r\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvUk9UMTM=\">rot13</span>\r\n代换密码对数据流进行修改。</p>\r\n<p><code>rot13Reader</code> 类型已经提供。实现 <code>Read</code>\r\n方法以满足 <code>io.Reader</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;io&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rot13Reader 是一个实现了 io.Reader 的类型，它包装了另一个 io.Reader 并对读取的数据应用 rot13 加密。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> rot13Reader <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tr io.Reader</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rot13 函数将单个字符进行 rot13 替换。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">rot13</span><span class=\"params\">(b <span class=\"type\">byte</span>)</span></span> <span class=\"type\">byte</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class=\"string\">&#x27;z&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;a&#x27;</span> + (b-<span class=\"string\">&#x27;a&#x27;</span>+<span class=\"number\">13</span>)%<span class=\"number\">26</span></span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&#x27;A&#x27;</span> &lt;= b &amp;&amp; b &lt;= <span class=\"string\">&#x27;Z&#x27;</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"string\">&#x27;A&#x27;</span> + (b-<span class=\"string\">&#x27;A&#x27;</span>+<span class=\"number\">13</span>)%<span class=\"number\">26</span></span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b <span class=\"comment\">// 非字母字符不变</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read 方法实现了 io.Reader 接口，从 rot13Reader 中读取数据并应用 rot13 加密。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(r *rot13Reader)</span></span> Read(p []<span class=\"type\">byte</span>) (<span class=\"type\">int</span>, <span class=\"type\">error</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 从底层的 io.Reader 中读取数据。</span></span><br><span class=\"line\">\tn, err := r.r.Read(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> n, err</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 应用 rot13 加密。</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; n; i++ &#123;</span><br><span class=\"line\">\t\tp[i] = rot13(p[i])</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> n, <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := strings.NewReader(<span class=\"string\">&quot;Lbh penpxrq gur pbqr!&quot;</span>)</span><br><span class=\"line\">\tr := rot13Reader&#123;s&#125;</span><br><span class=\"line\">\tio.Copy(os.Stdout, &amp;r)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"图像\">10、图像</h3>\r\n<p><a href=\"https://go-zh.org/pkg/image/#Image\"><code>image</code></a>\r\n包定义了 <code>Image</code> 接口：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package image</span><br><span class=\"line\"></span><br><span class=\"line\">type Image interface &#123;</span><br><span class=\"line\">    ColorModel() color.Model</span><br><span class=\"line\">    Bounds() Rectangle</span><br><span class=\"line\">    At(x, y int) color.Color</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>注意:</strong> <code>Bounds</code> 方法的返回值\r\n<code>Rectangle</code> 实际上是一个 <a\r\nhref=\"https://go-zh.org/pkg/image/#Rectangle\"><code>image.Rectangle</code></a>，它在\r\n<code>image</code> 包中声明。</p>\r\n<p>（请参阅<a\r\nhref=\"https://go-zh.org/pkg/image/#Image\">文档</a>了解全部信息。）</p>\r\n<p><code>color.Color</code> 和 <code>color.Model</code>\r\n类型也是接口，但是通常因为直接使用预定义的实现 <code>image.RGBA</code>\r\n和 <code>image.RGBAModel</code> 而被忽视了。这些接口和类型由 <a\r\nhref=\"https://go-zh.org/pkg/image/color/\"><code>image/color</code></a>\r\n包定义。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := image.NewRGBA(image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">100</span>, <span class=\"number\">100</span>))</span><br><span class=\"line\">\tfmt.Println(m.Bounds())</span><br><span class=\"line\">\tfmt.Println(m.At(<span class=\"number\">0</span>, <span class=\"number\">0</span>).RGBA())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//(0,0)-(100,100)</span></span><br><span class=\"line\"><span class=\"comment\">//0 0 0 0</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：图像</strong></p>\r\n<p>还记得之前编写的<a\r\nhref=\"https://tour.go-zh.org/moretypes/18\">图片生成器</a>\r\n吗？我们再来编写另外一个，不过这次它将会返回一个\r\n<code>image.Image</code> 的实现而非一个数据切片。</p>\r\n<p>定义你自己的 <code>Image</code> 类型，实现<a\r\nhref=\"https://go-zh.org/pkg/image/#Image\">必要的方法</a>并调用\r\n<code>pic.ShowImage</code>。</p>\r\n<p><code>Bounds</code> 应当返回一个 <code>image.Rectangle</code> ，例如\r\n<code>image.Rect(0, 0, w, h)</code>。</p>\r\n<p><code>ColorModel</code> 应当返回 <code>color.RGBAModel</code>。</p>\r\n<p><code>At</code> 应当返回一个颜色。上一个图片生成器的值 <code>v</code>\r\n对应于此次的 <code>color.RGBA&#123;v, v, 255, 255&#125;</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;image&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;image/color&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Image 是一个自定义的 image.Image 类型。</span></span><br><span class=\"line\"><span class=\"keyword\">type</span> Image <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\twidth  <span class=\"type\">int</span></span><br><span class=\"line\">\theight <span class=\"type\">int</span></span><br><span class=\"line\">\tpixels []color.RGBA</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// NewImage 创建一个新的 Image 实例，给定宽度和高度。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">NewImage</span><span class=\"params\">(width, height <span class=\"type\">int</span>)</span></span> *Image &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &amp;Image&#123;</span><br><span class=\"line\">\t\twidth:  width,</span><br><span class=\"line\">\t\theight: height,</span><br><span class=\"line\">\t\tpixels: <span class=\"built_in\">make</span>([]color.RGBA, width*height),</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Bounds 返回 Image 的边界。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> Bounds() image.Rectangle &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> image.Rect(<span class=\"number\">0</span>, <span class=\"number\">0</span>, i.width, i.height)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ColorModel 返回 Image 使用的颜色模型。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> ColorModel() color.Model &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> color.RGBAModel</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// At 返回 Image 在 (x, y) 坐标处的像素颜色。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> At(x, y <span class=\"type\">int</span>) color.Color &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 检查坐标是否在图像的边界内。</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !(image.Pt(x, y).In(i.Bounds())) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> color.RGBA&#123;&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 计算像素在切片中的索引。</span></span><br><span class=\"line\">\tindex := y*i.width + x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> i.pixels[index]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Set 设置 Image 在 (x, y) 坐标处的像素颜色。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(i *Image)</span></span> Set(x, y <span class=\"type\">int</span>, c color.RGBA) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> image.Pt(x, y).In(i.Bounds()) &#123;</span><br><span class=\"line\">\t\ti.pixels[y*i.width+x] = c</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := NewImage(<span class=\"number\">640</span>, <span class=\"number\">480</span>)</span><br><span class=\"line\">\t<span class=\"comment\">// 这里可以添加代码来设置 Image 的像素颜色。</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tpic.ShowImage(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/20/post/golang/01-Go%E6%8C%87%E5%8D%97/",
            "url": "http://example.com/2024/08/20/post/golang/01-Go%E6%8C%87%E5%8D%97/",
            "title": "1-Go指南",
            "date_published": "2024-08-20T06:09:07.406Z",
            "content_html": "<h1 id=\"go指南-基础\">Go指南-基础</h1>\r\n<h2 id=\"基础---包变量与函数\">基础---包、变量与函数</h2>\r\n<h3 id=\"包\">1、包</h3>\r\n<p>每个Go程序都是由包构成。</p>\r\n<p>程序冲main包开始运行。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math/rand&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;我最喜欢的数字是 &quot;</span>, rand.Intn(<span class=\"number\">10</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"导入\">2、导入</h3>\r\n<p>“分组”形式的导入语句</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"导出名\">3、导出名</h3>\r\n<p>在Go中，如果一个名字以大写字母开头，那么它就是已导出的。例如，<code>Pizza</code>就是已导出。<code>Pi</code>也同样，它导出字math包。</p>\r\n<p>在导入一个包时，你只能引用其中已导出的名字。任何[未导出]的名字在该包外均无法访问。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(math.Pi)   <span class=\"comment\">//报错</span></span><br><span class=\"line\">    fmt.Println(math.Pi)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数\">4、函数</h3>\r\n<p>函数可接收零个或者多个参数</p>\r\n<p>在本例中，<code>add</code>接受两个int类型的参数。</p>\r\n<p>注意类型在变量名的<strong>后面</strong></p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">add</span><span class=\"params\">(x <span class=\"type\">int</span>, y <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(add(<span class=\"number\">42</span>, <span class=\"number\">13</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p>当连续两个或多个函数的已命名形参类型相同时，除最后一个类型以外，其它都可以省略。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x <span class=\"type\">int</span>, y <span class=\"type\">int</span>  ==&gt;  x,y <span class=\"type\">int</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"多返回值\">5、多返回值</h3>\r\n<p>函数可以返回任意数量的返回值</p>\r\n<p><code>swap</code>函数返回了两个字符串</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">swap</span><span class=\"params\">(x, y <span class=\"type\">string</span>)</span></span> (<span class=\"type\">string</span>, <span class=\"type\">string</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> y, x</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta, b := swap(<span class=\"string\">&quot;hello&quot;</span>, <span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"带名字的返回值\">6、带名字的返回值</h3>\r\n<p>Go 的返回值可被命名，它们会被视作定义在函数顶部的变量。</p>\r\n<p>返回值的命名应当能反应其含义，它可以作为文档使用。</p>\r\n<p>没有参数的 <code>return</code>\r\n语句会直接返回已命名的返回值，也就是「裸」返回值。</p>\r\n<p>裸返回语句应当仅用在下面这样的短函数中。在长的函数中它们会影响代码的可读性。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">split</span><span class=\"params\">(sum <span class=\"type\">int</span>)</span></span> (x, y <span class=\"type\">int</span>) &#123;</span><br><span class=\"line\">\tx = sum * <span class=\"number\">4</span> / <span class=\"number\">9</span></span><br><span class=\"line\">\ty = sum - x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(split(<span class=\"number\">17</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"变量\">7、变量</h3>\r\n<p><code>var</code>\r\n语句用于声明一系列变量。和函数的参数列表一样，类型在最后。</p>\r\n<p>如例中所示，<code>var</code> 语句可以出现在包或函数的层级。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> c, python, java <span class=\"type\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(i, c, python, java)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"变量的初始化\">8、变量的初始化</h3>\r\n<p>变量声明可以包含初始值，每个变量对应一个。</p>\r\n<p>如果提供了初始值，则类型可以省略；变量会从初始值中推断出类型。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> i, j <span class=\"type\">int</span> = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> c, python, java = <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"string\">&quot;no!&quot;</span></span><br><span class=\"line\">\tfmt.Println(i, j, c, python, java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  1 2  true false no!</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"短变量声明\">9、短变量声明</h3>\r\n<p>在函数中，短赋值语句 <code>:=</code> 可在隐式确定类型的\r\n<code>var</code> 声明中使用。</p>\r\n<p>函数外的每个语句都 <strong>必须</strong>\r\n以关键字开始（<code>var</code>、<code>func</code> 等），因此\r\n<code>:=</code> 结构不能在函数外使用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i, j <span class=\"type\">int</span> = <span class=\"number\">1</span>, <span class=\"number\">2</span></span><br><span class=\"line\">\tk := <span class=\"number\">3</span></span><br><span class=\"line\">\tc, python, java := <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"string\">&quot;no!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(i, j, k, c, python, java)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  1 2 3 true false no!</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"基本类型\">10、基本类型</h3>\r\n<p>Go的基本类型有</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bool</span><br><span class=\"line\"></span><br><span class=\"line\">string</span><br><span class=\"line\"></span><br><span class=\"line\">int  int8  int16  int32  int64</span><br><span class=\"line\">uint uint8 uint16 uint32 uint64 uintptr</span><br><span class=\"line\"></span><br><span class=\"line\">byte // uint8 的别名</span><br><span class=\"line\"></span><br><span class=\"line\">rune // int32 的别名</span><br><span class=\"line\">     // 表示一个 Unicode 码位</span><br><span class=\"line\"></span><br><span class=\"line\">float32 float64</span><br><span class=\"line\"></span><br><span class=\"line\">complex64 complex128</span><br></pre></td></tr></table></figure>\r\n<p>本例展示了几种类型的变量。\r\n和导入语句一样，变量声明也可以「分组」成一个代码块。</p>\r\n<p><code>int</code>、<code>uint</code> 和 <code>uintptr</code> 类型在\r\n32-位系统上通常为 32-位宽，在 64-位系统上则为\r\n64-位宽。当你需要一个整数值时应使用 <code>int</code> 类型，\r\n除非你有特殊的理由使用固定大小或无符号的整数类型。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math/cmplx&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tToBe   <span class=\"type\">bool</span>       = <span class=\"literal\">false</span></span><br><span class=\"line\">\tMaxInt <span class=\"type\">uint64</span>     = <span class=\"number\">1</span>&lt;&lt;<span class=\"number\">64</span> - <span class=\"number\">1</span></span><br><span class=\"line\">\tz      <span class=\"type\">complex128</span> = cmplx.Sqrt(<span class=\"number\">-5</span> + <span class=\"number\">12i</span>)</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, ToBe, ToBe)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, MaxInt, MaxInt)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;类型：%T 值：%v\\n&quot;</span>, z, z)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"零值\">11、零值</h3>\r\n<p>没有明确初始化的变量声明会被赋予对应类型的\r\n<strong>零值</strong>。</p>\r\n<p>零值是：</p>\r\n<ul>\r\n<li>数值类型为 <code>0</code>，</li>\r\n<li>布尔类型为 <code>false</code>，</li>\r\n<li>字符串为 <code>\"\"</code>（空字符串）。</li>\r\n</ul>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> i <span class=\"type\">int</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"type\">float64</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> b <span class=\"type\">bool</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s <span class=\"type\">string</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%v %v %v %q\\n&quot;</span>, i, f, b, s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型转换\">12、类型转换</h3>\r\n<p>表达式 <code>T(v)</code> 将值 <code>v</code> 转换为类型\r\n<code>T</code>。</p>\r\n<p>一些数值类型的转换：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i int = 42</span><br><span class=\"line\">var f float64 = float64(i)</span><br><span class=\"line\">var u uint = uint(f)</span><br></pre></td></tr></table></figure>\r\n<p>或者，更加简短的形式：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42</span><br><span class=\"line\">f := float64(i)</span><br><span class=\"line\">u := uint(f)</span><br></pre></td></tr></table></figure>\r\n<p>与 C 不同的是，Go\r\n在不同类型的项之间赋值时需要显式转换。试着移除例子中的\r\n<code>float64</code> 或 <code>uint</code>\r\n的类型转换，看看会发生什么。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> x, y <span class=\"type\">int</span> = <span class=\"number\">3</span>, <span class=\"number\">4</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> f <span class=\"type\">float64</span> = math.Sqrt(<span class=\"type\">float64</span>(x*x + y*y))</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> z <span class=\"type\">uint</span> = <span class=\"type\">uint</span>(f)</span><br><span class=\"line\">\tfmt.Println(x, y, z)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"类型推断\">14、类型推断</h3>\r\n<p>在声明一个变量而不指定其类型时（即使用不带类型的 <code>:=</code> 语法\r\n<code>var =</code> 表达式语法），变量的类型会通过右值推断出来。</p>\r\n<p>当声明的右值确定了类型时，新变量的类型与其相同：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var i int</span><br><span class=\"line\">j := i // j 也是一个 int</span><br></pre></td></tr></table></figure>\r\n<p>不过当右边包含未指明类型的数值常量时，新变量的类型就可能是\r\n<code>int</code>、<code>float64</code> 或 <code>complex128</code>\r\n了，这取决于常量的精度：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42           // int</span><br><span class=\"line\">f := 3.142        // float64</span><br><span class=\"line\">g := 0.867 + 0.5i // complex128</span><br></pre></td></tr></table></figure>\r\n<p>试着修改示例代码中 <code>v</code>\r\n的初始值，并观察它是如何影响类型的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := <span class=\"number\">42</span> <span class=\"comment\">// 修改这里看看！</span></span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;v is of type %T\\n&quot;</span>, v)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"常量\">15、常量</h3>\r\n<p>常量的声明与变量类似，只不过使用 <code>const</code> 关键字。</p>\r\n<p>常量可以是字符、字符串、布尔值或数值。</p>\r\n<p>常量不能用 <code>:=</code> 语法声明。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Pi = <span class=\"number\">3.14</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> World = <span class=\"string\">&quot;世界&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Hello&quot;</span>, World)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Happy&quot;</span>, Pi, <span class=\"string\">&quot;Day&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> Truth = <span class=\"literal\">true</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;Go rules?&quot;</span>, Truth)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"数值常量\">16、数值常量</h3>\r\n<p>数值常量是高精度的 <strong>值</strong>。</p>\r\n<p>一个未指定类型的常量由上下文来决定其类型。</p>\r\n<p>再试着一下输出 <code>needInt(Big)</code> 吧。</p>\r\n<p>（<code>int</code> 类型可以存储最大 64\r\n位的整数，根据平台不同有时会更小。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">\t<span class=\"comment\">// 将 1 左移 100 位来创建一个非常大的数字</span></span><br><span class=\"line\">\t<span class=\"comment\">// 即这个数的二进制是 1 后面跟着 100 个 0</span></span><br><span class=\"line\">\tBig = <span class=\"number\">1</span> &lt;&lt; <span class=\"number\">100</span></span><br><span class=\"line\">\t<span class=\"comment\">// 再往右移 99 位，即 Small = 1 &lt;&lt; 1，或者说 Small = 2</span></span><br><span class=\"line\">\tSmall = Big &gt;&gt; <span class=\"number\">99</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">needInt</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123; <span class=\"keyword\">return</span> x*<span class=\"number\">10</span> + <span class=\"number\">1</span> &#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">needFloat</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x * <span class=\"number\">0.1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(needInt(Small))</span><br><span class=\"line\">\tfmt.Println(needFloat(Small))</span><br><span class=\"line\">\tfmt.Println(needFloat(Big))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"基础---流程控制语句\">基础---流程控制语句</h2>\r\n<h3 id=\"for循环\">1、for循环</h3>\r\n<p>Go中只有一种循环，for循环</p>\r\n<p>基本的 <code>for</code> 循环由三部分组成，它们用分号隔开：</p>\r\n<ul>\r\n<li>初始化语句：在第一次迭代前执行</li>\r\n<li>条件表达式：在每次迭代前求值</li>\r\n<li>后置语句：在每次迭代的结尾执行</li>\r\n</ul>\r\n<p>初始化语句通常为一句短变量声明，该变量声明仅在 <code>for</code>\r\n语句的作用域中可见。</p>\r\n<p>一旦条件表达式求值为 <code>false</code>，循环迭代就会终止。</p>\r\n<p><strong>注意</strong>：和 C、Java、JavaScript 之类的语言不同，Go 的\r\n<code>for</code> 语句后面的三个构成部分外没有小括号， 大括号\r\n<code>&#123; &#125;</code> 则是必须的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    sum := </span><br><span class=\"line\">    <span class=\"keyword\">for</span> i:=<span class=\"number\">0</span>;i&lt;<span class=\"number\">10</span>;i++&#123;</span><br><span class=\"line\">        sum+=i</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//初始化语句和后置语句是可选的。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> ; sum &lt; <span class=\"number\">1000</span>; &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>for 是 Go 中的「while」</strong></p>\r\n<p>此时你可以去掉分号，因为 C 的 <code>while</code> 在 Go 中叫做\r\n<code>for</code>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> sum &lt; <span class=\"number\">1000</span> &#123;</span><br><span class=\"line\">\t\tsum += sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(sum)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>无限循环</strong></p>\r\n<p>如果省略循环条件，该循环就不会结束，因此无限循环可以写得很紧凑。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> &#123;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"if-判断\">2、if 判断</h3>\r\n<p>Go 的 <code>if</code> 语句与 <code>for</code>\r\n循环类似，表达式外无需小括号 <code>( )</code>，而大括号 <code>&#123; &#125;</code>\r\n则是必须的。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">string</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> x &lt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sqrt(-x) + <span class=\"string\">&quot;i&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fmt.Sprint(math.Sqrt(x))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(sqrt(<span class=\"number\">2</span>), sqrt(<span class=\"number\">-4</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>if 和简短语句</strong></p>\r\n<p>和 <code>for</code> 一样，<code>if</code>\r\n语句可以在条件表达式前执行一个简短语句。</p>\r\n<p>该语句声明的变量作用域仅在 <code>if</code> 之内。</p>\r\n<p>（在最后的 <code>return</code> 语句处使用 <code>v</code> 看看。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>if 和 else</strong></p>\r\n<p>在 <code>if</code> 的简短语句中声明的变量同样可以在对应的任何\r\n<code>else</code> 块中使用。</p>\r\n<p>（在 <code>main</code> 的 <code>fmt.Println</code> 调用开始前，两次对\r\n<code>pow</code> 的调用均已执行并返回其各自的结果。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">pow</span><span class=\"params\">(x, n, lim <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%g &gt;= %g\\n&quot;</span>, v, lim)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// can&#x27;t use v here, though</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> lim</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">2</span>, <span class=\"number\">10</span>),</span><br><span class=\"line\">\t\tpow(<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习</strong></p>\r\n<p>为了练习函数与循环，我们来实现一个平方根函数：给定一个数\r\nx，我们需要找到一个数 z 使得 z² 尽可能地接近 x。</p>\r\n<p>计算机通常使用循环来计算 x 的平方根。从某个猜测的值 z\r\n开始，我们可以根据 z² 与 x 的近似度来改进 z，产生一个更好的猜测：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z -= (z*z - x) / (2*z)</span><br></pre></td></tr></table></figure>\r\n<p>重复调整的过程，猜测的结果会越来越精确，得到的答案也会尽可能接近实际的平方根。</p>\r\n<p>请在提供的 <code>func Sqrt</code>\r\n中实现它。无论输入是什么，可以先猜测 z 为 1。 首先，重复计算 10\r\n次并连续打印每次的 z 值。观察对于不同的 x 值（1、2、3 ...），\r\n你得到的答案是如何逼近结果的，以及猜测改进的速度有多快。</p>\r\n<p>提示：用类型转换或浮点数语法来声明并初始化一个浮点数值：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">z := 1.0</span><br><span class=\"line\">z := float64(1)</span><br></pre></td></tr></table></figure>\r\n<p>然后，修改循环条件，使得当值停止改变（或改变非常小）的时候退出循环。\r\n观察迭代次数大于还是小于 10。尝试改变 z 的初始猜测，如 x 或 x/2。\r\n你的函数结果与标准库中的 <a\r\nhref=\"https://go-zh.org/pkg/math/#Sqrt\">math.Sqrt</a> 有多接近？</p>\r\n<p>（ <strong>注</strong>： 如果你对该算法的细节感兴趣，上面的 z² − x 是\r\nz² 到它所要到达的值（即 x） 的距离，除数 2z 为 z² 的导数，我们通过 z²\r\n的变化速度来改变 z 的调整量。 这种通用方法叫做<a\r\nhref=\"https://zh.wikipedia.org/wiki/牛顿法\">牛顿法</a>，\r\n它对很多函数，特别是平方根而言非常有效。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Sqrt</span><span class=\"params\">(x <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\tz := x/<span class=\"number\">2.0</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i:=<span class=\"number\">0</span> ;i&lt;<span class=\"number\">10</span>;i++  &#123;</span><br><span class=\"line\">\t\tz1 := (z+x/z) /<span class=\"number\">2</span>  <span class=\"comment\">//牛顿法更新法则</span></span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;迭代 %d,z = %f\\n&quot;</span>,i+<span class=\"number\">1</span>,z1)</span><br><span class=\"line\">\t\tz = z1</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> z</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(Sqrt(<span class=\"number\">2</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"switch分支\">3、switch分支</h3>\r\n<p><code>switch</code> 语句是编写一连串 <code>if - else</code>\r\n语句的简便方法。它运行第一个 <code>case</code> 值\r\n值等于条件表达式的子句。</p>\r\n<p>Go 的 <code>switch</code> 语句类似于 C、C++、Java、JavaScript 和 PHP\r\n中的，不过 Go 只会运行选定的 <code>case</code>，而非之后所有的\r\n<code>case</code>。 在效果上，Go 的做法相当于这些语言中为每个\r\n<code>case</code> 后面自动添加了所需的 <code>break</code> 语句。在 Go\r\n中，除非以 <code>fallthrough</code> 语句结束，否则分支会自动终止。 Go\r\n的另一点重要的不同在于 <code>switch</code> 的 <code>case</code>\r\n无需为常量，且取值不限于整数。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;runtime&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;Go 运行的系统环境：&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> os := runtime.GOOS; os &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;darwin&quot;</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;macOS.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> <span class=\"string\">&quot;linux&quot;</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Linux.&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\t<span class=\"comment\">// freebsd, openbsd,</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// plan9, windows...</span></span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s.\\n&quot;</span>, os)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>switch的求值顺序</strong></p>\r\n<p>switch的case语句从上到下顺次执行，直到匹配成功时停止。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;周六是哪天？&quot;</span>)</span><br><span class=\"line\">\ttoday := time.Now().Weekday()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> time.Saturday &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">0</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;今天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">1</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;明天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> today + <span class=\"number\">2</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;后天。&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;很多天后。&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>无条件switch</strong></p>\r\n<p>无条件的 <code>switch</code> 同 <code>switch true</code> 一样。</p>\r\n<p>这种形式能将一长串 <code>if-then-else</code> 写得更加清晰。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tt := time.Now()</span><br><span class=\"line\">\t<span class=\"keyword\">switch</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">12</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;早上好！&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">case</span> t.Hour() &lt; <span class=\"number\">17</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;下午好！&quot;</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">default</span>:</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;晚上好！&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"defer推迟\">4、defer推迟</h3>\r\n<p>defer 语句会将函数推迟到外层函数返回之后执行。</p>\r\n<p>推迟调用的函数其参数会立即求值，但直到外层函数返回前该函数都不会被调用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> fmt.Println(<span class=\"string\">&quot;world&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;hello&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>defer 栈</strong></p>\r\n<p>推迟调用的函数调用会被压入一个栈中。\r\n当外层函数返回时，被推迟的调用会按照后进先出的顺序调用。</p>\r\n<p>更多关于 defer 语句的信息，请阅读<a\r\nhref=\"http://blog.go-zh.org/defer-panic-and-recover\">此博文</a>。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;counting&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">defer</span> fmt.Println(i)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;done&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//counting done  9  8  ---</span></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"更多类型结构体切片和映射\">更多类型：结构体、切片和映射</h2>\r\n<h3 id=\"指针\">1、指针</h3>\r\n<p>Go 拥有指针。指针保存了值的内存地址。</p>\r\n<p>类型 <code>*T</code> 是指向 <code>T</code> 类型值的指针，其零值为\r\n<code>nil</code>。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var p *int</span><br></pre></td></tr></table></figure>\r\n<p><code>&amp;</code> 操作符会生成一个指向其操作数的指针。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i := 42</span><br><span class=\"line\">p = &amp;i</span><br></pre></td></tr></table></figure>\r\n<p><code>*</code> 操作符表示指针指向的底层值。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fmt.Println(*p) // 通过指针 p 读取 i</span><br><span class=\"line\">*p = 21         // 通过指针 p 设置 i</span><br></pre></td></tr></table></figure>\r\n<p>这也就是通常所说的「解引用」或「间接引用」。</p>\r\n<p>与 C 不同，Go 没有指针运算。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ti, j := <span class=\"number\">42</span>, <span class=\"number\">2701</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tp := &amp;i         <span class=\"comment\">// 指向 i</span></span><br><span class=\"line\">\tfmt.Println(*p) <span class=\"comment\">// 通过指针读取 i 的值</span></span><br><span class=\"line\">\t*p = <span class=\"number\">21</span>         <span class=\"comment\">// 通过指针设置 i 的值</span></span><br><span class=\"line\">\tfmt.Println(i)  <span class=\"comment\">// 查看 i 的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tp = &amp;j         <span class=\"comment\">// 指向 j</span></span><br><span class=\"line\">\t*p = *p / <span class=\"number\">37</span>   <span class=\"comment\">// 通过指针对 j 进行除法运算</span></span><br><span class=\"line\">\tfmt.Println(j) <span class=\"comment\">// 查看 j 的值</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 42 21 73</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"结构体\">2、结构体</h3>\r\n<p>一个 结构体（<code>struct</code>）就是一组 字段（field）。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体字段</strong></p>\r\n<p>结构体字段可通过点号 <code>.</code> 来访问。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tv.X = <span class=\"number\">4</span></span><br><span class=\"line\">\tfmt.Println(v.X)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体指针</strong></p>\r\n<p>结构体字段可通过结构体指针来访问。</p>\r\n<p>如果我们有一个指向结构体的指针 <code>p</code> 那么可以通过\r\n<code>(*p).X</code> 来访问其字段 <code>X</code>。\r\n不过这么写太啰嗦了，所以语言也允许我们使用隐式解引用，直接写\r\n<code>p.X</code> 就可以。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX <span class=\"type\">int</span></span><br><span class=\"line\">\tY <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tv := Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;</span><br><span class=\"line\">\tp := &amp;v</span><br><span class=\"line\">\tp.X = <span class=\"number\">1e9</span></span><br><span class=\"line\">\tfmt.Println(v)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#123;1000000000 2&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>结构体字面量</strong></p>\r\n<p>使用 <code>Name:</code>\r\n语法可以仅列出部分字段（字段名的顺序无关）。</p>\r\n<p>特殊的前缀 <code>&amp;</code> 返回一个指向结构体的指针。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tX, Y <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> (</span><br><span class=\"line\">\tv1 = Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125;  <span class=\"comment\">// 创建一个 Vertex 类型的结构体</span></span><br><span class=\"line\">\tv2 = Vertex&#123;X: <span class=\"number\">1</span>&#125;  <span class=\"comment\">// Y:0 被隐式地赋予零值</span></span><br><span class=\"line\">\tv3 = Vertex&#123;&#125;      <span class=\"comment\">// X:0 Y:0</span></span><br><span class=\"line\">\tp  = &amp;Vertex&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>&#125; <span class=\"comment\">// 创建一个 *Vertex 类型的结构体（指针）</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(v1, p, v2, v3)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//  &#123;1 2&#125; &amp;&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125;</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"数组\">3、数组</h3>\r\n<p>类型 <code>[n]T</code> 表示一个数组，它拥有 <code>n</code> 个类型为\r\n<code>T</code> 的值。</p>\r\n<p>表达式</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a [10]int</span><br></pre></td></tr></table></figure>\r\n<p>会将变量 <code>a</code> 声明为拥有 10 个整数的数组。</p>\r\n<p>数组的长度是其类型的一部分，因此数组不能改变大小。\r\n这看起来是个限制，不过没关系，Go 拥有更加方便的使用数组的方式。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> a [<span class=\"number\">2</span>]<span class=\"type\">string</span></span><br><span class=\"line\">\ta[<span class=\"number\">0</span>] = <span class=\"string\">&quot;Hello&quot;</span></span><br><span class=\"line\">\ta[<span class=\"number\">1</span>] = <span class=\"string\">&quot;World&quot;</span></span><br><span class=\"line\">\tfmt.Println(a[<span class=\"number\">0</span>], a[<span class=\"number\">1</span>])</span><br><span class=\"line\">\tfmt.Println(a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(primes)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"切片\">4、切片</h3>\r\n<p>每个数组的大小都是固定的。而切片则为数组元素提供了动态大小的、灵活的视角。\r\n在实践中，切片比数组更常用。</p>\r\n<p>类型 <code>[]T</code> 表示一个元素类型为 <code>T</code> 的切片。.</p>\r\n<p>切片通过两个下标来界定，一个下界和一个上界，二者以冒号分隔：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[low : high]</span><br></pre></td></tr></table></figure>\r\n<p>它会选出一个半闭半开区间，包括第一个元素，但排除最后一个元素。</p>\r\n<p>以下表达式创建了一个切片，它包含 <code>a</code> 中下标从 1 到 3\r\n的元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[1:4]</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tprimes := [<span class=\"number\">6</span>]<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span> = primes[<span class=\"number\">1</span>:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>切片类似数组的引用</strong></p>\r\n<p>切片就像数组的引用\r\n切片并不存储任何数据，它只是描述了底层数组中的一段。</p>\r\n<p>更改切片的元素会修改其底层数组中对应的元素。</p>\r\n<p>和它共享底层数组的切片都会观测到这些修改。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tnames := [<span class=\"number\">4</span>]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;John&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Paul&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;George&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;Ringo&quot;</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(names)</span><br><span class=\"line\"></span><br><span class=\"line\">\ta := names[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tb := names[<span class=\"number\">1</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb[<span class=\"number\">0</span>] = <span class=\"string\">&quot;XXX&quot;</span></span><br><span class=\"line\">\tfmt.Println(a, b)</span><br><span class=\"line\">\tfmt.Println(names)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[John Paul George Ringo]</span></span><br><span class=\"line\"><span class=\"comment\">//[John Paul] [Paul George]</span></span><br><span class=\"line\"><span class=\"comment\">//[John XXX] [XXX George]</span></span><br><span class=\"line\"><span class=\"comment\">//[John XXX George Ringo]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片字面量</strong></p>\r\n<p>切片字面量类似于没有长度的数组字面量。</p>\r\n<p>这是一个数组字面量：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[3]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>\r\n<p>下面这样则会创建一个和上面相同的数组，然后再构建一个引用了它的切片：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[]bool&#123;true, true, false&#125;</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tq := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tfmt.Println(q)</span><br><span class=\"line\"></span><br><span class=\"line\">\tr := []<span class=\"type\">bool</span>&#123;<span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">\tfmt.Println(r)</span><br><span class=\"line\"></span><br><span class=\"line\">\ts := []<span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\t\ti <span class=\"type\">int</span></span><br><span class=\"line\">\t\tb <span class=\"type\">bool</span></span><br><span class=\"line\">\t&#125;&#123;</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">2</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">3</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">5</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">7</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">11</span>, <span class=\"literal\">false</span>&#125;,</span><br><span class=\"line\">\t\t&#123;<span class=\"number\">13</span>, <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[2 3 5 7 11 13]</span></span><br><span class=\"line\"><span class=\"comment\">//[true false true true false true]</span></span><br><span class=\"line\"><span class=\"comment\">//[&#123;2 true&#125; &#123;3 false&#125; &#123;5 true&#125; &#123;7 true&#125; &#123;11 false&#125; &#123;13 true&#125;]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的默认行为</strong></p>\r\n<p>在进行切片时，你可以利用它的默认行为来忽略上下界。</p>\r\n<p>切片下界的默认值为 0，上界则是该切片的长度。</p>\r\n<p>对于数组</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var a [10]int</span><br></pre></td></tr></table></figure>\r\n<p>来说，以下切片表达式和它是等价的：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a[0:10]</span><br><span class=\"line\">a[:10]</span><br><span class=\"line\">a[0:]</span><br><span class=\"line\">a[:]</span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的长度与容量</strong></p>\r\n<p>切片拥有 <strong>长度</strong> 和 <strong>容量</strong>。</p>\r\n<p>切片的长度就是它所包含的元素个数。</p>\r\n<p>切片的容量是从它的第一个元素开始数，到其底层数组元素末尾的个数。</p>\r\n<p>切片 <code>s</code> 的长度和容量可通过表达式 <code>len(s)</code> 和\r\n<code>cap(s)</code> 来获取。</p>\r\n<p>你可以通过重新切片来扩展一个切片，给它提供足够的容量。\r\n试着修改示例程序中的切片操作，向外扩展它的长度，看看会发生什么。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ts := []<span class=\"type\">int</span>&#123;<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">11</span>, <span class=\"number\">13</span>&#125;</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 截取切片使其长度为 0</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">0</span>]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 扩展其长度</span></span><br><span class=\"line\">\ts = s[:<span class=\"number\">4</span>]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 舍弃前两个值</span></span><br><span class=\"line\">\ts = s[<span class=\"number\">2</span>:]</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//len=6 cap=6 [2 3 5 7 11 13]</span></span><br><span class=\"line\"><span class=\"comment\">//len=0 cap=6 []</span></span><br><span class=\"line\"><span class=\"comment\">//len=4 cap=6 [2 3 5 7]</span></span><br><span class=\"line\"><span class=\"comment\">//len=2 cap=4 [5 7]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>nil 切片</strong></p>\r\n<p>切片的零值是 <code>nil</code>。</p>\r\n<p>nil 切片的长度和容量为 0 且没有底层数组。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tfmt.Println(s, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> s == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;nil!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//[] 0 0</span></span><br><span class=\"line\"><span class=\"comment\">//nil!</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>用 make 创建切片</strong></p>\r\n<p>切片可以用内置函数 <code>make</code>\r\n来创建，这也是你创建动态数组的方式。</p>\r\n<p><code>make</code>\r\n函数会分配一个元素为零值的数组并返回一个引用了它的切片：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a := make([]int, 5)  // len(a)=5</span><br></pre></td></tr></table></figure>\r\n<p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">b := make([]int, 0, 5) // len(b)=0, cap(b)=5</span><br><span class=\"line\"></span><br><span class=\"line\">b = b[:cap(b)] // len(b)=5, cap(b)=5</span><br><span class=\"line\">b = b[1:]      // len(b)=4, cap(b)=4</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\ta := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;a&quot;</span>, a)</span><br><span class=\"line\"></span><br><span class=\"line\">\tb := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;b&quot;</span>, b)</span><br><span class=\"line\"></span><br><span class=\"line\">\tc := b[:<span class=\"number\">2</span>]</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;c&quot;</span>, c)</span><br><span class=\"line\"></span><br><span class=\"line\">\td := c[<span class=\"number\">2</span>:<span class=\"number\">5</span>]</span><br><span class=\"line\">\tprintSlice(<span class=\"string\">&quot;d&quot;</span>, d)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s <span class=\"type\">string</span>, x []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;%s len=%d cap=%d %v\\n&quot;</span>,</span><br><span class=\"line\">\t\ts, <span class=\"built_in\">len</span>(x), <span class=\"built_in\">cap</span>(x), x)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//a len=5 cap=5 [0 0 0 0 0]</span></span><br><span class=\"line\"><span class=\"comment\">//b len=0 cap=5 []</span></span><br><span class=\"line\"><span class=\"comment\">//c len=2 cap=5 [0 0]</span></span><br><span class=\"line\"><span class=\"comment\">//d len=3 cap=3 [0 0 0]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>切片的切片</strong></p>\r\n<p>切片可以包含任何类型，当然也包括其他切片。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个井字棋（经典游戏）</span></span><br><span class=\"line\">\tboard := [][]<span class=\"type\">string</span>&#123;</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t\t[]<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>, <span class=\"string\">&quot;_&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 两个玩家轮流打上 X 和 O</span></span><br><span class=\"line\">\tboard[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">2</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;O&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">1</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"string\">&quot;O&quot;</span></span><br><span class=\"line\">\tboard[<span class=\"number\">0</span>][<span class=\"number\">2</span>] = <span class=\"string\">&quot;X&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(board); i++ &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%s\\n&quot;</span>, strings.Join(board[i], <span class=\"string\">&quot; &quot;</span>))</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//X _ X</span></span><br><span class=\"line\"><span class=\"comment\">//O _ X</span></span><br><span class=\"line\"><span class=\"comment\">//_ _ O</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>向切片追加元素</strong></p>\r\n<p>为切片追加新的元素是种常见的操作，为此 Go 提供了内置的\r\n<code>append</code> 函数。内置函数的<a\r\nhref=\"https://tour.go-zh.org/pkg/builtin/#append\">文档</a>对该函数有详细的介绍。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func append(s []T, vs ...T) []T</span><br></pre></td></tr></table></figure>\r\n<p><code>append</code> 的第一个参数 <code>s</code> 是一个元素类型为\r\n<code>T</code> 的切片，其余类型为 <code>T</code>\r\n的值将会追加到该切片的末尾。</p>\r\n<p><code>append</code>\r\n的结果是一个包含原切片所有元素加上新添加元素的切片。</p>\r\n<p>当 <code>s</code>\r\n的底层数组太小，不足以容纳所有给定的值时，它就会分配一个更大的数组。\r\n返回的切片会指向这个新分配的数组。</p>\r\n<p>（要了解关于切片的更多内容，请阅读文章 <a\r\nhref=\"https://tour.go-zh.org/blog/go-slices-usage-and-internals\">Go\r\n切片：用法和本质</a>。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s []<span class=\"type\">int</span></span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可在空切片上追加</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">0</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 这个切片会按需增长</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 可以一次性添加多个元素</span></span><br><span class=\"line\">\ts = <span class=\"built_in\">append</span>(s, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">\tprintSlice(s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">printSlice</span><span class=\"params\">(s []<span class=\"type\">int</span>)</span></span> &#123;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;len=%d cap=%d %v\\n&quot;</span>, <span class=\"built_in\">len</span>(s), <span class=\"built_in\">cap</span>(s), s)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//len=0 cap=0 []</span></span><br><span class=\"line\"><span class=\"comment\">//len=1 cap=1 [0]</span></span><br><span class=\"line\"><span class=\"comment\">//len=2 cap=2 [0 1]</span></span><br><span class=\"line\"><span class=\"comment\">//len=5 cap=6 [0 1 2 3 4]</span></span><br></pre></td></tr></table></figure>\r\n<h3 id=\"range-遍历\">5、range 遍历</h3>\r\n<p><code>for</code> 循环的 <code>range</code> 形式可遍历切片或映射。</p>\r\n<p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。\r\n第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> pow = []<span class=\"type\">int</span>&#123;<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">16</span>, <span class=\"number\">32</span>, <span class=\"number\">64</span>, <span class=\"number\">128</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i, v := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;2**%d = %d\\n&quot;</span>, i, v)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2**0 = 1</span></span><br><span class=\"line\"><span class=\"comment\">//2**1 = 2</span></span><br><span class=\"line\"><span class=\"comment\">//2**2 = 4</span></span><br><span class=\"line\"><span class=\"comment\">//2**3 = 8</span></span><br><span class=\"line\"><span class=\"comment\">//2**4 = 16</span></span><br><span class=\"line\"><span class=\"comment\">//2**5 = 32</span></span><br><span class=\"line\"><span class=\"comment\">//2**6 = 64</span></span><br><span class=\"line\"><span class=\"comment\">//2**7 = 128</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>range 遍历（续）</strong></p>\r\n<p>可以将下标或值赋予 <code>_</code> 来忽略它。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i, _ := range pow</span><br><span class=\"line\">for _, value := range pow</span><br></pre></td></tr></table></figure>\r\n<p>若你只需要索引，忽略第二个变量即可。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i := range pow</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpow := <span class=\"built_in\">make</span>([]<span class=\"type\">int</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tpow[i] = <span class=\"number\">1</span> &lt;&lt; <span class=\"type\">uint</span>(i) <span class=\"comment\">// == 2**i</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, value := <span class=\"keyword\">range</span> pow &#123;</span><br><span class=\"line\">\t\tfmt.Printf(<span class=\"string\">&quot;%d\\n&quot;</span>, value)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：切片</strong></p>\r\n<p>实现 <code>Pic</code>。它应当返回一个长度为 <code>dy</code>\r\n的切片，其中每个元素是一个长度为 <code>dx</code>，元素类型为\r\n<code>uint8</code> 的切片。当你运行此程序时，它会将每个整数解释为灰度值\r\n（好吧，其实是蓝度值）并显示它所对应的图像。</p>\r\n<p>图像的解析式由你来定。几个有趣的函数包括\r\n<code>(x+y)/2</code>、<code>x*y</code>、<code>x^y</code>、<code>x*log(y)</code>\r\n和 <code>x%(y+1)</code>。</p>\r\n<p>（提示：需要使用循环来分配 <code>[][]uint8</code> 中的每个\r\n<code>[]uint8</code>。）</p>\r\n<p>（请使用 <code>uint8(intValue)</code> 在类型之间转换；你可能会用到\r\n<code>math</code> 包中的函数。）</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;golang.org/x/tour/pic&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Pic</span><span class=\"params\">(dx, dy <span class=\"type\">int</span>)</span></span> [][]<span class=\"type\">uint8</span> &#123;</span><br><span class=\"line\">\timg := <span class=\"built_in\">make</span>([][]<span class=\"type\">uint8</span>, dy) <span class=\"comment\">// 创建一个长度为 dy 的切片</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> y := <span class=\"number\">0</span>; y &lt; dy; y++ &#123;</span><br><span class=\"line\">\t\timg[y] = <span class=\"built_in\">make</span>([]<span class=\"type\">uint8</span>, dx) <span class=\"comment\">// 为每行创建一个长度为 dx 的切片</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> x := <span class=\"number\">0</span>; x &lt; dx; x++ &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 计算灰度值，这里使用 (x+y)/2</span></span><br><span class=\"line\">\t\t\tgrayValue := <span class=\"type\">uint8</span>((x + y) / <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\timg[y][x] = grayValue</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> img</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpic.Show(Pic)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"map映射\">6、map映射</h3>\r\n<p><code>map</code> 映射将键映射到值。</p>\r\n<p>映射的零值为 <code>nil</code> 。<code>nil</code>\r\n映射既没有键，也不能添加键。</p>\r\n<p><code>make</code> 函数会返回给定类型的映射，并将其初始化备用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm = <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex)</span><br><span class=\"line\">\tm[<span class=\"string\">&quot;Bell Labs&quot;</span>] = Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(m[<span class=\"string\">&quot;Bell Labs&quot;</span>])</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//&#123;40.68433 -74.39967&#125;</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>映射字面量</strong></p>\r\n<p>映射的字面量和结构体类似，只不过必须有键名。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;Bell Labs&quot;</span>: Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;Google&quot;</span>: Vertex&#123;</span><br><span class=\"line\">\t\t<span class=\"number\">37.42202</span>, <span class=\"number\">-122.08408</span>,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//map[Bell Labs:&#123;40.68433 -74.39967&#125; Google:&#123;37.42202 -122.08408&#125;]</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>映射字面量（续）</strong></p>\r\n<p>若顶层类型只是一个类型名，那么你可以在字面量的元素中省略它。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Vertex <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tLat, Long <span class=\"type\">float64</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> m = <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]Vertex&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;Bell Labs&quot;</span>: &#123;<span class=\"number\">40.68433</span>, <span class=\"number\">-74.39967</span>&#125;,</span><br><span class=\"line\">\t<span class=\"string\">&quot;Google&quot;</span>:    &#123;<span class=\"number\">37.42202</span>, <span class=\"number\">-122.08408</span>&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(m)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<p><strong>修改映射</strong></p>\r\n<p>在映射 <code>m</code> 中插入或修改元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m[key] = elem</span><br></pre></td></tr></table></figure>\r\n<p>获取元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem = m[key]</span><br></pre></td></tr></table></figure>\r\n<p>删除元素：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">delete(m, key)</span><br></pre></td></tr></table></figure>\r\n<p>通过双赋值检测某个键是否存在：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem, ok = m[key]</span><br></pre></td></tr></table></figure>\r\n<p>若 <code>key</code> 在 <code>m</code> 中，<code>ok</code> 为\r\n<code>true</code> ；否则，<code>ok</code> 为 <code>false</code>。</p>\r\n<p>若 <code>key</code> 不在映射中，则 <code>elem</code>\r\n是该映射元素类型的零值。</p>\r\n<p><strong>注</strong>：若 <code>elem</code> 或 <code>ok</code>\r\n还未声明，你可以使用短变量声明：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">elem, ok := m[key]</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tm := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">\tm[<span class=\"string\">&quot;答案&quot;</span>] = <span class=\"number\">42</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tm[<span class=\"string\">&quot;答案&quot;</span>] = <span class=\"number\">48</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">delete</span>(m, <span class=\"string\">&quot;答案&quot;</span>)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, m[<span class=\"string\">&quot;答案&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\tv, ok := m[<span class=\"string\">&quot;答案&quot;</span>]</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;值：&quot;</span>, v, <span class=\"string\">&quot;是否存在？&quot;</span>, ok)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//值： 42</span></span><br><span class=\"line\"><span class=\"comment\">//值： 48</span></span><br><span class=\"line\"><span class=\"comment\">//值： 0</span></span><br><span class=\"line\"><span class=\"comment\">//值： 0 是否存在？ false</span></span><br></pre></td></tr></table></figure>\r\n<p>练习：<strong>映射</strong></p>\r\n<p>实现 <code>WordCount</code>。它应当返回一个映射，其中包含字符串\r\n<code>s</code> 中每个“单词”的个数。 函数 <code>wc.Test</code>\r\n会为此函数执行一系列测试用例，并输出成功还是失败。</p>\r\n<p>你会发现 <a\r\nhref=\"https://go-zh.org/pkg/strings/#Fields\">strings.Fields</a>\r\n很有用。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;golang.org/x/tour/wc&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// WordCount 返回字符串 s 中每个单词的出现次数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">WordCount</span><span class=\"params\">(s <span class=\"type\">string</span>)</span></span> <span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 使用 strings.Fields 函数分割字符串为单词</span></span><br><span class=\"line\">\twords := strings.Fields(s)</span><br><span class=\"line\">\tcounts := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"type\">string</span>]<span class=\"type\">int</span>) <span class=\"comment\">// 创建一个映射来存储单词计数</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 遍历单词并计数</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> _, word := <span class=\"keyword\">range</span> words &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 将单词转换为小写，以确保计数时不区分大小写</span></span><br><span class=\"line\">\t\tword = strings.ToLower(word)</span><br><span class=\"line\">\t\tcounts[word]++ <span class=\"comment\">// 增加单词的计数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> counts</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\twc.Test(WordCount)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"函数值\">7、函数值</h3>\r\n<p>函数也是值。它们可以像其他值一样传递。</p>\r\n<p>函数值可以用作函数的参数或返回值。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;math&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//函数接受一个类型为func(float64, float64) float64的参数fn，即接受一个函数，这个函数接受两个float64类型的参数并返回一个float64类型的结果。compute函数调用这个传入的函数，并传入3和4作为参数，然后返回这个调用的结果。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">compute</span><span class=\"params\">(fn <span class=\"keyword\">func</span>(<span class=\"type\">float64</span>, <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span>) <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fn(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\thypot := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x, y <span class=\"type\">float64</span>)</span></span> <span class=\"type\">float64</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.Sqrt(x*x + y*y)</span><br><span class=\"line\">\t&#125;  <span class=\"comment\">//接受两个float64类型的参数x和y，并返回这两个参数平方和的平方根，即计算直角三角形的斜边长度。</span></span><br><span class=\"line\">\tfmt.Println(hypot(<span class=\"number\">5</span>, <span class=\"number\">12</span>))  <span class=\"comment\">// 直角边 5 12 </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tfmt.Println(compute(hypot))  <span class=\"comment\">// 进入 3跟 4  返回斜边5</span></span><br><span class=\"line\">\tfmt.Println(compute(math.Pow)) <span class=\"comment\">// 这里定义了一个匿名函数，计算 x 的平方  也就是3的4次方</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 13 5 81</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>函数闭包</strong></p>\r\n<p>Go 函数可以是一个闭包。闭包是一个函数值，它引用了其函数体之外的变量。\r\n该函数可以访问并赋予其引用的变量值，换句话说，该函数被“绑定”到了这些变量。</p>\r\n<p>例如，函数 <code>adder</code>\r\n返回一个闭包。每个闭包都被绑定在其各自的 <code>sum</code> 变量上。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"><span class=\"comment\">//adder函数返回一个新的函数，这个新函数有能力修改并记住adder函数中定义的局部变量sum。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">adder</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(<span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\tsum := <span class=\"number\">0</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(x <span class=\"type\">int</span>)</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\tsum += x</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tpos, neg := adder(), adder()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(</span><br><span class=\"line\">\t\t\tpos(i),</span><br><span class=\"line\">\t\t\tneg(<span class=\"number\">-2</span>*i),</span><br><span class=\"line\">\t\t)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//显示pos和neg闭包的累加和</span></span><br></pre></td></tr></table></figure>\r\n<p><strong>练习：斐波纳契闭包</strong></p>\r\n<p>让我们用函数做些好玩的。</p>\r\n<p>实现一个 <code>fibonacci</code>\r\n函数，它返回一个函数（闭包），该闭包返回一个<a\r\nhref=\"https://zh.wikipedia.org/wiki/斐波那契数列\">斐波纳契数列</a> (0,\r\n1, 1, 2, 3, 5, ...)。</p>\r\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// fibonacci 是返回一个「返回一个 int 的函数」的函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">fibonacci</span><span class=\"params\">()</span></span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 定义两个变量a和b，分别保存当前和前一个斐波纳契数</span></span><br><span class=\"line\">\ta, b := <span class=\"number\">0</span>, <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"comment\">// 返回一个闭包，该闭包能够访问并更新a和b的值</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> <span class=\"type\">int</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 返回当前斐波纳契数a</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 然后，将b赋值给a，将a+b的值赋值给b，更新为下一个斐波纳契数</span></span><br><span class=\"line\">\t\ta, b = b, a+b</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tf := fibonacci()</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++ &#123;</span><br><span class=\"line\">\t\tfmt.Println(f())</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "Go",
                "go"
            ]
        },
        {
            "id": "http://example.com/2024/08/15/post/utils/JRebel%20%E4%BD%BF%E7%94%A8debug%E7%BC%96%E8%AF%91%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/",
            "url": "http://example.com/2024/08/15/post/utils/JRebel%20%E4%BD%BF%E7%94%A8debug%E7%BC%96%E8%AF%91%E5%8D%A1%E4%BD%8F%E9%97%AE%E9%A2%98/",
            "title": "实用小工具",
            "date_published": "2024-08-15T01:30:06.664Z",
            "content_html": "<h4 id=\"jrebel-使用debug编译卡住问题\">JRebel 使用debug编译卡住问题</h4>\r\n<p><img\r\nsrc=\"https://dlink.host/wx4.sinaimg.cn/large/006V2BDqly8hsob5h5rwuj30rr0jhdiq.jpg\" /></p>\r\n",
            "tags": [
                "实用小工具",
                "tools"
            ]
        },
        {
            "id": "http://example.com/2024/07/16/post/sql/02-%E6%97%B6%E9%97%B4%E5%88%A4%E6%96%AD%E6%9F%A5%E8%AF%A2/",
            "url": "http://example.com/2024/07/16/post/sql/02-%E6%97%B6%E9%97%B4%E5%88%A4%E6%96%AD%E6%9F%A5%E8%AF%A2/",
            "title": "PostgreSQL中筛选月份和年份查询数据集",
            "date_published": "2024-07-16T13:28:16.252Z",
            "content_html": "<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">--        日期查询  PostgreSQL中筛选月份和年份查询数据集   三种方法</span></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> srm.cux_5_offline_purchase <span class=\"keyword\">where</span>  <span class=\"built_in\">extract</span>(<span class=\"keyword\">year</span> <span class=\"keyword\">from</span> op_createdate )<span class=\"operator\">=</span><span class=\"number\">2024</span> <span class=\"keyword\">and</span> <span class=\"built_in\">extract</span>(<span class=\"keyword\">month</span> <span class=\"keyword\">from</span> op_createdate)<span class=\"operator\">=</span><span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> srm.cux_5_offline_purchase <span class=\"keyword\">where</span>  date_part(<span class=\"string\">&#x27;year&#x27;</span>, op_createdate) <span class=\"operator\">=</span> <span class=\"number\">2024</span> <span class=\"keyword\">AND</span> date_part(<span class=\"string\">&#x27;month&#x27;</span>, op_createdate) <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">-- SELECT * FROM srm.cux_5_offline_purchase WHERE op_createdate &gt;= &#x27;2024-2-01&#x27; AND op_createdate &lt;= &#x27;2024-2-28&#x27;;  不推荐</span></span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "数据库",
                "time"
            ]
        },
        {
            "id": "http://example.com/2024/07/16/post/springboot/04-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "url": "http://example.com/2024/07/16/post/springboot/04-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/",
            "title": "正则表达式",
            "date_published": "2024-07-16T13:27:44.140Z",
            "content_html": "<h1 id=\"正则表达式\">正则表达式</h1>\r\n<p>正则表达式是一种用于匹配和操作文本的强大工具，它是由一系列字符和特殊字符组成的模式，用于描述要匹配的文本模式。</p>\r\n<p>正则表达式可以在文本中查找、替换、提取和验证特定的模式。</p>\r\n<h2 id=\"使用方法\">使用方法</h2>\r\n<h4 id=\"普通字符\">普通字符</h4>\r\n<p>普通字符包括没有显式指定为元字符的所有可打印和不可打印字符。这包括所有大写和小写字母、所有数字、所有标点符号和一些其他符号。</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 14%\" />\r\n<col style=\"width: 85%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th>字符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td><strong>[ABC]</strong></td>\r\n<td>匹配 <strong>[...]</strong> 中的所有字符，例如\r\n<strong>[aeiou]</strong> 匹配字符串 \"google runoob taobao\" 中所有的 e o\r\nu a 字母。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/E691DDE1-E5CB-4EA8-8D16-759BD0D2B09D.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td><strong>[^ABC]</strong></td>\r\n<td>匹配除了 <strong>[...]</strong> 中字符的所有字符，例如\r\n<strong>[^aeiou]</strong> 匹配字符串 \"google runoob taobao\" 中除了 e o u\r\na 字母的所有字符。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/ED971D92-30F4-4768-A2C7-02A84A3A9DEB.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td><strong>[A-Z]</strong></td>\r\n<td>[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/C5E357BD-65E3-4EB3-9D80-10D096F19287.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td><strong>.</strong></td>\r\n<td>匹配除换行符（、之外的任何单个字符，相等于 [^\\n\\r]。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/0FD7E77D-38A7-43BC-B51A-7DBA23A77756.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td><strong>[]</strong></td>\r\n<td>匹配所有。是匹配所有空白符，包括换行，非空白符，不包括换行。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/47CA6C59-64CF-433A-909E-1E342349A4E0.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td>***</td>\r\n<td>匹配字母、数字、下划线。等价于 [A-Za-z0-9_]<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/F35A5971-3519-4CAE-8BEC-9DE8F4A55257.jpg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td>**</td>\r\n<td>匹配任意一个阿拉伯数字（0 到 9）。等价于 <strong>[0-9]</strong></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"非打印字符\">非打印字符</h4>\r\n<p>非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 93%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th>字符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td></td>\r\n<td>匹配由x指明的控制字符。例如， 匹配一个 Control-M 或回车符。x\r\n的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。</td>\r\n</tr>\r\n<tr>\r\n<td> 匹配一个换页符。等价于 0c 和 。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>匹配一个换行符。等价于 0a 和 。</td>\r\n</tr>\r\n<tr>\r\n<td> 匹配一个回车符。等价于 0d 和 。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ 。注意\r\nUnicode 正则表达式会匹配全角空格符。</td>\r\n</tr>\r\n<tr>\r\n<td></td>\r\n<td>匹配任何非空白字符。等价于 [^ 。</td>\r\n</tr>\r\n<tr>\r\n<td> 匹配一个制表符。等价于 和 。</td>\r\n<td></td>\r\n</tr>\r\n<tr>\r\n<td> 匹配一个垂直制表符。等价于 0b 和 。</td>\r\n<td></td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"特殊字符\">特殊字符</h4>\r\n<p>所谓特殊字符，就是一些有特殊含义的字符，如上面说的\r\n<strong>runoo*b</strong> 中的\r\n*****，简单的说就是表示任何字符串的意思。如果要查找字符串中的 *****\r\n符号，则需要对 ***** 进行转义，即在其前加一个\r\n****，<strong>runo*ob</strong> 匹配字符串 <strong>runo*ob</strong>。</p>\r\n<p>许多元字符要求在试图匹配它们时特别对待。若要匹配这些特殊字符，必须首先使字符\"转义\"，即，将反斜杠字符****\r\n放在它们前面。下表列出了正则表达式中的特殊字符：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 11%\" />\r\n<col style=\"width: 88%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th>特别字符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>$</td>\r\n<td>匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline\r\n属性，则 $ 也匹配 '' 或 '。要匹配 $ 字符本身，请使用 $。</td>\r\n</tr>\r\n<tr>\r\n<td>( )</td>\r\n<td>标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用\r\n( 和 )。</td>\r\n</tr>\r\n<tr>\r\n<td>*</td>\r\n<td>匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 *。</td>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 +。</td>\r\n</tr>\r\n<tr>\r\n<td>.</td>\r\n<td>匹配除换行符 之外的任何单字符。要匹配 . ，请使用 . 。</td>\r\n</tr>\r\n<tr>\r\n<td>[</td>\r\n<td>标记一个中括号表达式的开始。要匹配 [，请使用 [。</td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ?\r\n字符，请使用 ?。</td>\r\n</tr>\r\n<tr>\r\n<td>\\</td>\r\n<td>将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如，\r\n'n' 匹配字符 'n'。'' 匹配换行符。序列 '\\' 匹配 \"\"，而 '(' 则匹配\r\n\"(\"。</td>\r\n</tr>\r\n<tr>\r\n<td>^</td>\r\n<td>匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配\r\n^ 字符本身，请使用 ^。</td>\r\n</tr>\r\n<tr>\r\n<td>{</td>\r\n<td>标记限定符表达式的开始。要匹配 {，请使用 {。</td>\r\n</tr>\r\n<tr>\r\n<td>|</td>\r\n<td>指明两项之间的一个选择。要匹配 |，请使用 |。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<h4 id=\"限定符\">限定符</h4>\r\n<p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有\r\n***** 或 <strong>+</strong> 或 <strong>?</strong> 或\r\n<strong>{n}</strong> 或 <strong>{n,}</strong> 或 <strong>{n,m}</strong>\r\n共6种。</p>\r\n<p>正则表达式的限定符有：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 7%\" />\r\n<col style=\"width: 92%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th>字符</th>\r\n<th>描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td>*</td>\r\n<td>匹配前面的子表达式零次或多次。例如，<strong>zo*</strong> 能匹配\r\n<strong>\"z\"</strong> 以及 <strong>\"zoo\"</strong>。***** 等价于\r\n<strong>{0,}</strong>。</td>\r\n</tr>\r\n<tr>\r\n<td>+</td>\r\n<td>匹配前面的子表达式一次或多次。例如，<strong>zo+</strong> 能匹配\r\n<strong>\"zo\"</strong> 以及 \"<strong>zoo\"</strong>，但不能匹配\r\n<strong>\"z\"</strong>。<strong>+</strong> 等价于\r\n<strong>{1,}</strong>。</td>\r\n</tr>\r\n<tr>\r\n<td>?</td>\r\n<td>匹配前面的子表达式零次或一次。例如，<strong>do(es)?</strong>\r\n可以匹配 <strong>\"do\"</strong> 、 <strong>\"does\"</strong>、\r\n<strong>\"doxy\"</strong> 中的 <strong>\"do\"</strong> 和\r\n<strong>\"does\"</strong>。<strong>?</strong> 等价于\r\n<strong>{0,1}</strong>。<img\r\nsrc=\"https://www.runoob.com/wp-content/uploads/2014/03/CA742DA3-826D-463B-85F5-316DAB3515C1.jpeg\"\r\nalt=\"img\" /></td>\r\n</tr>\r\n<tr>\r\n<td>{n}</td>\r\n<td>n 是一个非负整数。匹配确定的 <strong>n</strong>\r\n次。例如，<strong>o{2}</strong> 不能匹配 <strong>\"Bob\"</strong> 中的\r\n<strong>o</strong>，但是能匹配 <strong>\"food\"</strong> 中的两个\r\n<strong>o</strong>。</td>\r\n</tr>\r\n<tr>\r\n<td>{n,}</td>\r\n<td>n 是一个非负整数。至少匹配n 次。例如，<strong>o{2,}</strong>\r\n不能匹配 <strong>\"Bob\"</strong> 中的 <strong>o</strong>，但能匹配\r\n<strong>\"foooood\"</strong> 中的所有\r\n<strong>o</strong>。<strong>o{1,}</strong> 等价于\r\n<strong>o+</strong>。<strong>o{0,}</strong> 则等价于\r\n<strong>o*</strong>。</td>\r\n</tr>\r\n<tr>\r\n<td>{n,m}</td>\r\n<td>m 和 n 均为非负整数，其中 n &lt;= m。最少匹配 n 次且最多匹配 m\r\n次。例如，<strong>o{1,3}</strong> 将匹配 <strong>\"fooooood\"</strong>\r\n中的前三个 <strong>o</strong>。<strong>o{0,1}</strong> 等价于\r\n<strong>o?</strong>。请注意在逗号和两个数之间不能有空格。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>以下正则表达式匹配一个正整数，<strong>[1-9]</strong>设置第一个数字不是\r\n0，<strong>[0-9]*</strong> 表示任意多个数字：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[1-9][0-9]*/</span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\F249891D-F3D9-48D5-A3CB-6FD8FD029117.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>请注意，限定符出现在范围表达式之后。因此，它应用于整个范围表达式，在本例中，只指定从\r\n0 到 9 的数字（包括 0 和 9）。</p>\r\n<p>这里不使用 +\r\n限定符，因为在第二个位置或后面的位置不一定需要有一个数字。也不使用 ?\r\n字符，因为使用 ? 会将整数限制到只有两位数。</p>\r\n<p>如果你想设置 0~99\r\n的两位数，可以使用下面的表达式来至少指定一位但至多两位数字。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[0-9]&#123;1,2&#125;/</span><br></pre></td></tr></table></figure>\r\n<p>上面的表达式的缺点是，只能匹配两位数字，而且可以匹配 0、00、01、10 99\r\n的章节编号仍只匹配开头两位数字。</p>\r\n<p>改进下，匹配 1~99 的正整数表达式如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[1-9][0-9]?/</span><br></pre></td></tr></table></figure>\r\n<p>或</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure>\r\n<p><strong><em>*</em>** 和 *<em>+*</em>\r\n限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个\r\n? 就可以实现非贪婪或最小匹配。</strong></p>\r\n<p>例如，您可能搜索 HTML 文档，以查找在 <strong>h1</strong>\r\n标签内的内容。HTML 代码如下：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h1&gt;RUNOOB-菜鸟教程&lt;/h1&gt;</span><br></pre></td></tr></table></figure>\r\n<p><strong>贪婪：</strong>下面的表达式匹配从开始小于符号 (&lt;) 到关闭\r\nh1 标记的大于符号 (&gt;) 之间的所有内容。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;.*&gt;/</span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\AD8F3320-2F2E-4513-9BB5-84450D62783D.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<strong>非贪婪：</strong>如果您只需要匹配开始和结束 h1\r\n标签，下面的非贪婪表达式只匹配\r\n<h1>\r\n<p>。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;.*?&gt;/</span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\A6E72665-CE61-46F4-A72B-A34BC13F5820.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>也可以使用以下正则表达式来匹配 h1 标签，表达式则是：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;\\w+?&gt;/</span><br></pre></td></tr></table></figure>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\C6E89F76-D059-4600-A507-74C42306A790.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>通过在 *****、<strong>+</strong> 或 <strong>?</strong> 限定符之后放置\r\n<strong>?</strong>，该表达式从\"贪婪\"表达式转换为\"非贪婪\"表达式或者最小匹配。</p>\r\n<h4 id=\"定位符\">定位符</h4>\r\n<p>定位符使您能够将正则表达式固定到行首或行尾。它们还使您能够创建这样的正则表达式，这些正则表达式出现在一个单词内、在一个单词的开头或者一个单词的结尾。</p>\r\n<p>定位符用来描述字符串或单词的边界，<strong>^</strong> 和\r\n<strong>$</strong> 分别指字符串的开始与结束，<strong>\r\n描述单词的前或后边界，</strong>* 表示非单词边界。</p>\r\n<p>正则表达式的定位符有：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 6%\" />\r\n<col style=\"width: 93%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">字符</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\">^</td>\r\n<td style=\"text-align: left;\">匹配输入字符串开始的位置。如果设置了\r\nRegExp 对象的 Multiline 属性，^ 还会与 或 后的位置匹配。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">$</td>\r\n<td style=\"text-align: left;\">匹配输入字符串结尾的位置。如果设置了\r\nRegExp 对象的 Multiline 属性，$ 还会与 或 前的位置匹配。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\">\r\n匹配一个单词边界，即字与空格间的位置。</td>\r\n<td style=\"text-align: left;\"></td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"></td>\r\n<td style=\"text-align: left;\">非单词边界匹配。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p><strong>注意</strong>：不能将限定符与定位符一起使用。由于在紧靠换行或者单词边界的前面或后面不能有一个以上位置，因此不允许诸如\r\n<strong>^*</strong> 之类的表达式。</p>\r\n<p>若要匹配一行文本开始处的文本，请在正则表达式的开始使用\r\n<strong>^</strong> 字符。不要将 <strong>^</strong>\r\n的这种用法与中括号表达式内的用法混淆。</p>\r\n<p>若要匹配一行文本的结束处的文本，请在正则表达式的结束处使用\r\n<strong>$</strong> 字符。</p>\r\n<p>若要在搜索章节标题时使用定位点，下面的正则表达式匹配一个章节标题，该标题只包含两个尾随数字，并且出现在行首：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;/</span><br></pre></td></tr></table></figure>\r\n<p>真正的章节标题不仅出现行的开始处，而且它还是该行中仅有的文本。它既出现在行首又出现在同一行的结尾。下面的表达式能确保指定的匹配只匹配章节而不匹配交叉引用。通过创建只匹配一行文本的开始和结尾的正则表达式，就可做到这一点。</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^Chapter [1-9][0-9]&#123;0,1&#125;$/</span><br></pre></td></tr></table></figure>\r\n<p>匹配单词边界稍有不同，但向正则表达式添加了很重要的能力。单词边界是单词和空格之间的位置。非单词边界是任何其他位置。下面的表达式匹配单词\r\nChapter 的开头三个字符，因为这三个字符出现在单词边界后面：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\bCha/</span><br></pre></td></tr></table></figure>\r\n<p>**\r\n字符的位置是非常重要的。如果它位于要匹配的字符串的开始，它在单词的开始处查找匹配项。如果它位于字符串的结尾，它在单词的结尾处查找匹配项。例如，下面的表达式匹配单词\r\nChapter 中的字符串 ter，因为它出现在单词边界的前面：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ter\\b/</span><br></pre></td></tr></table></figure>\r\n<p>下面的表达式匹配 Chapter 中的字符串 apt，但不匹配 aptitude 中的字符串\r\napt：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/\\Bapt/</span><br></pre></td></tr></table></figure>\r\n<p>字符串 apt 出现在单词 Chapter 中的非单词边界处，但出现在单词 aptitude\r\n中的单词边界处。对于 ***\r\n非单词边界运算符，不可以匹配单词的开头或结尾，如果是下面的表达式，就不匹配\r\nChapter 中的 Cha：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\\BCha</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"选择\">选择</h4>\r\n<p>用圆括号 <strong>()</strong> 将所有选择项括起来，相邻的选择项之间用\r\n<strong>|</strong> 分隔。</p>\r\n<p><strong>()</strong> 表示捕获分组，<strong>()</strong>\r\n会把每个分组里的匹配的值保存起来， 多个匹配值可以通过数字 n\r\n来查看(<strong>n</strong> 是一个数字，表示第 n 个捕获组的内容)。</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\366574CC-3706-4B4C-8782-1BFF4CF57582.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\82A7298A-2A94-49E3-AA27-A7778EE89711.jpg\"\r\nalt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p>但用圆括号会有一个副作用，使相关的匹配会被缓存，此时可用\r\n<strong>?:</strong> 放在第一个选项前来消除这种副作用。</p>\r\n<p>其中 <strong>?:</strong> 是非捕获元之一，还有两个非捕获元是\r\n<strong>?=</strong> 和\r\n<strong>?!</strong>，这两个还有更多的含义，前者为正向预查，在任何开始匹配圆括号内的正则表达式模式的位置来匹配搜索字符串，后者为负向预查，在任何开始不匹配该正则表达式模式的位置来匹配搜索字符串。</p>\r\n<h3 id=\"以下列出-的使用区别\">以下列出 ?=、?&lt;=、?!、?&lt;!\r\n的使用区别</h3>\r\n<p><strong>exp1(?=exp2)</strong>：查找 exp2 前面的 exp1。</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\reg-111.jpg\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p><strong>(?&lt;=exp2)exp1</strong>：查找 exp2 后面的 exp1。</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\reg-222.jpg\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p><strong>exp1(?!exp2)</strong>：查找后面不是 exp2 的 exp1。</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\reg-333.jpg\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<p><strong>(?&lt;!exp2)exp1</strong>：查找前面不是 exp2 的 exp1。</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\reg-444.jpg\" alt=\"img\" />\r\n<figcaption aria-hidden=\"true\">img</figcaption>\r\n</figure>\r\n<h2 id=\"示例\">示例</h2>\r\n<h5 id=\"匹配-html-标签及内容\">1、匹配 HTML 标签及内容</h5>\r\n<p>以下正则表达式用于匹配 iframe 标签：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;iframe(([\\s\\S])*?)&lt;\\/iframe&gt;/</span><br></pre></td></tr></table></figure>\r\n<p>其他标签的匹配可以替换 <strong>iframe</strong> 。</p>\r\n<p>匹配 id=\"mydiv\" 的 div 标签：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/&lt;div id=&quot;mydiv&quot;(([\\s\\S])*?)&lt;\\/div&gt;/</span><br></pre></td></tr></table></figure>\r\n<h5 id=\"中文正则表达式\">2、中文正则表达式</h5>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/[\\u4E00-\\u9FA5]/;</span><br></pre></td></tr></table></figure>\r\n<h5 id=\"密码强度正则表达式\">3、密码强度正则表达式</h5>\r\n<p>最少六位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/;、</span><br></pre></td></tr></table></figure>\r\n<h5 id=\"邮箱正则表达式\">4、邮箱正则表达式</h5>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/^(([^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+(\\.[^&lt;&gt;()[\\]\\\\.,;:\\s@\\&quot;]+)*)|(\\&quot;.+\\&quot;))@((\\[[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]&#123;2,&#125;))$/</span><br><span class=\"line\"> );</span><br></pre></td></tr></table></figure>\r\n<p>附录：</p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 40%\" />\r\n<col style=\"width: 59%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">正则表达式</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/\\b([a-z]+) \\1\\b/gi</code></td>\r\n<td style=\"text-align: left;\">一个单词连续出现的位置。</td>\r\n</tr>\r\n<tr>\r\n<td\r\nstyle=\"text-align: left;\"><code>/(\\w+):\\/\\/([^/:]+)(:\\d*)?([^# ]*)/</code></td>\r\n<td style=\"text-align: left;\">匹配一个 URL\r\n解析为协议、域、端口及相对路径。</td>\r\n</tr>\r\n<tr>\r\n<td\r\nstyle=\"text-align: left;\"><code>/^(?:Chapter|Section) [1-9][0-9]&#123;0,1&#125;$/</code></td>\r\n<td style=\"text-align: left;\">定位章节的位置。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/[-a-z]/</code></td>\r\n<td style=\"text-align: left;\">a 至 z 共 26个 字母再加一个\r\n<strong>-</strong> 号。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/ter\\b/</code></td>\r\n<td style=\"text-align: left;\">可匹配 chapter，而不能匹配 terminal。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/\\Bapt/</code></td>\r\n<td style=\"text-align: left;\">可匹配 chapter，而不能匹配 aptitude。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/Windows(?=95 |98 |NT )/</code></td>\r\n<td style=\"text-align: left;\">可匹配 Windows95 或 Windows98 或\r\nWindowsNT，当找到一个匹配后，从 Windows\r\n后面开始进行下一次的检索匹配。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/^\\s*$/</code></td>\r\n<td style=\"text-align: left;\">匹配空行。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>/\\d&#123;2&#125;-\\d&#123;5&#125;/</code></td>\r\n<td style=\"text-align: left;\">验证由两位数字、一个连字符再加 5\r\n位数字组成的 ID 号。</td>\r\n</tr>\r\n<tr>\r\n<td\r\nstyle=\"text-align: left;\"><code>&lt;[a-zA-Z]+.*?&gt;([\\s\\S]*?)&lt;/[a-zA-Z]*?&gt;</code></td>\r\n<td style=\"text-align: left;\">匹配 HTML 标记。</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 25%\" />\r\n<col style=\"width: 74%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: left;\">正则表达式</th>\r\n<th style=\"text-align: left;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>hello</code></td>\r\n<td style=\"text-align: left;\">匹配 {hello}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>gray|grey</code></td>\r\n<td style=\"text-align: left;\">匹配 {gray, grey}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>gr(a|e)y</code></td>\r\n<td style=\"text-align: left;\">匹配 {gray, grey}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>gr[ae]y</code></td>\r\n<td style=\"text-align: left;\">匹配 {gray, grey}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>b[aeiou]bble</code></td>\r\n<td style=\"text-align: left;\">匹配 {babble, bebble, bibble, bobble,\r\nbubble}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>[b-chm-pP]at|ot</code></td>\r\n<td style=\"text-align: left;\">匹配 {bat, cat, hat, mat, nat, oat, pat,\r\nPat, ot}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>colou?r</code></td>\r\n<td style=\"text-align: left;\">匹配 {color, colour}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>rege(x(es)?|xps?)</code></td>\r\n<td style=\"text-align: left;\">匹配 {regex, regexes, regexp,\r\nregexps}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>go*gle</code></td>\r\n<td style=\"text-align: left;\">匹配 {ggle, gogle, google, gooogle,\r\ngoooogle, ...}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>go+gle</code></td>\r\n<td style=\"text-align: left;\">匹配 {gogle, google, gooogle, goooogle,\r\n...}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>g(oog)+le</code></td>\r\n<td style=\"text-align: left;\">匹配 {google, googoogle, googoogoogle,\r\ngoogoogoogoogle, ...}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>z&#123;3&#125;</code></td>\r\n<td style=\"text-align: left;\">匹配 {zzz}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>z&#123;3,6&#125;</code></td>\r\n<td style=\"text-align: left;\">匹配 {zzz, zzzz, zzzzz, zzzzzz}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>z&#123;3,&#125;</code></td>\r\n<td style=\"text-align: left;\">匹配 {zzz, zzzz, zzzzz, ...}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>[Bb]rainf\\*\\*k</code></td>\r\n<td style=\"text-align: left;\">匹配 {Brainf<strong>k,\r\nbrainf</strong>k}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>\\d</code></td>\r\n<td style=\"text-align: left;\">匹配 {0,1,2,3,4,5,6,7,8,9}</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>1\\d&#123;10&#125;</code></td>\r\n<td style=\"text-align: left;\">匹配 11 个数字，以 1 开头</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>[2-9]|[12]\\d|3[0-6]</code></td>\r\n<td style=\"text-align: left;\">匹配 2 到 36 范围内的整数</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>Hello\\nworld</code></td>\r\n<td style=\"text-align: left;\">匹配 Hello 后跟换行符，后跟 world</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>\\d+(\\.\\d\\d)?</code></td>\r\n<td\r\nstyle=\"text-align: left;\">包含一个正整数或包含两位小数位的浮点数。</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>[^*@#]</code></td>\r\n<td style=\"text-align: left;\">排除 *、@ 、# 三个特色符号</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>//[^\\r\\n]*[\\r\\n]</code></td>\r\n<td style=\"text-align: left;\">匹配 <strong>//</strong> 开头的注释</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>^dog</code></td>\r\n<td style=\"text-align: left;\">匹配以 \"dog\" 开始</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>dog$</code></td>\r\n<td style=\"text-align: left;\">匹配以 \"dog\" 结尾</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: left;\"><code>^dog$</code></td>\r\n<td style=\"text-align: left;\">is exactly \"dog\"</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n",
            "tags": [
                "后端",
                "正则"
            ]
        },
        {
            "id": "http://example.com/2024/07/16/post/vue/%E4%BF%AE%E6%94%B9avue%E9%BB%98%E8%AE%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/",
            "url": "http://example.com/2024/07/16/post/vue/%E4%BF%AE%E6%94%B9avue%E9%BB%98%E8%AE%A4%E7%BB%84%E4%BB%B6%E6%A0%B7%E5%BC%8F/",
            "title": "修改avue默认组件样式",
            "date_published": "2024-07-16T13:26:11.679Z",
            "content_html": "<h1 id=\"修改avue默认组件样式\">修改avue默认组件样式</h1>\r\n<p><a\r\nhref=\"https://blog.csdn.net/fyydashen/article/details/113611506\">参考链接</a></p>\r\n<p>我们打开F12找到我们需要修改的样式class 名</p>\r\n<p><img\r\nsrc=\"https://dlink.host/wx2.sinaimg.cn/large/006V2BDqly8hs1tni3a40j30mq04nwft.jpg\" /></p>\r\n<p>错误示范1：</p>\r\n<p>会影响到其他页面的样式</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.avue-crud__menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n<p>错误示范2：；</p>\r\n<p>样式无效</p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\"><span class=\"selector-class\">.avue-crud__menu</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n<p><strong>正确示范1</strong>：</p>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">/deep/ .avue-crud__menu &#123;</span><br><span class=\"line\">  display: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n<p><strong>正确示范2：</strong></p>\r\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class=\"line\">::v-deep .el-divider--vertical &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "前端",
                "avue"
            ]
        },
        {
            "id": "http://example.com/2024/07/15/post/vue/D3.js%20%20%20V3%E7%89%88%E6%9C%AC/",
            "url": "http://example.com/2024/07/15/post/vue/D3.js%20%20%20V3%E7%89%88%E6%9C%AC/",
            "title": "D3.js V3版本  学习笔记",
            "date_published": "2024-07-15T03:24:48.459Z",
            "content_html": "<h1 id=\"d3.js-v3版本\">D3.js V3版本</h1>\r\n<h2 id=\"d3-tree\">D3 Tree</h2>\r\n<p>vue2 + d3 (3.5.17)</p>\r\n<h4 id=\"安装组件\">安装组件</h4>\r\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install d3@3.5.17 -s   </span><br></pre></td></tr></table></figure>\r\n<p><span class=\"citation\"\r\ndata-cites=\"后面是版本号\">@后面是版本号</span>，不加默认下载最新版</p>\r\n<p>页面（组件）引用</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> d3 <span class=\"keyword\">from</span> <span class=\"string\">&quot;d3&quot;</span>;</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"直接上一个简单案例\">直接上一个简单案例</h3>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div id=&quot;screenshot&quot; style=&quot;width:100%;height:90%&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;div id=&quot;tree-container&quot; style=&quot;width:100%;height:95%;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;div ref=&quot;container&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import * as d3 from &#x27;d3&#x27;;</span><br><span class=\"line\">import $ from &#x27;jquery&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      treeData:&#123;</span><br><span class=\"line\">        name: &#x27;收入&#x27;,</span><br><span class=\"line\">        value:100,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;电费收入&#x27;,</span><br><span class=\"line\">            value: 10,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;供热收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;副产品收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;其他收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.drawTree();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    drawTree() &#123;</span><br><span class=\"line\">    // 设置图表的宽高和Margin</span><br><span class=\"line\">      var margin = &#123; top: 20, right: 90, bottom: 30, left: 90 &#125;,</span><br><span class=\"line\">          width = 960 - margin.left - margin.right,</span><br><span class=\"line\">          height = 500 - margin.top - margin.bottom;</span><br><span class=\"line\"></span><br><span class=\"line\">      //创建视图</span><br><span class=\"line\">      let svg = d3.select(this.$refs.container)</span><br><span class=\"line\">          .append(&#x27;svg&#x27;)</span><br><span class=\"line\">          .attr(&#x27;width&#x27;, width + margin.right + margin.left)</span><br><span class=\"line\">          .attr(&#x27;height&#x27;, height + margin.top + margin.bottom)</span><br><span class=\"line\">          .append(&#x27;g&#x27;)</span><br><span class=\"line\">          .call(this.zoomListener)</span><br><span class=\"line\">          .attr(&quot;transform&quot;, &quot;translate(&quot; + margin.left + &quot;,&quot; + margin.top + &quot;)&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">      //定义节点拖放行为的拖动侦听器。</span><br><span class=\"line\"></span><br><span class=\"line\">      //建立树布局</span><br><span class=\"line\">      const treeLayout = d3.layout.tree()</span><br><span class=\"line\">          .size([width, height]);</span><br><span class=\"line\"></span><br><span class=\"line\">      const nodes = treeLayout.nodes(this.treeData);</span><br><span class=\"line\">      const links = treeLayout.links(nodes);</span><br><span class=\"line\"></span><br><span class=\"line\">      const nodeGroup = svg.selectAll(&#x27;.node&#x27;)</span><br><span class=\"line\">          .data(nodes)</span><br><span class=\"line\">          .enter()</span><br><span class=\"line\">          .append(&#x27;g&#x27;)</span><br><span class=\"line\">          .attr(&#x27;class&#x27;, &#x27;node&#x27;)</span><br><span class=\"line\">          .attr(&#x27;transform&#x27;, d =&gt; `translate($&#123;d.x&#125;,$&#123;d.y&#125;)`);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeGroup.append(&#x27;rect&#x27;)//设置为矩形</span><br><span class=\"line\">          .attr(&#x27;width&#x27;, 80) // 设置矩形宽度</span><br><span class=\"line\">          .attr(&#x27;height&#x27;, 30) // 设置矩形高度</span><br><span class=\"line\">          .attr(&#x27;x&#x27;, -40) // 调整矩形位置，使其居中</span><br><span class=\"line\">          .attr(&#x27;y&#x27;, -15)</span><br><span class=\"line\">          .attr(&#x27;rx&#x27;, 5) // 可选，设置矩形圆角</span><br><span class=\"line\">          .attr(&#x27;ry&#x27;, 5)</span><br><span class=\"line\">          .style(&#x27;fill&#x27;, &#x27;transparent&#x27;)</span><br><span class=\"line\">          .style(&#x27;stroke&#x27;, &#x27;#000&#x27;) // 设置矩形边框颜色</span><br><span class=\"line\">          .style(&#x27;stroke-width&#x27;, &#x27;1px&#x27;); // 设置矩形边框宽度; // 透明</span><br><span class=\"line\">      nodeGroup.append(&#x27;line&#x27;) // 添加分割线</span><br><span class=\"line\">          .attr(&#x27;x1&#x27;, -40) // 分割线的起始点 x 坐标</span><br><span class=\"line\">          .attr(&#x27;y1&#x27;, 0) // 分割线的起始点 y 坐标</span><br><span class=\"line\">          .attr(&#x27;x2&#x27;, 40) // 分割线的结束点 x 坐标</span><br><span class=\"line\">          .attr(&#x27;y2&#x27;, 0) // 分割线的结束点 y 坐标</span><br><span class=\"line\">          .style(&#x27;stroke&#x27;, &#x27;#000&#x27;) // 设置分割线颜色</span><br><span class=\"line\">          .style(&#x27;stroke-width&#x27;, &#x27;1px&#x27;); // 设置分割线宽度</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeGroup.append(&#x27;text&#x27;)</span><br><span class=\"line\">          .attr(&#x27;dy&#x27;, -4) // 调整文本的垂直位置，使其居中</span><br><span class=\"line\">          .style(&#x27;text-anchor&#x27;, &#x27;middle&#x27;) // 设置文本水平居中</span><br><span class=\"line\">          .text(d =&gt; d.name);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeGroup.append(&#x27;text&#x27;)</span><br><span class=\"line\">          .attr(&#x27;dy&#x27;, 13) // 调整文本的垂直位置，使其在矩形内部</span><br><span class=\"line\">          .style(&#x27;text-anchor&#x27;, &#x27;middle&#x27;) // 设置文本水平居中</span><br><span class=\"line\">          .text(d =&gt; d.value);</span><br><span class=\"line\"></span><br><span class=\"line\">      svg.selectAll(&#x27;.link&#x27;)</span><br><span class=\"line\">          .data(links)</span><br><span class=\"line\">          .enter()</span><br><span class=\"line\">          .append(&#x27;path&#x27;)</span><br><span class=\"line\">          .attr(&#x27;class&#x27;, &#x27;link&#x27;)</span><br><span class=\"line\">          .attr(&#x27;d&#x27;, d =&gt; &#123;</span><br><span class=\"line\">            return `M$&#123;d.source.x&#125;,$&#123;d.source.y+15&#125;L$&#123;d.target.x&#125;,$&#123;d.target.y-15&#125;`;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      const zoomHandler = d3.behavior.zoom()</span><br><span class=\"line\">          .on(&#x27;zoom&#x27;, () =&gt; &#123;</span><br><span class=\"line\">            svg.attr(&#x27;transform&#x27;, `translate($&#123;d3.event.translate&#125;)scale($&#123;d3.event.scale&#125;)`);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      svg.call(zoomHandler);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">circle &#123;</span><br><span class=\"line\">  fill: #ccc;</span><br><span class=\"line\">  stroke: #000;</span><br><span class=\"line\">  stroke-width: 1px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">text &#123;</span><br><span class=\"line\">  font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">path.link &#123;</span><br><span class=\"line\">  fill: none;</span><br><span class=\"line\">  stroke: #ccc;</span><br><span class=\"line\">  stroke-width: 1.5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n<p>我们可以看到D3.js的步骤其实就是</p>\r\n<p><code>初始化图表 -&gt; 获取数据 -&gt; 数据转换 -&gt; 元素操作/交互/动画 -&gt; 事件绑定 -&gt; 数据更新 -&gt; 元素更新</code></p>\r\n<h2 id=\"用d3-tree-做一个指标下钻功能\">用D3 tree 做一个指标下钻功能</h2>\r\n<p>看完上面哪个例子我们直接上难度，在大数据时代，很多数据客户都会要求直观的展示数据，这个指标下钻就是很普遍的客户需求，展示如下动图。</p>\r\n<p>[双击收展、任意拖拉、滚轮缩放]</p>\r\n<figure>\r\n<img data-src=\"D:\\Pictures\\typore\\006V2BDqly8hrp5pe8coxg30b408u41t.gif\"\r\nalt=\"alt\" />\r\n<figcaption aria-hidden=\"true\">alt</figcaption>\r\n</figure>\r\n<p>我们按照例子中的方法进行介绍：</p>\r\n<p>图的绘制主要在drawTree 与 update中</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">drawTree</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">//show D3 tree</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">depths</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">treeDepths</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">treeData</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">depths</span>)</span><br><span class=\"line\">     <span class=\"comment\">//建立树布局</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">minHeight</span> = <span class=\"number\">500</span>;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">viewerWidth</span> = $(<span class=\"string\">&quot;#screenshot&quot;</span>).<span class=\"title function_\">width</span>();</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span> = $(<span class=\"string\">&quot;#screenshot&quot;</span>).<span class=\"title function_\">height</span>();</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span>)</span><br><span class=\"line\">     <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span> &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">minHeight</span>)</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">minHeight</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span>=<span class=\"number\">500</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span> = d3.<span class=\"property\">layout</span>.<span class=\"title function_\">tree</span>()</span><br><span class=\"line\">         .<span class=\"title function_\">size</span>([<span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">viewerWidth</span>]);</span><br><span class=\"line\">     <span class=\"comment\">//定义一个d3对角线投影，供稍后的节点路径使用</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">diagonal</span> = d3.<span class=\"property\">svg</span>.<span class=\"title function_\">diagonal</span>()</span><br><span class=\"line\">         .<span class=\"title function_\">projection</span>(<span class=\"function\"><span class=\"params\">d</span> =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> [d.<span class=\"property\">y</span>, d.<span class=\"property\">x</span>];</span><br><span class=\"line\">         &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//call visit to maxLabelLength</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">visit</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">treeData</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"property\">totalNodes</span>++;</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (d.<span class=\"property\">name</span>) &#123;</span><br><span class=\"line\">         <span class=\"variable language_\">this</span>.<span class=\"property\">maxLabelLength</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(d.<span class=\"property\">name</span>.<span class=\"property\">length</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">maxLabelLength</span>);</span><br><span class=\"line\">       &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">         <span class=\"variable language_\">this</span>.<span class=\"property\">maxLabelLength</span> = <span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(<span class=\"number\">0</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">maxLabelLength</span>);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">     &#125;, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> d.<span class=\"property\">children</span> &amp;&amp; d.<span class=\"property\">children</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span> ? d.<span class=\"property\">children</span> : <span class=\"literal\">null</span>;</span><br><span class=\"line\">     &#125;)</span><br><span class=\"line\">     <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;总节点&quot;</span>,<span class=\"variable language_\">this</span>.<span class=\"property\">totalNodes</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//排序树最初是为了防止json没有按排序顺序排列</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">sortTree</span>()</span><br><span class=\"line\">     <span class=\"comment\">//定义 zoomListener，该 zoomListener 在 scaleExtents 中约束的“zoom”事件上调用缩放</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">zoomListener</span> = d3.<span class=\"property\">behavior</span>.<span class=\"title function_\">zoom</span>().<span class=\"title function_\">scaleExtent</span>([<span class=\"number\">0.1</span>, <span class=\"number\">3</span>]).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;zoom&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">       <span class=\"variable language_\">this</span>.<span class=\"title function_\">zoom</span>()</span><br><span class=\"line\">     &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//创建视图</span></span><br><span class=\"line\">     <span class=\"keyword\">const</span> baseSvg = d3.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;#tree-container&quot;</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">viewerWidth</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;class&quot;</span>,<span class=\"string\">&quot;overlay&quot;</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">append</span>(<span class=\"string\">&quot;g&quot;</span>)</span><br><span class=\"line\">         .<span class=\"title function_\">call</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">zoomListener</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">let</span> dragListener = d3.<span class=\"property\">behavior</span>.<span class=\"title function_\">drag</span>()</span><br><span class=\"line\">         .<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dragstart&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">dragStarted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">nodes</span>(d);</span><br><span class=\"line\">           d3.<span class=\"property\">event</span>.<span class=\"property\">sourceEvent</span>.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">         &#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;drag&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">return</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">dragStarted</span>) &#123;</span><br><span class=\"line\">             <span class=\"keyword\">let</span> domNode = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">initiateDrag</span>(d, domNode);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"comment\">//获取mouseEvent相对于SVG容器的同弦以允许摇摄</span></span><br><span class=\"line\">           <span class=\"keyword\">let</span> relCoords = d3.<span class=\"title function_\">mouse</span>($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">get</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">0</span>] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)&#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;left&#x27;</span>);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">0</span>] &gt; ($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">width</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;right&#x27;</span>);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">1</span>] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;up&#x27;</span>);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">1</span>] &gt; ($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">height</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)) &#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;down&#x27;</span>);</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">               <span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span>);</span><br><span class=\"line\">             &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           d.<span class=\"property\">x0</span> += d3.<span class=\"property\">event</span>.<span class=\"property\">dy</span>;</span><br><span class=\"line\">           d.<span class=\"property\">y0</span> += d3.<span class=\"property\">event</span>.<span class=\"property\">dx</span>;</span><br><span class=\"line\">           <span class=\"keyword\">var</span> node = d3.<span class=\"title function_\">select</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">           node.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"string\">&quot;translate(&quot;</span> + d.<span class=\"property\">y0</span> + <span class=\"string\">&quot;,&quot;</span> + d.<span class=\"property\">x0</span> + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">           <span class=\"comment\">//更新临时连接器</span></span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateTempConnector</span>();</span><br><span class=\"line\">         &#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dragend&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">           <span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>)&#123;</span><br><span class=\"line\">             <span class=\"keyword\">var</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">parent</span>.<span class=\"property\">children</span>.<span class=\"title function_\">indexOf</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>);</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (index &gt; -<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">parent</span>.<span class=\"property\">children</span>.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span> !== <span class=\"string\">&quot;undefined&quot;</span> || <span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>)&#123;</span><br><span class=\"line\">               <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                 <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">               &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                 <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">             &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span> = []</span><br><span class=\"line\">               <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">             <span class=\"comment\">//确保要添加到的节点已展开，以便用户可以看到添加的节点已正确移动</span></span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">expand</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>);</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">sortTree</span>();</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">endDrag</span>();</span><br><span class=\"line\">           &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">             <span class=\"variable language_\">this</span>.<span class=\"title function_\">endDrag</span>();</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">         &#125;);</span><br><span class=\"line\">     <span class=\"comment\">//附加一个包含所有节点的组，缩放侦听器可以对其进行操作。</span></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span> = baseSvg.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;g&quot;</span>);</span><br><span class=\"line\">     <span class=\"comment\">//移除双击</span></span><br><span class=\"line\">     d3.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;svg&quot;</span>).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dblclick.zoom&quot;</span>, <span class=\"literal\">null</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">root</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">treeData</span>;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"property\">x0</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">viewerHeight</span>/<span class=\"number\">2</span>;</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"property\">y0</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">     <span class=\"comment\">//最初布局树并以根节点为中心。</span></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">collapse</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">update</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">     <span class=\"variable language_\">this</span>.<span class=\"title function_\">centerNode</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>);</span><br><span class=\"line\">   &#125;,</span><br></pre></td></tr></table></figure>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">update</span>(<span class=\"params\">source</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> width = <span class=\"number\">130</span>,</span><br><span class=\"line\">          height = <span class=\"number\">70</span>;</span><br><span class=\"line\">      <span class=\"comment\">//计算新 树图的布局</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">nodes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">root</span>).<span class=\"title function_\">reverse</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> links = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">links</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>)</span><br><span class=\"line\">      <span class=\"comment\">//设置y坐标点  每层占  200px；</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">d</span>=&gt;</span>&#123;</span><br><span class=\"line\">        d.<span class=\"property\">y</span>=d.<span class=\"property\">depth</span> * <span class=\"number\">200</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//每个node对应一个group</span></span><br><span class=\"line\">      <span class=\"comment\">//data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> node = <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;g.node&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">data</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">id</span> || (d.<span class=\"property\">id</span> = ++ <span class=\"variable language_\">this</span>.<span class=\"property\">i</span>)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//新增节点数据集，设置位置</span></span><br><span class=\"line\">      <span class=\"comment\">//在 svg 中添加一个g，g是 svg 中的一个属性，是 group 的意思，</span></span><br><span class=\"line\">      <span class=\"comment\">// 它表示一组什么东西，如一组 lines ， rects ，circles</span></span><br><span class=\"line\">      <span class=\"comment\">// 其实坐标轴就是由这些东西构成的。</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> nodeEnter = node.<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&quot;g&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;node&quot;</span>) <span class=\"comment\">//attr设置html属性，style设置css属性</span></span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;translate(&quot;</span> + source.<span class=\"property\">y0</span> + <span class=\"string\">&quot;,&quot;</span> + source.<span class=\"property\">x0</span> + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dblclick&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123; <span class=\"variable language_\">this</span>.<span class=\"title function_\">click</span>(d) &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//添加连接点---此处设置的是圆圈过渡时候的效果（颜色）</span></span><br><span class=\"line\">      nodeEnter.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;rect&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, -<span class=\"number\">65</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;y&quot;</span>,-<span class=\"number\">35</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;width&quot;</span>, width)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;height&quot;</span>, height)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;rx&quot;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;#FFF&quot;</span>); <span class=\"comment\">//d 代表数据，也就是与某元素绑定的数据。</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//指标名称</span></span><br><span class=\"line\">      nodeEnter.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;dy&quot;</span>, -<span class=\"number\">20</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;text-anchor&quot;</span>, <span class=\"string\">&quot;middle&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">text</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">name</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;gray&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill-opacity&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;font-size&quot;</span>, <span class=\"string\">&quot;12px&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//指标值</span></span><br><span class=\"line\">      nodeEnter.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">children</span> || d.<span class=\"property\">_children</span> ? -<span class=\"number\">15</span> : -<span class=\"number\">15</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;dy&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">          <span class=\"comment\">// .attr(&quot;text-anchor&quot;, (d) &#123; return d.children || d._children ? &quot;end&quot; : &quot;start&quot;; &#125;)</span></span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;text-anchor&quot;</span>, <span class=\"string\">&quot;middle&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">text</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">value</span>.<span class=\"title function_\">toLocaleString</span>();</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;font-size&quot;</span>, <span class=\"string\">&quot;18px&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//指标单位</span></span><br><span class=\"line\">      nodeEnter.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">children</span> || d.<span class=\"property\">_children</span> ? d.<span class=\"property\">value</span> != <span class=\"literal\">null</span> ? d.<span class=\"property\">value</span>.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span> * <span class=\"number\">6</span> - <span class=\"number\">4</span> : <span class=\"number\">10</span> : d.<span class=\"property\">value</span> != <span class=\"literal\">null</span> ? d.<span class=\"property\">value</span>.<span class=\"title function_\">toString</span>().<span class=\"property\">length</span> * <span class=\"number\">6</span> - <span class=\"number\">4</span> : <span class=\"number\">10</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;dy&quot;</span>, -<span class=\"number\">3</span>)</span><br><span class=\"line\">          <span class=\"comment\">// .attr(&quot;text-anchor&quot;, (d) &#123; return d.children || d._children ? &quot;end&quot; : &quot;start&quot;; &#125;)</span></span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;text-anchor&quot;</span>, <span class=\"string\">&quot;middle&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">text</span>(<span class=\"string\">&quot;万元&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;gray&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;font-size&quot;</span>, <span class=\"string\">&quot;10px&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">//展开趋势图</span></span><br><span class=\"line\">      nodeEnter.<span class=\"title function_\">append</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">children</span> || d.<span class=\"property\">_children</span> ? <span class=\"number\">50</span> : <span class=\"number\">50</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;dy&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;text-anchor&quot;</span>, <span class=\"string\">&quot;middle&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">text</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;...&quot;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;gray&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill-opacity&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;font-size&quot;</span>, <span class=\"string\">&quot;28px&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">on</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">(<span class=\"params\">d, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;触发点击事件&quot;</span>)</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      <span class=\"comment\">// Transition nodes to their new position.将节点过渡到一个新的位置-----主要是针对节点过渡过程中的过渡效果</span></span><br><span class=\"line\">      <span class=\"comment\">//node就是保留的数据集，为原来数据的图形添加过渡动画。首先是整个组的位置</span></span><br><span class=\"line\">      <span class=\"comment\">//子节点全出来了</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> nodeUpdate = node.<span class=\"title function_\">transition</span>() <span class=\"comment\">//开始一个动画过度</span></span><br><span class=\"line\">          .<span class=\"title function_\">duration</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">duration</span>) <span class=\"comment\">//过渡延迟时间 此处主要设置的是圆圈节点随斜线的过渡延迟</span></span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;translate(&quot;</span> + d.<span class=\"property\">y</span> + <span class=\"string\">&quot;,&quot;</span> + d.<span class=\"property\">x</span> + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeUpdate.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;rect&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, -<span class=\"number\">65</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;y&quot;</span>, -<span class=\"number\">35</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;width&quot;</span>, width)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;height&quot;</span>, height/<span class=\"number\">2</span> + <span class=\"number\">10</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;rx&quot;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;#FFF&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke&quot;</span>,<span class=\"keyword\">function</span>(<span class=\"params\">d</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(d.<span class=\"property\">value</span> === <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> <span class=\"string\">&#x27;#6b6b6b&#x27;</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&#x27;steelblue&#x27;</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke-width&quot;</span>, <span class=\"string\">&quot;1.5px&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Transition exiting nodes to the parent&#x27;s new position.过渡现有的节点到父母的新位置。</span></span><br><span class=\"line\">      <span class=\"comment\">//最后处理消失的数据，添加消失动画</span></span><br><span class=\"line\">      <span class=\"keyword\">var</span> nodeExit = node.<span class=\"title function_\">exit</span>().<span class=\"title function_\">transition</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">duration</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">duration</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;translate(&quot;</span> + source.<span class=\"property\">y</span> + <span class=\"string\">&quot;,&quot;</span> + source.<span class=\"property\">x</span> + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeExit.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;rect&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;x&quot;</span>, -<span class=\"number\">65</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;y&quot;</span>, -<span class=\"number\">35</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;width&quot;</span>, width)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;height&quot;</span>, height/<span class=\"number\">2</span> +<span class=\"number\">10</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;rx&quot;</span>, <span class=\"number\">10</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;#FFF&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeExit.<span class=\"title function_\">select</span>(<span class=\"string\">&quot;text&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;text-anchor&quot;</span>, <span class=\"string\">&quot;middle&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill-opacity&quot;</span>, <span class=\"number\">1e-6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Update the links…线操作相关</span></span><br><span class=\"line\">      <span class=\"comment\">//再处理连线集合</span></span><br><span class=\"line\">      <span class=\"keyword\">let</span> link = <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;path.link&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;none&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke&quot;</span>, <span class=\"string\">&quot;steelblue&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke-width&quot;</span>, <span class=\"string\">&quot;1.5px&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">data</span>(links, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Enter any new links at the parent&#x27;s previous position.</span></span><br><span class=\"line\">      <span class=\"comment\">//添加新的连线</span></span><br><span class=\"line\"></span><br><span class=\"line\">      link.<span class=\"title function_\">enter</span>().<span class=\"title function_\">insert</span>(<span class=\"string\">&quot;path&quot;</span>, <span class=\"string\">&quot;g&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;fill&quot;</span>, <span class=\"string\">&quot;none&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke&quot;</span>, <span class=\"string\">&quot;steelblue&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">style</span>(<span class=\"string\">&quot;stroke-width&quot;</span>, <span class=\"string\">&quot;1.5px&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;link&quot;</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;d&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">              <span class=\"attr\">x</span>: source.<span class=\"property\">x0</span>,</span><br><span class=\"line\">              <span class=\"attr\">y</span>: source.<span class=\"property\">y0</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">diagonal</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">source</span>: o,</span><br><span class=\"line\">              <span class=\"attr\">target</span>: o</span><br><span class=\"line\">            &#125;); <span class=\"comment\">//diagonal - 生成一个二维贝塞尔连接器, 用于节点连接图.</span></span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;marker-end&#x27;</span>, <span class=\"string\">&#x27;url(#arrow)&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Transition links to their new position.将斜线过渡到新的位置</span></span><br><span class=\"line\">      <span class=\"comment\">//保留的连线添加过渡动画</span></span><br><span class=\"line\">      link.<span class=\"title function_\">transition</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">duration</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">duration</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;d&quot;</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">diagonal</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// Transition exiting nodes to the parent&#x27;s new position.过渡现有的斜线到父母的新位置。</span></span><br><span class=\"line\">      <span class=\"comment\">//消失的连线添加过渡动画</span></span><br><span class=\"line\">      link.<span class=\"title function_\">exit</span>().<span class=\"title function_\">transition</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">duration</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">duration</span>)</span><br><span class=\"line\">          .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;d&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> o = &#123;</span><br><span class=\"line\">              <span class=\"attr\">x</span>: source.<span class=\"property\">x</span>,</span><br><span class=\"line\">              <span class=\"attr\">y</span>: source.<span class=\"property\">y</span></span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">diagonal</span>(&#123;</span><br><span class=\"line\">              <span class=\"attr\">source</span>: o,</span><br><span class=\"line\">              <span class=\"attr\">target</span>: o</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">      <span class=\"comment\">// Stash the old positions for transition.将旧的斜线过渡效果隐藏</span></span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        d.<span class=\"property\">x0</span> = d.<span class=\"property\">x</span>;</span><br><span class=\"line\">        d.<span class=\"property\">y0</span> = d.<span class=\"property\">y</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\r\n<p>双击收展方法：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//展开节点</span></span><br><span class=\"line\"><span class=\"comment\">//children 展示节点 _children 隐藏节点  缩</span></span><br><span class=\"line\">    <span class=\"title function_\">expand</span>(<span class=\"params\">d</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d.<span class=\"property\">_children</span>)&#123;</span><br><span class=\"line\">        d.<span class=\"property\">children</span> = d.<span class=\"property\">_children</span>;</span><br><span class=\"line\">        d.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">expand</span>)</span><br><span class=\"line\">        d.<span class=\"property\">_children</span> = <span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//收缩节点</span></span><br><span class=\"line\">    <span class=\"title function_\">collapse</span>(<span class=\"params\">d</span>)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (d.<span class=\"property\">children</span>)&#123;</span><br><span class=\"line\">        d.<span class=\"property\">_children</span>=d.<span class=\"property\">children</span>;</span><br><span class=\"line\">        d.<span class=\"property\">children</span>=<span class=\"literal\">null</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br></pre></td></tr></table></figure>\r\n<p>根据数据判断层数：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//判断是否多层</span></span><br><span class=\"line\"><span class=\"title function_\">treeDepths</span>(<span class=\"params\">g</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> depths = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g.<span class=\"property\">children</span>)</span><br><span class=\"line\">    g.<span class=\"property\">children</span>.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">dfs</span>(v, <span class=\"number\">1</span>, depths);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> depths;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">//嵌套循环</span></span><br><span class=\"line\"><span class=\"title function_\">dfs</span>(<span class=\"params\">v, depth, depths</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> children = v.<span class=\"property\">children</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (children &amp;&amp; children.<span class=\"property\">length</span> &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    children.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">child</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"title function_\">dfs</span>(child, depth + <span class=\"number\">1</span>, depths);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    depths.<span class=\"title function_\">push</span>(v);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\r\n<p>排序节点：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//排序</span></span><br><span class=\"line\"><span class=\"title function_\">sortTree</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;==排序开始==&quot;</span>)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b.<span class=\"property\">name</span> ? b.<span class=\"property\">name</span>.<span class=\"title function_\">toLowerCase</span>() : b.<span class=\"property\">name</span> &lt; a.<span class=\"property\">name</span> ? a.<span class=\"property\">name</span>.<span class=\"title function_\">toLowerCase</span>() : a.<span class=\"property\">name</span> ? <span class=\"number\">1</span> : -<span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<p>拖拉行为：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">zoom</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"string\">&quot;translate(&quot;</span> + d3.<span class=\"property\">event</span>.<span class=\"property\">translate</span> + <span class=\"string\">&quot;)scale(&quot;</span> + d3.<span class=\"property\">event</span>.<span class=\"property\">scale</span> + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">      <span class=\"comment\">//拖拽开始时对节点进行一系列操作，以确保拖拽过程中节点的正确显示和相关连线的调整。</span></span><br><span class=\"line\"><span class=\"title function_\">initiateDrag</span>(<span class=\"params\">d, domNode</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  将当前被拖拽的节点保存在this.draggingNode属性中，</span></span><br><span class=\"line\"><span class=\"comment\">  以便在拖拽过程中能够对其进行操作</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span> = d;</span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  1=</span></span><br><span class=\"line\"><span class=\"comment\">  为了将被拖拽节点的.ghostCircle元素的</span></span><br><span class=\"line\"><span class=\"comment\">  pointer-events属性设置为none，</span></span><br><span class=\"line\"><span class=\"comment\">  以避免拖拽节点时干扰到其他元素</span></span><br><span class=\"line\"><span class=\"comment\">  2=</span></span><br><span class=\"line\"><span class=\"comment\">  为了将所有.ghostCircle元素的类设置为ghostCircle show，</span></span><br><span class=\"line\"><span class=\"comment\">  这可能是用于显示拖拽节点周围的虚拟元素</span></span><br><span class=\"line\"><span class=\"comment\">  3=为了为被拖拽的节点设置类名，可能是用于在拖拽过程中应用特定的样式</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  d3.<span class=\"title function_\">select</span>(domNode).<span class=\"title function_\">select</span>(<span class=\"string\">&#x27;.ghostCircle&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;pointer-events&#x27;</span>, <span class=\"string\">&#x27;none&#x27;</span>);</span><br><span class=\"line\">  d3.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;.ghostCircle&#x27;</span>).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;ghostCircle show&#x27;</span>);</span><br><span class=\"line\">  d3.<span class=\"title function_\">select</span>(domNode).<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;class&#x27;</span>, <span class=\"string\">&#x27;node activeDrag&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  重新排序所有节点，将被拖拽的节点置于最前面，</span></span><br><span class=\"line\"><span class=\"comment\">  以确保它能够在拖拽过程中正确显示在其他节点之上</span></span><br><span class=\"line\"><span class=\"comment\">  选择父项并对路径的</span></span><br><span class=\"line\"><span class=\"comment\">  a 不是悬停元素，将“a”发送到后面</span></span><br><span class=\"line\"><span class=\"comment\">  a 是悬停元素，将“a”放在前面</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;g.node&quot;</span>).<span class=\"title function_\">sort</span>(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123; <span class=\"comment\">// select the parent and sort the path&#x27;s</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a.<span class=\"property\">id</span> !== <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">id</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>; <span class=\"comment\">// a is not the hovered element, send &quot;a&quot; to the back</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> -<span class=\"number\">1</span>; <span class=\"comment\">// a is the hovered element, bring &quot;a&quot; to the front</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 如果节点有子节点，请删除链接和节点</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>.<span class=\"property\">length</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// remove link paths 删除链接路径</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> links = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">links</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>);</span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodePaths = <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;path.link&quot;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">data</span>(links, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> d.<span class=\"property\">target</span>.<span class=\"property\">id</span>;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">    <span class=\"comment\">// remove child nodes 删除子节点</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> nodesExit = <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;g.node&quot;</span>)</span><br><span class=\"line\">        .<span class=\"title function_\">data</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> d.<span class=\"property\">id</span>;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">d, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (d.<span class=\"property\">id</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;).<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// remove parent link</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> parentLink = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">links</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">nodes</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">parent</span>));</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&#x27;path.link&#x27;</span>).<span class=\"title function_\">filter</span>(<span class=\"function\">(<span class=\"params\">d, i</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (d.<span class=\"property\">target</span>.<span class=\"property\">id</span> === <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">id</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  &#125;).<span class=\"title function_\">remove</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">dragStarted</span> = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//更新指示拖动隶属关系的临时连接器</span></span><br><span class=\"line\"><span class=\"title function_\">updateTempConnector</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> data = [];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span> !== <span class=\"literal\">null</span> &amp;&amp; <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span> !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// have to flip the source coordinates since we did this for the existing connectors on the original tree</span></span><br><span class=\"line\">    data = [&#123;</span><br><span class=\"line\">      <span class=\"attr\">source</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">y0</span>,</span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">x0</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">target</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">x</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">y0</span>,</span><br><span class=\"line\">        <span class=\"attr\">y</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">x0</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> link = <span class=\"variable language_\">this</span>.<span class=\"property\">svgGroup</span>.<span class=\"title function_\">selectAll</span>(<span class=\"string\">&quot;.templink&quot;</span>).<span class=\"title function_\">data</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">  link.<span class=\"title function_\">enter</span>().<span class=\"title function_\">append</span>(<span class=\"string\">&quot;path&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;templink&quot;</span>)</span><br><span class=\"line\">      .<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;d&quot;</span>, d3.<span class=\"property\">svg</span>.<span class=\"title function_\">diagonal</span>())</span><br><span class=\"line\">      .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;pointer-events&#x27;</span>, <span class=\"string\">&#x27;none&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  link.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;d&quot;</span>, d3.<span class=\"property\">svg</span>.<span class=\"title function_\">diagonal</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">  link.<span class=\"title function_\">exit</span>().<span class=\"title function_\">remove</span>();</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h2 id=\"d3-方法介绍\">d3 方法介绍</h2>\r\n<h4 id=\"append\">append()</h4>\r\n<p><code>.append('svg')</code>和<code>.append('g')</code>是D3中的方法，用于在DOM中添加SVG元素和G元素。</p>\r\n<p><code>.append('svg')</code>方法用于在选定的DOM元素中添加一个SVG元素。SVG（可缩放矢量图形）是一种用于在Web上显示矢量图形的XML语言。通过使用<code>.append('svg')</code>方法，你可以在DOM中创建一个包含SVG图形的容器，以便在其中绘制图形、添加元素等。例如：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制d3.<span class=\"title function_\">select</span>(<span class=\"string\">&#x27;body&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"number\">300</span>);</span><br></pre></td></tr></table></figure>\r\n<p>上述代码在<code>&lt;body&gt;</code>元素中添加了一个SVG元素，并设置宽度为500像素、高度为300像素。</p>\r\n<p><code>.append('g')</code>方法用于在已经存在的SVG元素中添加一个G元素。G元素是SVG中的分组元素，可以用于组织和管理其他SVG元素。你可以将G元素看作是一个容器，可以在其中放置其他SVG元素，然后对整个组进行变换、样式设置等操作。例如：</p>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javascript复制<span class=\"keyword\">const</span> svg = d3.<span class=\"title function_\">select</span>(<span class=\"string\">&#x27;body&#x27;</span>).<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;svg&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"number\">500</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"number\">300</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> g = svg.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;g&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;transform&#x27;</span>, <span class=\"string\">&#x27;translate(50, 50)&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">g.<span class=\"title function_\">append</span>(<span class=\"string\">&#x27;rect&#x27;</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;width&#x27;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;height&#x27;</span>, <span class=\"number\">50</span>)</span><br><span class=\"line\">  .<span class=\"title function_\">attr</span>(<span class=\"string\">&#x27;fill&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>);</span><br></pre></td></tr></table></figure>\r\n<p>上述代码先在<code>&lt;body&gt;</code>元素中添加了一个SVG元素，然后在SVG元素中添加了一个G元素，设置了G元素的平移变换，最后在G元素中添加了一个矩形元素。</p>\r\n<p>希望解答了你的问题。如果还有其他疑问，请随时提出。</p>\r\n<h5 id=\"d3.behavior.drag\">d3.behavior.drag()</h5>\r\n<ol type=\"1\">\r\n<li><code>dragstart</code>：当拖拽开始时触发。在这个回调函数中，首先判断拖拽的目标节点<code>d</code>是否为根节点<code>this.root</code>。如果是根节点，则直接返回，不执行后续的拖拽操作。否则，将<code>this.dragStarted</code>标志设置为<code>true</code>，并获取该节点的所有子节点。最后，通过<code>d3.event.sourceEvent.stopPropagation()</code>阻止事件继续传播。</li>\r\n<li><code>drag</code>：当拖拽过程中持续触发。在这个回调函数中，首先判断拖拽的目标节点<code>d</code>是否为根节点<code>this.root</code>。如果是根节点，则直接返回，不执行后续的拖拽操作。接下来，如果<code>this.dragStarted</code>为<code>true</code>，则调用<code>initiateDrag()</code>方法来初始化拖拽操作。然后，获取鼠标事件相对于SVG容器的坐标，并根据坐标来判断是否需要进行平移操作。最后，更新目标节点的位置，并调用<code>updateTempConnector()</code>方法更新临时连接器。</li>\r\n<li><code>dragend</code>：当拖拽结束时触发。在这个回调函数中，首先判断拖拽的目标节点<code>d</code>是否为根节点<code>this.root</code>，如果是根节点，则直接返回。接下来，将<code>this.domNode</code>设置为当前节点，并判断是否有选中的节点<code>this.selectedNode</code>。如果有选中的节点，则将被拖拽的节点<code>this.draggingNode</code>从其父节点中移除，并将其添加到选中的节点的子节点或子节点集合中，然后展开选中的节点，对树进行排序，并结束拖拽操作。如果没有选中的节点，则直接结束拖拽操作。</li>\r\n</ol>\r\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> dragListener = d3.<span class=\"property\">behavior</span>.<span class=\"title function_\">drag</span>()</span><br><span class=\"line\">          .<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dragstart&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">dragStarted</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">nodes</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tree</span>.<span class=\"title function_\">nodes</span>(d);</span><br><span class=\"line\">            d3.<span class=\"property\">event</span>.<span class=\"property\">sourceEvent</span>.<span class=\"title function_\">stopPropagation</span>();</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;drag&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">dragStarted</span>) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">let</span> domNode = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">initiateDrag</span>(d, domNode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//获取mouseEvent相对于SVG容器的同弦以允许摇摄</span></span><br><span class=\"line\">            <span class=\"keyword\">let</span> relCoords = d3.<span class=\"title function_\">mouse</span>($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">get</span>(<span class=\"number\">0</span>));</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">0</span>] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)&#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;left&#x27;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">0</span>] &gt; ($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">width</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;right&#x27;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">1</span>] &lt; <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;up&#x27;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (relCoords[<span class=\"number\">1</span>] &gt; ($(<span class=\"string\">&#x27;svg&#x27;</span>).<span class=\"title function_\">height</span>() - <span class=\"variable language_\">this</span>.<span class=\"property\">panBoundary</span>)) &#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span> = <span class=\"literal\">true</span>;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">pan</span>(<span class=\"variable language_\">this</span>, <span class=\"string\">&#x27;down&#x27;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">              <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"built_in\">clearTimeout</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">panTimer</span>);</span><br><span class=\"line\">              &#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            d.<span class=\"property\">x0</span> += d3.<span class=\"property\">event</span>.<span class=\"property\">dy</span>;</span><br><span class=\"line\">            d.<span class=\"property\">y0</span> += d3.<span class=\"property\">event</span>.<span class=\"property\">dx</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> node = d3.<span class=\"title function_\">select</span>(<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">            node.<span class=\"title function_\">attr</span>(<span class=\"string\">&quot;transform&quot;</span>, <span class=\"string\">&quot;translate(&quot;</span> + d.<span class=\"property\">y0</span> + <span class=\"string\">&quot;,&quot;</span> + d.<span class=\"property\">x0</span> + <span class=\"string\">&quot;)&quot;</span>);</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"title function_\">updateTempConnector</span>();</span><br><span class=\"line\">          &#125;).<span class=\"title function_\">on</span>(<span class=\"string\">&quot;dragend&quot;</span>, <span class=\"function\">(<span class=\"params\">d</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (d === <span class=\"variable language_\">this</span>.<span class=\"property\">root</span>) &#123;<span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">            <span class=\"variable language_\">this</span>.<span class=\"property\">domNode</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>)&#123;</span><br><span class=\"line\">              <span class=\"keyword\">var</span> index = <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">parent</span>.<span class=\"property\">children</span>.<span class=\"title function_\">indexOf</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>);</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (index &gt; -<span class=\"number\">1</span> )&#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>.<span class=\"property\">parent</span>.<span class=\"property\">children</span>.<span class=\"title function_\">splice</span>(index, <span class=\"number\">1</span>);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span> !== <span class=\"string\">&quot;undefined&quot;</span> || <span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span> !== <span class=\"string\">&#x27;undefined&#x27;</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span> !== <span class=\"string\">&quot;undefined&quot;</span>) &#123;</span><br><span class=\"line\">                  <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">_children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span> = []</span><br><span class=\"line\">                <span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">draggingNode</span>)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"comment\">//确保要添加到的节点已展开，以便用户可以看到添加的节点已正确移动</span></span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">expand</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">selectedNode</span>);</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">sortTree</span>();</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">endDrag</span>();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">              <span class=\"variable language_\">this</span>.<span class=\"title function_\">endDrag</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br></pre></td></tr></table></figure>\r\n<h2 id=\"end-完整代码\">End 完整代码</h2>\r\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">  &lt;div block :scroll=&quot;true&quot;&gt;</span><br><span class=\"line\">    &lt;div style=&quot;background-color: white;border: 3px black;&quot;&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--    指标下钻--&gt;</span><br><span class=\"line\">  &lt;div id=&quot;screenshot&quot; style=&quot;width:100%;height:90%&quot;&gt;</span><br><span class=\"line\">    &lt;div id=&quot;tree-container&quot; style=&quot;width:100%;height:95%;&quot;&gt;&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import * as d3 from &#x27;d3&#x27;;</span><br><span class=\"line\">import $ from &#x27;jquery&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">  data()&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">      treeData:&#123;</span><br><span class=\"line\">        name: &#x27;收入&#x27;,</span><br><span class=\"line\">        value:100,</span><br><span class=\"line\">        analysisContent:&quot;demo&quot;,</span><br><span class=\"line\">        children: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;电费收入&#x27;,</span><br><span class=\"line\">            value: 10,</span><br><span class=\"line\">            analysisContent:&quot;demo&quot;,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;供热收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            analysisContent:&quot;demo&quot;,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          ,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;副产品收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            analysisContent:&quot;demo&quot;,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            name: &#x27;其他收入&#x27;,</span><br><span class=\"line\">            value: 8,</span><br><span class=\"line\">            analysisContent:&quot;demo&quot;,</span><br><span class=\"line\">            children: []</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      //视图大小</span><br><span class=\"line\">      viewerWidth:null,</span><br><span class=\"line\">      viewerHeight:null,</span><br><span class=\"line\">      minHeight:null,</span><br><span class=\"line\">      //层数 判断是否多层，默认显示2层</span><br><span class=\"line\">      depths:[],</span><br><span class=\"line\">      //对角线投影，供稍后的节点路径使用</span><br><span class=\"line\">      diagonal:null,</span><br><span class=\"line\">      //树布局</span><br><span class=\"line\">      tree:null,</span><br><span class=\"line\">      //总节点数</span><br><span class=\"line\">      totalNodes:null,</span><br><span class=\"line\">      //文字最大长度</span><br><span class=\"line\">      maxLabelLength:null,</span><br><span class=\"line\">      zoomListener:null,</span><br><span class=\"line\">      //dragListener  dragstart</span><br><span class=\"line\">      root:null,</span><br><span class=\"line\">      dragStarted:null,</span><br><span class=\"line\">      nodes:null,</span><br><span class=\"line\">      //dragListener  drag</span><br><span class=\"line\">      panTimer:null,</span><br><span class=\"line\">      //initiateDrag  用于拖放的变量</span><br><span class=\"line\">      draggingNode:null,</span><br><span class=\"line\">      selectedNode:null,</span><br><span class=\"line\">      // panning variables  平移变量</span><br><span class=\"line\">      panSpeed: 200,</span><br><span class=\"line\">      panBoundary: 20, // 拖动时，距离边缘 20px 以内将平移。</span><br><span class=\"line\">      // Misc. variables 其他变量</span><br><span class=\"line\">      i:0,</span><br><span class=\"line\">      domNode:null,</span><br><span class=\"line\"></span><br><span class=\"line\">      //centerNode</span><br><span class=\"line\">      duration:750,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  mounted() &#123;</span><br><span class=\"line\">    this.drawTree();</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\">    drawTree() &#123;</span><br><span class=\"line\">      //show D3 tree</span><br><span class=\"line\">      this.depths = this.treeDepths(this.treeData);</span><br><span class=\"line\">      console.log(this.depths)</span><br><span class=\"line\">      //建立树布局</span><br><span class=\"line\">      this.minHeight = 500;</span><br><span class=\"line\">      this.viewerWidth = $(&quot;#screenshot&quot;).width();</span><br><span class=\"line\">      this.viewerHeight = $(&quot;#screenshot&quot;).height();</span><br><span class=\"line\">      console.log(this.viewerHeight)</span><br><span class=\"line\">      if (this.viewerHeight &lt; this.minHeight)</span><br><span class=\"line\">        this.viewerHeight = this.minHeight</span><br><span class=\"line\">      this.viewerHeight=500</span><br><span class=\"line\"></span><br><span class=\"line\">      this.tree = d3.layout.tree()</span><br><span class=\"line\">          .size([this.viewerHeight, this.viewerWidth]);</span><br><span class=\"line\">      //定义一个d3对角线投影，供稍后的节点路径使用</span><br><span class=\"line\">      this.diagonal = d3.svg.diagonal()</span><br><span class=\"line\">          .projection(d =&gt; &#123;</span><br><span class=\"line\">            return [d.y, d.x];</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      //call visit to maxLabelLength</span><br><span class=\"line\">      this.visit(this.treeData, (d) =&gt; &#123;</span><br><span class=\"line\">        this.totalNodes++;</span><br><span class=\"line\">        if (d.name) &#123;</span><br><span class=\"line\">          this.maxLabelLength = Math.max(d.name.length, this.maxLabelLength);</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">          this.maxLabelLength = Math.max(0, this.maxLabelLength);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;, (d) =&gt; &#123;</span><br><span class=\"line\">        return d.children &amp;&amp; d.children.length &gt; 0 ? d.children : null;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      console.log(&quot;总节点&quot;,this.totalNodes)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      //排序树最初是为了防止json没有按排序顺序排列</span><br><span class=\"line\">      this.sortTree()</span><br><span class=\"line\">      //定义 zoomListener，该 zoomListener 在 scaleExtents 中约束的“zoom”事件上调用缩放</span><br><span class=\"line\">      this.zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on(&quot;zoom&quot;, () =&gt; &#123;</span><br><span class=\"line\">        this.zoom()</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      //创建视图</span><br><span class=\"line\">      const baseSvg = d3.select(&quot;#tree-container&quot;)</span><br><span class=\"line\">          .append(&#x27;svg&#x27;)</span><br><span class=\"line\">          .attr(&#x27;width&#x27;, this.viewerWidth)</span><br><span class=\"line\">          .attr(&#x27;height&#x27;, this.viewerHeight)</span><br><span class=\"line\">          .attr(&quot;class&quot;,&quot;overlay&quot;)</span><br><span class=\"line\">          .append(&quot;g&quot;)</span><br><span class=\"line\">          .call(this.zoomListener)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      let dragListener = d3.behavior.drag()</span><br><span class=\"line\">          .on(&quot;dragstart&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            if (d === this.root) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            this.dragStarted = true;</span><br><span class=\"line\">            this.nodes = this.tree.nodes(d);</span><br><span class=\"line\">            d3.event.sourceEvent.stopPropagation();</span><br><span class=\"line\">          &#125;).on(&quot;drag&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            if (d === this.root) &#123;</span><br><span class=\"line\">              return;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (this.dragStarted) &#123;</span><br><span class=\"line\">              let domNode = this;</span><br><span class=\"line\">              this.initiateDrag(d, domNode);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            //获取mouseEvent相对于SVG容器的同弦以允许摇摄</span><br><span class=\"line\">            let relCoords = d3.mouse($(&#x27;svg&#x27;).get(0));</span><br><span class=\"line\">            if (relCoords[0] &lt; this.panBoundary)&#123;</span><br><span class=\"line\">              this.panTimer = true;</span><br><span class=\"line\">              this.pan(this, &#x27;left&#x27;);</span><br><span class=\"line\">            &#125;else if (relCoords[0] &gt; ($(&#x27;svg&#x27;).width() - this.panBoundary)) &#123;</span><br><span class=\"line\">              this.panTimer = true;</span><br><span class=\"line\">              this.pan(this, &#x27;right&#x27;);</span><br><span class=\"line\">            &#125;else if (relCoords[1] &lt; this.panBoundary) &#123;</span><br><span class=\"line\">              this.panTimer = true;</span><br><span class=\"line\">              this.pan(this, &#x27;up&#x27;);</span><br><span class=\"line\">            &#125;else if (relCoords[1] &gt; ($(&#x27;svg&#x27;).height() - this.panBoundary)) &#123;</span><br><span class=\"line\">              this.panTimer = true;</span><br><span class=\"line\">              this.pan(this, &#x27;down&#x27;);</span><br><span class=\"line\">            &#125;else &#123;</span><br><span class=\"line\">              try &#123;</span><br><span class=\"line\">                clearTimeout(this.panTimer);</span><br><span class=\"line\">              &#125; catch (e) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            d.x0 += d3.event.dy;</span><br><span class=\"line\">            d.y0 += d3.event.dx;</span><br><span class=\"line\">            var node = d3.select(this);</span><br><span class=\"line\">            node.attr(&quot;transform&quot;, &quot;translate(&quot; + d.y0 + &quot;,&quot; + d.x0 + &quot;)&quot;);</span><br><span class=\"line\">            //更新临时连接器</span><br><span class=\"line\">            this.updateTempConnector();</span><br><span class=\"line\">          &#125;).on(&quot;dragend&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            if (d === this.root) &#123;return;&#125;</span><br><span class=\"line\">            this.domNode = this;</span><br><span class=\"line\">            if (this.selectedNode)&#123;</span><br><span class=\"line\">              var index = this.draggingNode.parent.children.indexOf(this.draggingNode);</span><br><span class=\"line\">              if (index &gt; -1 )&#123;</span><br><span class=\"line\">                this.draggingNode.parent.children.splice(index, 1);</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              if (typeof this.selectedNode.children !== &quot;undefined&quot; || typeof this.selectedNode._children !== &#x27;undefined&#x27;)&#123;</span><br><span class=\"line\">                if (typeof this.selectedNode._children !== &quot;undefined&quot;) &#123;</span><br><span class=\"line\">                  this.selectedNode.children.push(this.draggingNode)</span><br><span class=\"line\">                &#125;else &#123;</span><br><span class=\"line\">                  this.selectedNode._children.push(this.draggingNode)</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">              &#125;else &#123;</span><br><span class=\"line\">                this.selectedNode.children = []</span><br><span class=\"line\">                this.selectedNode.children.push(this.draggingNode)</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              //确保要添加到的节点已展开，以便用户可以看到添加的节点已正确移动</span><br><span class=\"line\">              this.expand(this.selectedNode);</span><br><span class=\"line\">              this.sortTree();</span><br><span class=\"line\">              this.endDrag();</span><br><span class=\"line\">            &#125;else&#123;</span><br><span class=\"line\">              this.endDrag();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      //附加一个包含所有节点的组，缩放侦听器可以对其进行操作。</span><br><span class=\"line\">      this.svgGroup = baseSvg.append(&quot;g&quot;);</span><br><span class=\"line\">      //移除双击</span><br><span class=\"line\">      d3.select(&quot;svg&quot;).on(&quot;dblclick.zoom&quot;, null);</span><br><span class=\"line\">      this.root = this.treeData;</span><br><span class=\"line\">      this.root.x0 = this.viewerHeight/2;</span><br><span class=\"line\">      this.root.y0 = 0;</span><br><span class=\"line\">      //最初布局树并以根节点为中心。</span><br><span class=\"line\">      //添加提示框 div</span><br><span class=\"line\">      this.tooltip = d3.select(&quot;#tree-container&quot;).append(&quot;div&quot;)</span><br><span class=\"line\">          .attr(&quot;class&quot;, &quot;tooltip&quot;)</span><br><span class=\"line\">          .style(&quot;opacity&quot;, &quot;1.0&quot;)</span><br><span class=\"line\">          .style(&quot;display&quot;,&quot;none&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      this.root.children.forEach(this.collapse);</span><br><span class=\"line\">      this.update(this.root);</span><br><span class=\"line\">      this.centerNode(this.root);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //判断是否多层</span><br><span class=\"line\">    treeDepths(g) &#123;</span><br><span class=\"line\">      var depths = [];</span><br><span class=\"line\">      if (g.children)</span><br><span class=\"line\">        g.children.forEach((v) =&gt; &#123;</span><br><span class=\"line\">          this.dfs(v, 1, depths);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      return depths;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //嵌套循环</span><br><span class=\"line\">    dfs(v, depth, depths) &#123;</span><br><span class=\"line\">      var children = v.children;</span><br><span class=\"line\">      if (children &amp;&amp; children.length &gt; 0) &#123;</span><br><span class=\"line\">        children.forEach((child) =&gt; &#123;</span><br><span class=\"line\">          this.dfs(child, depth + 1, depths);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125; else &#123;</span><br><span class=\"line\">        depths.push(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //递归 通过遍历所有节点  执行某些设置</span><br><span class=\"line\">    visit(parent, visitFn, childrenFn) &#123;</span><br><span class=\"line\">      if (!parent) return;</span><br><span class=\"line\">      visitFn(parent);</span><br><span class=\"line\">      var children = childrenFn(parent);</span><br><span class=\"line\">      if (children) &#123;</span><br><span class=\"line\">        var count = children.length;</span><br><span class=\"line\">        for (var i = 0; i &lt; count; i++) &#123;</span><br><span class=\"line\">          this.visit(children[i], visitFn, childrenFn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //排序</span><br><span class=\"line\">    sortTree() &#123;</span><br><span class=\"line\">      console.log(&quot;==排序开始==&quot;)</span><br><span class=\"line\">      this.tree.sort((a, b) =&gt; &#123;</span><br><span class=\"line\">        return b.name ? b.name.toLowerCase() : b.name &lt; a.name ? a.name.toLowerCase() : a.name ? 1 : -1;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    zoom() &#123;</span><br><span class=\"line\">      this.svgGroup.attr(&quot;transform&quot;, &quot;translate(&quot; + d3.event.translate + &quot;)scale(&quot; + d3.event.scale + &quot;)&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //拖拽开始时对节点进行一系列操作，以确保拖拽过程中节点的正确显示和相关连线的调整。</span><br><span class=\"line\">    initiateDrag(d, domNode) &#123;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      将当前被拖拽的节点保存在this.draggingNode属性中，</span><br><span class=\"line\">      以便在拖拽过程中能够对其进行操作</span><br><span class=\"line\">       */</span><br><span class=\"line\">      this.draggingNode = d;</span><br><span class=\"line\">      /*</span><br><span class=\"line\">      1=</span><br><span class=\"line\">      为了将被拖拽节点的.ghostCircle元素的</span><br><span class=\"line\">      pointer-events属性设置为none，</span><br><span class=\"line\">      以避免拖拽节点时干扰到其他元素</span><br><span class=\"line\">      2=</span><br><span class=\"line\">      为了将所有.ghostCircle元素的类设置为ghostCircle show，</span><br><span class=\"line\">      这可能是用于显示拖拽节点周围的虚拟元素</span><br><span class=\"line\">      3=为了为被拖拽的节点设置类名，可能是用于在拖拽过程中应用特定的样式</span><br><span class=\"line\">       */</span><br><span class=\"line\">      d3.select(domNode).select(&#x27;.ghostCircle&#x27;).attr(&#x27;pointer-events&#x27;, &#x27;none&#x27;);</span><br><span class=\"line\">      d3.selectAll(&#x27;.ghostCircle&#x27;).attr(&#x27;class&#x27;, &#x27;ghostCircle show&#x27;);</span><br><span class=\"line\">      d3.select(domNode).attr(&#x27;class&#x27;, &#x27;node activeDrag&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      /*</span><br><span class=\"line\">      重新排序所有节点，将被拖拽的节点置于最前面，</span><br><span class=\"line\">      以确保它能够在拖拽过程中正确显示在其他节点之上</span><br><span class=\"line\">      选择父项并对路径的</span><br><span class=\"line\">      a 不是悬停元素，将“a”发送到后面</span><br><span class=\"line\">      a 是悬停元素，将“a”放在前面</span><br><span class=\"line\">       */</span><br><span class=\"line\">      this.svgGroup.selectAll(&quot;g.node&quot;).sort((a, b) =&gt; &#123; // select the parent and sort the path&#x27;s</span><br><span class=\"line\">        if (a.id !== this.draggingNode.id) return 1; // a is not the hovered element, send &quot;a&quot; to the back</span><br><span class=\"line\">        else return -1; // a is the hovered element, bring &quot;a&quot; to the front</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      // 如果节点有子节点，请删除链接和节点</span><br><span class=\"line\">      if (this.nodes.length &gt; 1) &#123;</span><br><span class=\"line\">        // remove link paths 删除链接路径</span><br><span class=\"line\">        let links = this.tree.links(this.nodes);</span><br><span class=\"line\">        let nodePaths = this.svgGroup.selectAll(&quot;path.link&quot;)</span><br><span class=\"line\">            .data(links, (d) =&gt; &#123;</span><br><span class=\"line\">              return d.target.id;</span><br><span class=\"line\">            &#125;).remove();</span><br><span class=\"line\">        // remove child nodes 删除子节点</span><br><span class=\"line\">        let nodesExit = this.svgGroup.selectAll(&quot;g.node&quot;)</span><br><span class=\"line\">            .data(this.nodes, (d) =&gt; &#123;</span><br><span class=\"line\">              return d.id;</span><br><span class=\"line\">            &#125;).filter((d, i) =&gt; &#123;</span><br><span class=\"line\">              if (d.id === this.draggingNode.id) &#123;</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              return true;</span><br><span class=\"line\">            &#125;).remove();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      // remove parent link</span><br><span class=\"line\">      let parentLink = this.tree.links(this.tree.nodes(this.draggingNode.parent));</span><br><span class=\"line\">      this.svgGroup.selectAll(&#x27;path.link&#x27;).filter((d, i) =&gt; &#123;</span><br><span class=\"line\">        if (d.target.id === this.draggingNode.id) &#123;</span><br><span class=\"line\">          return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;).remove();</span><br><span class=\"line\"></span><br><span class=\"line\">      this.dragStarted = null;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pan(domNode, direction)&#123;</span><br><span class=\"line\">      let speed = this.panSpeed,translateX,translateY;</span><br><span class=\"line\">      if (this.panTimer)&#123;</span><br><span class=\"line\">        clearTimeout(this.panTimer);</span><br><span class=\"line\">        let translateCoords = d3.transform(this.svgGroup.attr(&quot;transform&quot;));</span><br><span class=\"line\">        if (direction === &#x27;left&#x27; || direction === &#x27;right&#x27;) &#123;</span><br><span class=\"line\">          translateX = direction === &#x27;left&#x27; ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;</span><br><span class=\"line\">          translateY = translateCoords.translate[1];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        else if (direction === &#x27;up&#x27; || direction === &#x27;down&#x27;) &#123;</span><br><span class=\"line\">          translateX = translateCoords.translate[0];</span><br><span class=\"line\">          translateY = direction === &#x27;up&#x27; ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        let scaleX = translateCoords.scale[0];</span><br><span class=\"line\">        let scaleY = translateCoords.scale[1];</span><br><span class=\"line\">        let scale = this.zoomListener.scale();</span><br><span class=\"line\">        this.svgGroup.transition().attr(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)scale(&quot; + scale + &quot;)&quot;);</span><br><span class=\"line\">        d3.select(domNode).select(&#x27;g.node&#x27;).attr(&quot;transform&quot;, &quot;translate(&quot; + translateX + &quot;,&quot; + translateY + &quot;)&quot;);</span><br><span class=\"line\">        this.zoomListener.scale(this.zoomListener.scale());</span><br><span class=\"line\">        this.zoomListener.translate([translateX, translateY]);</span><br><span class=\"line\">        this.panTimer = setTimeout(()=&gt;&#123;</span><br><span class=\"line\">          this.pan(domNode, direction);</span><br><span class=\"line\">        &#125;,50)</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //to update the temporary connector indicating dragging affiliation</span><br><span class=\"line\">    //更新指示拖动隶属关系的临时连接器</span><br><span class=\"line\">    updateTempConnector() &#123;</span><br><span class=\"line\">      var data = [];</span><br><span class=\"line\">      if (this.draggingNode !== null &amp;&amp; this.selectedNode !== null) &#123;</span><br><span class=\"line\">        // have to flip the source coordinates since we did this for the existing connectors on the original tree</span><br><span class=\"line\">        data = [&#123;</span><br><span class=\"line\">          source: &#123;</span><br><span class=\"line\">            x: this.selectedNode.y0,</span><br><span class=\"line\">            y: this.selectedNode.x0</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          target: &#123;</span><br><span class=\"line\">            x: this.draggingNode.y0,</span><br><span class=\"line\">            y: this.draggingNode.x0</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      let link = this.svgGroup.selectAll(&quot;.templink&quot;).data(data);</span><br><span class=\"line\"></span><br><span class=\"line\">      link.enter().append(&quot;path&quot;)</span><br><span class=\"line\">          .attr(&quot;class&quot;, &quot;templink&quot;)</span><br><span class=\"line\">          .attr(&quot;d&quot;, d3.svg.diagonal())</span><br><span class=\"line\">          .attr(&#x27;pointer-events&#x27;, &#x27;none&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      link.attr(&quot;d&quot;, d3.svg.diagonal());</span><br><span class=\"line\"></span><br><span class=\"line\">      link.exit().remove();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //展开节点</span><br><span class=\"line\">    expand(d)&#123;</span><br><span class=\"line\">      if (d._children)&#123;</span><br><span class=\"line\">        d.children = d._children;</span><br><span class=\"line\">        d.children.forEach(this.expand)</span><br><span class=\"line\">        d._children = null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    //在拖拽操作结束后，重置节点和虚拟节点的样式和属性，以确保它们恢复到正常状态并且不再响应鼠标事件。</span><br><span class=\"line\">    endDrag()&#123;</span><br><span class=\"line\">      this.selectedNode = null;</span><br><span class=\"line\">      d3.selectAll(&#x27;.ghostCircle&#x27;).attr(&#x27;class&#x27;,&#x27;ghostCircle&#x27;);</span><br><span class=\"line\">      d3.select(this.domNode).attr(&#x27;class&#x27;, &#x27;node&#x27;);</span><br><span class=\"line\">      //禁用这些元素的鼠标事件，使其在拖拽过程中不再响应鼠标交互</span><br><span class=\"line\">      d3.select(this.domNode).select(&#x27;.ghostCircle&#x27;).attr(&#x27;pointer-events&#x27;, &#x27;none&#x27;);</span><br><span class=\"line\">      this.updateTempConnector()</span><br><span class=\"line\">      if (this.draggingNode !=null )&#123;</span><br><span class=\"line\">        this.update(this.root)</span><br><span class=\"line\">        this.centerNode(this.draggingNode)</span><br><span class=\"line\">        this.draggingNode = null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //节点更新   重点</span><br><span class=\"line\">    update(source)&#123;</span><br><span class=\"line\">      var width = 130,</span><br><span class=\"line\">          height = 70;</span><br><span class=\"line\">      //计算新 树图的布局</span><br><span class=\"line\">      this.nodes = this.tree.nodes(this.root).reverse();</span><br><span class=\"line\">      let links = this.tree.links(this.nodes)</span><br><span class=\"line\">      //设置y坐标点  每层占  200px；</span><br><span class=\"line\">      this.nodes.forEach(d=&gt;&#123;</span><br><span class=\"line\">        d.y=d.depth * 200</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      //每个node对应一个group</span><br><span class=\"line\">      //data()：绑定一个数组到选择集上，数组的各项值分别与选择集的各元素绑定</span><br><span class=\"line\">      let node = this.svgGroup.selectAll(&quot;g.node&quot;)</span><br><span class=\"line\">          .data(this.nodes, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.id || (d.id = ++ this.i)</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">      //新增节点数据集，设置位置</span><br><span class=\"line\">      //在 svg 中添加一个g，g是 svg 中的一个属性，是 group 的意思，</span><br><span class=\"line\">      // 它表示一组什么东西，如一组 lines ， rects ，circles</span><br><span class=\"line\">      // 其实坐标轴就是由这些东西构成的。</span><br><span class=\"line\">      let nodeEnter = node.enter().append(&quot;g&quot;)</span><br><span class=\"line\">          .attr(&quot;class&quot;, &quot;node&quot;) //attr设置html属性，style设置css属性</span><br><span class=\"line\">          .attr(&quot;transform&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;translate(&quot; + source.y0 + &quot;,&quot; + source.x0 + &quot;)&quot;;</span><br><span class=\"line\">          &#125;).on(&quot;dblclick&quot;, (d) =&gt; &#123; this.click(d) &#125;);</span><br><span class=\"line\">      //添加连接点---此处设置的是圆圈过渡时候的效果（颜色）</span><br><span class=\"line\">      nodeEnter.append(&quot;rect&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, -65)</span><br><span class=\"line\">          .attr(&quot;y&quot;,-35)</span><br><span class=\"line\">          .attr(&quot;width&quot;, width)</span><br><span class=\"line\">          .attr(&quot;height&quot;, height)</span><br><span class=\"line\">          .attr(&quot;rx&quot;, 10)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;#FFF&quot;); //d 代表数据，也就是与某元素绑定的数据。</span><br><span class=\"line\"></span><br><span class=\"line\">      //指标名称</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, 0)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, -25)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return d.name;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;gray&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;10px&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      //指标值</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? -15 : -15;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, -5)</span><br><span class=\"line\">          // .attr(&quot;text-anchor&quot;, (d) &#123; return d.children || d._children ? &quot;end&quot; : &quot;start&quot;; &#125;)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return d.value.toLocaleString();</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;blue&quot;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;18px&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">      //指标单位</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? d.value != null ? d.value.toString().length * 6 - 4 : 10 : d.value != null ? d.value.toString().length * 6 - 4 : 10;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, -5)</span><br><span class=\"line\">          // .attr(&quot;text-anchor&quot;, (d) &#123; return d.children || d._children ? &quot;end&quot; : &quot;start&quot;; &#125;)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text(&quot;万元&quot;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;gray&quot;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;10px&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeEnter.append(&quot;line&quot;)</span><br><span class=\"line\">          .attr(&quot;x1&quot;, -width / 2)</span><br><span class=\"line\">          .attr(&quot;y1&quot;, 5)</span><br><span class=\"line\">          .attr(&quot;x2&quot;, width / 2)</span><br><span class=\"line\">          .attr(&quot;y2&quot;, 5)</span><br><span class=\"line\">          .attr(&quot;stroke&quot;,function(d)&#123;</span><br><span class=\"line\">            if(d.value === 0)&#123;</span><br><span class=\"line\">              return &#x27;#6b6b6b&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return &#x27;steelblue&#x27;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? -40 : -40;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 15)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;同比&quot;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;gray&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;10px&quot;);;</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? -58 : -58;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 30)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text(&quot;↑&quot;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;red&quot;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;15px&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // 新增标签标识</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, 50)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 29)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            // return &quot;📌&quot;;📑🔖🔗🎫✎</span><br><span class=\"line\">            // return d.labelId != null ? &quot;📑&quot; : &quot;&quot;;</span><br><span class=\"line\">            return &quot;📌&quot;;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;,&quot;#2f6db3&quot;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;12px&quot;);//75px</span><br><span class=\"line\">      //同比值</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? -40 : -40;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 30)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return d.anValue != null ? Math.abs(d.anValue)+&#x27;%&#x27; : &quot;&quot;;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;black&quot;;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;10px&quot;)</span><br><span class=\"line\">          //-鼠标移入事件</span><br><span class=\"line\">          .on(&quot;mouseover&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">              let xPosition = d3.event.offsetX;</span><br><span class=\"line\">              let yPosition = d3.event.offsetY + 60;</span><br><span class=\"line\">              //添加标签</span><br><span class=\"line\">              this.tooltip.html(d.analysisContent.replace(/\\r/g, &quot;&lt;br&gt;&quot;).replace(/\\r\\n/g, &quot;&lt;br&gt;&quot;))</span><br><span class=\"line\">                  //设置tooltip的位置(left,top 相对于页面的距离)</span><br><span class=\"line\">                  .style(&quot;left&quot;, xPosition + &quot;px&quot;)</span><br><span class=\"line\">                  .style(&quot;top&quot;, yPosition + &quot;px&quot;)</span><br><span class=\"line\">                  .style(&quot;border-radius&quot;, &quot;10px&quot;)</span><br><span class=\"line\">                  .style(&quot;border&quot;, &quot; 1px solid #999&quot;)</span><br><span class=\"line\">                  .style(&quot;padding&quot;, &quot;5px 10px&quot;)</span><br><span class=\"line\">                  .style(&quot;display&quot;, &quot;block&quot;);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          //--鼠标移出事件</span><br><span class=\"line\">          .on(&quot;mouseout&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            this.tooltip.style(&quot;display&quot;, &quot;none&quot;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//计划值名称</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? 10 : 10;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 15)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;计划值&quot;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;gray&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;10px&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      //计划值</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? 10 : 10;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 30)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return d.value;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;blue&quot;)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;12px&quot;);</span><br><span class=\"line\">      //展开趋势图</span><br><span class=\"line\">      nodeEnter.append(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.children || d._children ? 50 : 50;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&quot;dy&quot;, 15)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .text((d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;...&quot;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;gray&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1)</span><br><span class=\"line\">          .style(&quot;font-size&quot;, &quot;28px&quot;)</span><br><span class=\"line\">          .on(&quot;click&quot;, (d, i) =&gt; &#123;</span><br><span class=\"line\">            console.log(&quot;触发点击事件&quot;)</span><br><span class=\"line\">            // this.getChartsData()</span><br><span class=\"line\">            // this.dialogVisible.three = true</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      // Transition nodes to their new position.将节点过渡到一个新的位置-----主要是针对节点过渡过程中的过渡效果</span><br><span class=\"line\">      //node就是保留的数据集，为原来数据的图形添加过渡动画。首先是整个组的位置</span><br><span class=\"line\">      //子节点全出来了</span><br><span class=\"line\">      var nodeUpdate = node.transition() //开始一个动画过度</span><br><span class=\"line\">          .duration(this.duration) //过渡延迟时间 此处主要设置的是圆圈节点随斜线的过渡延迟</span><br><span class=\"line\">          .attr(&quot;transform&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;translate(&quot; + d.y + &quot;,&quot; + d.x + &quot;)&quot;;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeUpdate.select(&quot;rect&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, -65)</span><br><span class=\"line\">          .attr(&quot;y&quot;, -35)</span><br><span class=\"line\">          .attr(&quot;width&quot;, width)</span><br><span class=\"line\">          .attr(&quot;height&quot;, height)</span><br><span class=\"line\">          .attr(&quot;rx&quot;, 10)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;#FFF&quot;)</span><br><span class=\"line\">          .style(&quot;stroke&quot;,function(d)&#123;</span><br><span class=\"line\">            if(d.value === 0)&#123;</span><br><span class=\"line\">              return &#x27;#6b6b6b&#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            return &#x27;steelblue&#x27;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .style(&quot;stroke-width&quot;, &quot;1.5px&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeUpdate.select(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Transition exiting nodes to the parent&#x27;s new position.过渡现有的节点到父母的新位置。</span><br><span class=\"line\">      //最后处理消失的数据，添加消失动画</span><br><span class=\"line\">      var nodeExit = node.exit().transition()</span><br><span class=\"line\">          .duration(this.duration)</span><br><span class=\"line\">          .attr(&quot;transform&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            return &quot;translate(&quot; + source.y + &quot;,&quot; + source.x + &quot;)&quot;;</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .remove();</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeExit.select(&quot;rect&quot;)</span><br><span class=\"line\">          .attr(&quot;x&quot;, -65)</span><br><span class=\"line\">          .attr(&quot;y&quot;, -35)</span><br><span class=\"line\">          .attr(&quot;width&quot;, width)</span><br><span class=\"line\">          .attr(&quot;height&quot;, height)</span><br><span class=\"line\">          .attr(&quot;rx&quot;, 10)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;#FFF&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">      nodeExit.select(&quot;text&quot;)</span><br><span class=\"line\">          .attr(&quot;text-anchor&quot;, &quot;middle&quot;)</span><br><span class=\"line\">          .style(&quot;fill-opacity&quot;, 1e-6);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Update the links…线操作相关</span><br><span class=\"line\">      //再处理连线集合</span><br><span class=\"line\">      let link = this.svgGroup.selectAll(&quot;path.link&quot;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;none&quot;)</span><br><span class=\"line\">          .style(&quot;stroke&quot;, &quot;steelblue&quot;)</span><br><span class=\"line\">          .style(&quot;stroke-width&quot;, &quot;1.5px&quot;)</span><br><span class=\"line\">          .data(links, (d) =&gt; &#123;</span><br><span class=\"line\">            return d.target.id;</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Enter any new links at the parent&#x27;s previous position.</span><br><span class=\"line\">      //添加新的连线</span><br><span class=\"line\"></span><br><span class=\"line\">      link.enter().insert(&quot;path&quot;, &quot;g&quot;)</span><br><span class=\"line\">          .style(&quot;fill&quot;, &quot;none&quot;)</span><br><span class=\"line\">          .style(&quot;stroke&quot;, &quot;steelblue&quot;)</span><br><span class=\"line\">          .style(&quot;stroke-width&quot;, &quot;1.5px&quot;)</span><br><span class=\"line\">          .attr(&quot;class&quot;, &quot;link&quot;)</span><br><span class=\"line\">          .attr(&quot;d&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            var o = &#123;</span><br><span class=\"line\">              x: source.x0,</span><br><span class=\"line\">              y: source.y0</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            return this.diagonal(&#123;</span><br><span class=\"line\">              source: o,</span><br><span class=\"line\">              target: o</span><br><span class=\"line\">            &#125;); //diagonal - 生成一个二维贝塞尔连接器, 用于节点连接图.</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .attr(&#x27;marker-end&#x27;, &#x27;url(#arrow)&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Transition links to their new position.将斜线过渡到新的位置</span><br><span class=\"line\">      //保留的连线添加过渡动画</span><br><span class=\"line\">      link.transition()</span><br><span class=\"line\">          .duration(this.duration)</span><br><span class=\"line\">          .attr(&quot;d&quot;, this.diagonal);</span><br><span class=\"line\"></span><br><span class=\"line\">      // Transition exiting nodes to the parent&#x27;s new position.过渡现有的斜线到父母的新位置。</span><br><span class=\"line\">      //消失的连线添加过渡动画</span><br><span class=\"line\">      link.exit().transition()</span><br><span class=\"line\">          .duration(this.duration)</span><br><span class=\"line\">          .attr(&quot;d&quot;, (d) =&gt; &#123;</span><br><span class=\"line\">            var o = &#123;</span><br><span class=\"line\">              x: source.x,</span><br><span class=\"line\">              y: source.y</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            return this.diagonal(&#123;</span><br><span class=\"line\">              source: o,</span><br><span class=\"line\">              target: o</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          .remove();</span><br><span class=\"line\">      // Stash the old positions for transition.将旧的斜线过渡效果隐藏</span><br><span class=\"line\">      this.nodes.forEach((d) =&gt; &#123;</span><br><span class=\"line\">        d.x0 = d.x;</span><br><span class=\"line\">        d.y0 = d.y;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //收缩节点</span><br><span class=\"line\">    collapse(d)&#123;</span><br><span class=\"line\">      if (d.children)&#123;</span><br><span class=\"line\">        d._children=d.children;</span><br><span class=\"line\">        d.children=null</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //当点击/删除时，中心节点，这样节点在折叠/移动时不会丢失大量的子节点。</span><br><span class=\"line\">    centerNode(source)&#123;</span><br><span class=\"line\">      //scale()方法用于返回当前的缩放比例值  缩放比例值</span><br><span class=\"line\">      let scale = this.zoomListener.scale();</span><br><span class=\"line\">      let x = -source.y0;</span><br><span class=\"line\">      let y = -source.x0;</span><br><span class=\"line\">      x = x* scale +100;</span><br><span class=\"line\">      y = y* scale +this.viewerHeight /2;</span><br><span class=\"line\">      d3.select(&#x27;g&#x27;).transition()</span><br><span class=\"line\">          .duration(this.duration)</span><br><span class=\"line\">          .attr(&quot;transform&quot;, &quot;translate(&quot; + x + &quot;,&quot; + y + &quot;)scale(&quot; + scale + &quot;)&quot;);</span><br><span class=\"line\">      this.zoomListener.scale(scale);</span><br><span class=\"line\">      this.zoomListener.translate([x, y]);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    //点击事件</span><br><span class=\"line\">    click(d)&#123;</span><br><span class=\"line\">      if (d.children)&#123;</span><br><span class=\"line\">        d._children=d.children;</span><br><span class=\"line\">        d.children = null</span><br><span class=\"line\">      &#125;else&#123;</span><br><span class=\"line\">        d.children = d._children</span><br><span class=\"line\">        if (d.children === [] || d.children == null)&#123;</span><br><span class=\"line\">          return;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        d.children.forEach(this.collapse)</span><br><span class=\"line\">        d._children = null;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      let depths = this.treeDepths(this.treeData);</span><br><span class=\"line\">      this.viewerHeight = depths.length * 100;</span><br><span class=\"line\">      if (this.viewerHeight &lt; this.minHeight)</span><br><span class=\"line\">        this.viewerHeight = this.minHeight;</span><br><span class=\"line\">      this.tree = d3.layout.tree()</span><br><span class=\"line\">          .size([this.viewerHeight, this.viewerWidth]);</span><br><span class=\"line\">      this.update(d)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">circle &#123;</span><br><span class=\"line\">  fill: #ccc;</span><br><span class=\"line\">  stroke: #000;</span><br><span class=\"line\">  stroke-width: 1px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">text &#123;</span><br><span class=\"line\">  font-size: 12px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">path.link &#123;</span><br><span class=\"line\">  fill: none;</span><br><span class=\"line\">  stroke: #ccc;</span><br><span class=\"line\">  stroke-width: 1.5px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "前端",
                "D3.js"
            ]
        },
        {
            "id": "http://example.com/2024/07/05/post/springboot/03-Mybatis-Plus%20@SqlParser%E6%B3%A8%E8%A7%A3/",
            "url": "http://example.com/2024/07/05/post/springboot/03-Mybatis-Plus%20@SqlParser%E6%B3%A8%E8%A7%A3/",
            "title": "03-Mybatis-Plus @SqlParser注解",
            "date_published": "2024-07-05T08:33:29.699Z",
            "content_html": "<h1 id=\"mybatis-plus-sqlparser注解\">Mybatis-Plus <span class=\"citation\"\r\ndata-cites=\"SqlParser注解\">@SqlParser注解</span></h1>\r\n<p><span class=\"citation\" data-cites=\"SqlParser\">@SqlParser</span>\r\n注解在<a\r\nhref=\"https://so.csdn.net/so/search?q=多租户&amp;spm=1001.2101.3001.7020\">多租户</a>的模式下，用来过滤的注解，在最新的\r\nMybatis Plus 中这个 <span class=\"citation\"\r\ndata-cites=\"SqlParser1\">@SqlParser1</span> 注解已经过时。</p>\r\n<h4 id=\"那什么是多租户模式\">那什么是多租户模式？</h4>\r\n<p>MyBatis\r\n的多租户模式是指在数据库设计和应用程序开发中，针对需要支持多个独立用户群体（如企业客户A、B、C等，每个都有各自的业务数据）的情况，通过一些特定的技术手段来处理。在这种模式下，我们通常会做以下几个步骤：</p>\r\n<ol type=\"1\">\r\n<li><strong>数据库表设计</strong>：为每个租户创建单独的数据表空间或者隔离区，比如添加一个<code>tenant_id</code>字段用于标识租户。</li>\r\n<li><strong>Mapper配置</strong>：在MyBatis的mapper\r\nXML文件中，通过<code>where</code>条件基于<code>tenant_id</code>动态过滤查询结果，只返回对应租户的数据。</li>\r\n<li><strong>事务管理</strong>：在多租户环境下，可能需要为每个租户维护单独的数据库连接或事务，避免数据交叉污染。</li>\r\n<li><strong>服务层封装</strong>：在业务层，使用工厂模式或者策略模式，为每个租户创建对应的Service实例，调用对应的Mapper。</li>\r\n<li><strong>安全访问控制</strong>：除了数据库层面，还需要在应用层对租户进行权限验证和访问控制。</li>\r\n</ol>\r\n<h4 id=\"替代注解\">替代注解</h4>\r\n<p>当我们的需要过滤多租户，我们就需要用 <span class=\"citation\"\r\ndata-cites=\"InterceptorIgnore\">@InterceptorIgnore</span>(tenantLine =\r\n“1”) 注解来代替。</p>\r\n<p>拦截忽略注解 <span class=\"citation\"\r\ndata-cites=\"InterceptorIgnore\">@InterceptorIgnore</span></p>\r\n<table>\r\n<colgroup>\r\n<col style=\"width: 24%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 9%\" />\r\n<col style=\"width: 56%\" />\r\n</colgroup>\r\n<thead>\r\n<tr>\r\n<th style=\"text-align: center;\">属性名</th>\r\n<th style=\"text-align: center;\">类型</th>\r\n<th style=\"text-align: center;\">默认值</th>\r\n<th style=\"text-align: center;\">描述</th>\r\n</tr>\r\n</thead>\r\n<tbody>\r\n<tr>\r\n<td style=\"text-align: center;\">tenantLine</td>\r\n<td style=\"text-align: center;\">String</td>\r\n<td style=\"text-align: center;\">\"\"</td>\r\n<td style=\"text-align: center;\">行级租户</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">dynamicTableName</td>\r\n<td style=\"text-align: center;\">String</td>\r\n<td style=\"text-align: center;\">\"\"</td>\r\n<td style=\"text-align: center;\">动态表名</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">blockAttack</td>\r\n<td style=\"text-align: center;\">String</td>\r\n<td style=\"text-align: center;\">\"\"</td>\r\n<td\r\nstyle=\"text-align: center;\">攻击SQL阻断解析器，防止全表更新与删除</td>\r\n</tr>\r\n<tr>\r\n<td style=\"text-align: center;\">iillegeSql</td>\r\n<td style=\"text-align: center;\">String</td>\r\n<td style=\"text-align: center;\">\"\"</td>\r\n<td style=\"text-align: center;\">垃圾SQL拦截</td>\r\n</tr>\r\n</tbody>\r\n</table>\r\n<p>该注解作用于 xxMapper.java 方法之上 各属性代表对应的插件\r\n各属性不给值则默认为 false 设置为 true 忽略拦截 更多说明详见源码注释</p>\r\n<p><span class=\"citation\"\r\ndata-cites=\"SqlParser\">@SqlParser</span>(filter = true) 与 <span\r\nclass=\"citation\"\r\ndata-cites=\"InterceptorIgnore\">@InterceptorIgnore</span>(tenantLine =\r\n“1”) 等价</p>\r\n",
            "tags": [
                "后端",
                "Mybatis-Plus"
            ]
        },
        {
            "id": "http://example.com/2024/07/05/post/springboot/02-String%E3%80%81Date%E3%80%81LocalDate%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "url": "http://example.com/2024/07/05/post/springboot/02-String%E3%80%81Date%E3%80%81LocalDate%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2/",
            "title": "02-String、Date、LocalDate之间的转换",
            "date_published": "2024-07-05T07:17:27.134Z",
            "content_html": "<h1\r\nid=\"stringdatelocaldate之间的转换\">String、Date、LocalDate之间的转换</h1>\r\n<h3 id=\"一date和string\">一、Date和String</h3>\r\n<blockquote>\r\n<p>使用SimpleDateFormat对象指定目标日期格式</p>\r\n</blockquote>\r\n<h4 id=\"date转string\">1、Date转String</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//主要根据&quot;yyyy-MM-dd HH:mm:ss&quot;进行格式的变换</span></span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\">\t<span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">\tSystem.out.println(formatter.format(date));</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"string转date\">2、String转Date</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-05-31 22:41:21&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">SimpleDateFormat</span> <span class=\"variable\">formatter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">    System.out.println(formatter.parse(date));</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"二date和localdate\">二、Date和LocalDate</h3>\r\n<blockquote>\r\n<p>转变为中间对象Instant，都需要用到ZoneId时区</p>\r\n</blockquote>\r\n<h4 id=\"date转localdate\">1、Date转LocalDate</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;====LocalDate====&quot;</span></span><br><span class=\"line\"><span class=\"type\">Date</span> <span class=\"variable\">date</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>();</span><br><span class=\"line\"><span class=\"type\">LocalDate</span> <span class=\"variable\">localDate</span> <span class=\"operator\">=</span> date.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();</span><br><span class=\"line\">System.out.println(localDate);</span><br><span class=\"line\"><span class=\"string\">&quot;====LocalDateTime====&quot;</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">localDateTime</span> <span class=\"operator\">=</span> date.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();</span><br><span class=\"line\">System.out.println(localDateTime);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\r\n<h4 id=\"localdate转date\">2、LocalDate转Date</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ZoneId</span> <span class=\"variable\">zone</span> <span class=\"operator\">=</span> ZoneId.systemDefault();</span><br><span class=\"line\"><span class=\"string\">&quot;====LocalDate====&quot;</span></span><br><span class=\"line\">    <span class=\"type\">LocalDate</span> <span class=\"variable\">localDate</span> <span class=\"operator\">=</span> LocalDate.of(<span class=\"number\">2023</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>);</span><br><span class=\"line\">    <span class=\"type\">Instant</span> <span class=\"variable\">instant</span> <span class=\"operator\">=</span> localDate.atStartOfDay().atZone(zone).toInstant();</span><br><span class=\"line\">    Sy stem.out.println(Date.from(instant));</span><br><span class=\"line\"></span><br><span class=\"line\"> \t<span class=\"type\">LocalDate</span> <span class=\"variable\">date2</span> <span class=\"operator\">=</span> LocalDate.parse(<span class=\"string\">&quot;2023-05-13&quot;</span>, DateTimeFormatter.ISO_LOCAL_DATE);</span><br><span class=\"line\">    <span class=\"type\">Instant</span> <span class=\"variable\">instant2</span> <span class=\"operator\">=</span> date2.atStartOfDay().atZone(zone).toInstant();</span><br><span class=\"line\">    System.out.println(Date.from(instant2));</span><br><span class=\"line\"><span class=\"string\">&quot;====LocalDateTime====&quot;</span></span><br><span class=\"line\">    <span class=\"type\">LocalDateTime</span> <span class=\"variable\">localDateTime2</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2023</span>, <span class=\"number\">5</span>, <span class=\"number\">31</span>, <span class=\"number\">23</span>, <span class=\"number\">13</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"type\">Instant</span> <span class=\"variable\">instant3</span> <span class=\"operator\">=</span> localDateTime2.atZone(zone).toInstant();</span><br><span class=\"line\">    System.out.println(Date.from(instant3));</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"三localdate和string\">三、LocalDate和String</h3>\r\n<blockquote>\r\n<p>使用DateTimeFormatter指定目标日期格式</p>\r\n</blockquote>\r\n<h4 id=\"localdate转string\">1、LocalDate转String</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;====LocalDate====&quot;</span></span><br><span class=\"line\">\t<span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">\t<span class=\"type\">LocalDate</span> <span class=\"variable\">localDate</span> <span class=\"operator\">=</span> LocalDate.of(<span class=\"string\">&quot;2020-2-5&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//LocalDate localDate = LocalDate.of(2020, 2, 5);</span></span><br><span class=\"line\">    System.out.println(localDate.format(df));</span><br><span class=\"line\"><span class=\"string\">&quot;====LocalDateTime====&quot;</span></span><br><span class=\"line\">    <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df3</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(YYYY_MM_DD_HH_MM_SS_12);</span><br><span class=\"line\">\t<span class=\"comment\">//DateTimeFormatter df3 = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd HH:mm:ss&quot;);</span></span><br><span class=\"line\">    <span class=\"type\">LocalDateTime</span> <span class=\"variable\">localDateTime</span> <span class=\"operator\">=</span> LocalDateTime.of(<span class=\"number\">2020</span>, <span class=\"number\">2</span>, <span class=\"number\">5</span>, <span class=\"number\">14</span>, <span class=\"number\">30</span>);</span><br><span class=\"line\">    System.out.println(df3.format(localDateTime));</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"string转localdate\">2、String转LocalDate</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;====LocalDate====&quot;</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">dateStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-05-31&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class=\"line\">    System.out.println(LocalDate.parse(dateStr, df));</span><br><span class=\"line\"><span class=\"string\">&quot;====LocalDateTime====&quot;</span></span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">timeStr</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;2023-05-31 16:41:21&quot;</span>;</span><br><span class=\"line\">    <span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df3</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\">    System.out.println(LocalDateTime.parse(timeStr, df3));</span><br></pre></td></tr></table></figure>\r\n<h3 id=\"四localdate日期判断\">四、LocalDate日期判断</h3>\r\n<p>例子：</p>\r\n<h4 id=\"判断月份与时间\">1、判断月份与时间</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">DateTimeFormatter</span> <span class=\"variable\">df</span> <span class=\"operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">time</span> <span class=\"operator\">=</span> LocalDateTime.parse(TimeStr,df);</span><br><span class=\"line\"><span class=\"comment\">//判断是这个月的最后一天且 时间没有过中午十二点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(time.getDayOfMonth()==time.getMonth().maxLength() &amp;&amp; sj.getHour()&lt;<span class=\"number\">12</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">//判断日期小于24号，如果为24号，也小于下午四点</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(time.getDayOfMonth()&lt;<span class=\"number\">24</span> || (time.getDayOfMonth()==<span class=\"number\">24</span> &amp;&amp; time.getHour()&lt;<span class=\"number\">16</span>)</span><br></pre></td></tr></table></figure>\r\n<h4 id=\"设置时间\">2、设置时间</h4>\r\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//比time 多一个月，设1日  00:00:00</span></span><br><span class=\"line\"><span class=\"type\">LocalDateTime</span> <span class=\"variable\">transDate</span> <span class=\"operator\">=</span> time.plusMonths(<span class=\"number\">1</span>).withDayOfMonth(<span class=\"number\">1</span>).withHour(<span class=\"number\">0</span>).withMinute(<span class=\"number\">0</span>).withSecond(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\r\n",
            "tags": [
                "后端",
                "Java",
                "数据类型"
            ]
        }
    ]
}